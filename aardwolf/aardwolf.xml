<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>aard</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>adt</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>infogate</name>
					<script>aard.continueinfo = aard.continueinfo or getLineNumber()
aard.foundmatch = aard.foundmatch or false

if aard.continueinfo == getLineNumber() - 1 then
	if aard.foundmatch == false then
		appendBuffer("All")
		appendBuffer("Spouse")
	end
end
aard.continueinfo = getLineNumber()
aard.foundmatch = false
selectCurrentLine()
copy()
--echo(getLineNumber())
--echo(matches[2])</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>1</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^INFO\: (.*)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>endCapture</name>
						<script>if string.find(matches[2], "INFO") then
	--do nothing
else
	aard.continueinfo = false
	if aard.foundmatch==false then
		appendBuffer("All")
		appendBuffer("Spouse")
	end
	setTriggerStayOpen("infogate",0)
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(.*)$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Unclanned-death</name>
						<script>death("unclanned",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (?:The valkyries come for |You hear a loud scream as )?(\w+) (who was slain|is brutally killed|has been (removed from this realm|killed)) by( a direct hit from)? (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Boot-death</name>
						<script>death("boot",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: The last post plays mournfully as (.*) falls in battle to (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Crimson-death</name>
						<script>death("crimson",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*)\'s? blood is spilled by (.*) and the earth runs crimson\. $</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Loqui-death</name>
						<script>death("loqui",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Silence falls as (.*) is slain by (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Emerald-death</name>
						<script>death("emerald",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Knights race from the stronghold to avenge the death of (.*) to (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Masaki-death</name>
						<script>death("masaki",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Without a glimpse of hesitation\, (.*) performs the seppuku\, assisted by (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Light-death</name>
						<script>death("light",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Radience embraces (.*) who died valiantly in combat against (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Crusader-death</name>
						<script>death("crusader",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: The heavens part as (.*) is sent by (.*) to the Nameless One\'s embrace\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Pyre-death</name>
						<script>death("pyre",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Tormented spirits wail in requiem as dark flames ravage the soul of (.*)\, slain by (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Touchstone-death</name>
						<script>death("touchstone",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: A mountain fades as (.*) dies to (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Hook-death</name>
						<script>death("hook",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: The pirates prepare a burial at sea for (.*)\, slain by (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Amazon-death</name>
						<script>death("amazon",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: The Tribes prepare a ritual for (.*)\. Hunters are sent after (.*) for revenge\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Seekers-death</name>
						<script>death("seekers",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*)\'s? knowledge couldn\'t save them from (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Retribution-death</name>
						<script>death("retribution",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) is sent with a blood curdling scream by (.*) to meet Taboo\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Bard-death</name>
						<script>death("bard",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) and (.*) have an Oscar\-winning final scene\!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Baal-death</name>
						<script>death("baal",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*)\, cursing (.*)\, embraces death and returns to the Dark One\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Rhabdo-death</name>
						<script>death("rhabdo",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: A scream of vengeance is heard as Dak\'kon revives (.*) to claim their revenge on (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Chaos-death</name>
						<script>death("chaos",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: The Three Moons mourn the passing of (.*) at the hands of (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Druid-death</name>
						<script>death("druid",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: The Cwn Annwn emerge in a frenzy with (.*) in their midst\, savagely hunting down (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Gaardian-death</name>
						<script>death("gaardian",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*)\'s? journalistic integrity crumbles in the affair known as (.*)gate\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Xunti-death</name>
						<script>death("xunti",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) is cut down in the midst of bloody warfare by (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Imperium-death</name>
						<script>death("imperium",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: You hear a faint rendition of \"Taps\" as (.*) is slain by (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Tao-death</name>
						<script>death("tao",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*)\'s? Chi has been unbalanced by (.*)\, and (he|she|it) begins (his|her|its) journey anew\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Dragon-death</name>
						<script>death("dragon",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) is slain by (.*) and is borne on swift wings to seek Vorel\'s embrace\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Watchmen-death</name>
						<script>death("watchmen",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Stendarr cries tears of Anguish as (.*) is slain by (.*)\!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Twinlobe-death</name>
						<script>death("twinlobe",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) has attained a better understanding of death\, thanks to (.*)\!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Perdition-death</name>
						<script>death("perdition",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Valiant to the end\, (.*) has fallen to (.*) in battle\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Outcast-death</name>
						<script>death("outcast",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Nobody mourns the death of outcast (.*)\, slain by (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Boot-suicide</name>
						<script>death("boot",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) yells \'Death before Dishonor\' and then chooses death\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Dragon-suicide</name>
						<script>death("dragon",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) sneaks a peek at Vorel\'s cleavage and pays the ultimate price\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Twinlobe-suicide</name>
						<script>death("twinlobe",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) attempts to divide by zero\, with catastrophic results\!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Emerald-suicide</name>
						<script>death("emerald",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: A tear falls from Athena\'s eye as (.*) throws (him|her|it)self from the parapets\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Watchmen-suicide</name>
						<script>death("watchmen",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Without a moments hesitation\, (.*) makes the ultimate sacrifice in the name of Stendarr\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Loqui-suicide</name>
						<script>death("loqui",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Though (.*) falls in battle\, The Revolution carries on\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Hook-suicide</name>
						<script>death("hook",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: You did not know it was possible to keelhaul yourself. (.*) demonstrates\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Rhabdo-suicide</name>
						<script>death("rhabdo",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) has fallen to the dire\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Xunti-suicide</name>
						<script>death("xunti",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: With no virgins left\, Xiuhtecuhtli accepts the ultimate sacrifice of (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Druid-suicide</name>
						<script>death("druid",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: A raven\'s caw echoes in the grove as (.*) walks into the veil to the Otherworld\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Baal-suicide</name>
						<script>death("baal",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) bursts into flames as (he|she|it) draws too deeply on the True Source\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Crimson-suicide</name>
						<script>death("crimson",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) slips while dancing on the oars and plummets to (his|her|its) death\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Amazon-suicide</name>
						<script>death("amazon",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) slits their throat to escape only to be reborn a little stronger\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Pyre-suicide</name>
						<script>death("pyre",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: The everlasting flames burn brighter as (.*)\'s? soul fades into eternal darkness\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Perdition-suicide</name>
						<script>death("perdition",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Apollyon's intervention saves (.*) from unending death\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Unclanned-lvl</name>
						<script>lvl("unclanned",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) raises a level. Now up to level \d+\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Twinlobe-lvl</name>
						<script>lvl("twinlobe",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) adds another \d+ pages to (his|her|its) research\!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Watchmen-lvl</name>
						<script>lvl("watchmen",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Stendarr\'s angel sings praises to (.*) for attaining level \d+\!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Xunti-lvl</name>
						<script>lvl("xunti",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Screams echo through the mist as (.*) sacrifices \d+ captives to Xiuhtecuhtli\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Light-lvl</name>
						<script>lvl("light",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: The minions of darkness squeal in terror as (.*) reaches level \d+\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Dragon-lvl</name>
						<script>lvl("dragon",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Dragons belch fire and Vorel exults as (.*) slays \d+ villains\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Baal-lvl</name>
						<script>lvl("baal",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) spirals towards insanity as (he|she|it) draws \d+ percent more from the True Power\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Bard-lvl</name>
						<script>lvl("bard",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) frantically fumbles for a pen to write down a new haiku for gaining level \d+\!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Seekers-lvl</name>
						<script>lvl("seekers",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) has gained both knowledge and understanding\, advancing in power to level \d+\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Chaos-lvl</name>
						<script>lvl("chaos",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: The Three Moons blaze in glory as (.*) reaches level \d+\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Crusader-lvl</name>
						<script>lvl("crusader",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Weapons gleam and trumpets sound from the Crusader\'s grand temple as (.*) leads \d+ Holy Knights on a quest for another holy artifact\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Emerald-lvl</name>
						<script>lvl("emerald",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Raising their sword in honor to Athena\, (.*) attains level \d+\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Hook-lvl</name>
						<script>lvl("hook",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: The pirates plunder nearby villages to celebrate (.*) reaching level \d+\!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Imperium-lvl</name>
						<script>lvl("imperium",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) has achieved level \d+ of military training\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Crimson-lvl</name>
						<script>lvl("crimson",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Thor\'s hammer shatters the earth\, sending lightning across the land as (.*) gains level \d+\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Retribution-lvl</name>
						<script>lvl("retribution",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Clans start to panic as raider (.*) obtains level \d+\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Druid-lvl</name>
						<script>lvl("druid",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: A sip of Kyrridwen\'s brew imparts guarded knowledge as (.*) gains level \d+\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Amazon-lvl</name>
						<script>lvl("amazon",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Battle may have taken its toll but through constant training (.*) has obtained level \d+\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Pyre-lvl</name>
						<script>lvl("pyre",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: A bell tolls in the darkness as (.*) leads \d+ souls to eternal misery\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Masaki-lvl</name>
						<script>lvl("masaki",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) is surrounded by the souls of \d+ legendary samurai and ninjas who bestow their approval\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Rhabdo-lvl</name>
						<script>lvl("rhabdo",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: The voice of Dak\'kon leads (.*) to level \d+\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Perdition-lvl</name>
						<script>lvl("perdition",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) scours the land in search of enlightenment\, purging another \d+ souls by the cold steel of Apollyon\'s blade\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Loqui-lvl</name>
						<script>lvl("loqui",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Working in the shadows\, (.*) gathers \d+ followers of The Revolution\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Gaardian-lvl</name>
						<script>lvl("gaardian",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) successfully fends off another libel lawsuit\! \(Full story on page \d+\!\)$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Touchstone-lvl</name>
						<script>lvl("touchstone",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: The black stone guides (.*) into gaining level \d+\!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Tao-lvl</name>
						<script>lvl("tao",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: The wind of duality strengthens\, as (.*) aligns (him|her|it)self \d+ steps closer with Tao\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Boot-lvl</name>
						<script>lvl("boot",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Another battalion falls before (.*) as (he|she|it) raises to level \d+\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Outcast-lvl</name>
						<script>lvl("outcast",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Nobody cares as the outcast (.*) reaches level \d+\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Unclanned</name>
						<script>pup("unclanned",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: The mighty hero (.*) has increased in power\!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Boot</name>
						<script>pup("boot",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) becomes stronger as (he|she|it) practices (?:his|her|its) skills for battle\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Touchstone</name>
						<script>pup("touchstone",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Stones fall from the high mountains as (.*) increases in strength\!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Tao</name>
						<script>pup("tao",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) takes a step closer to Nirvana as (his|her|its) power increases\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Gaardian</name>
						<script>pup("gaardian",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Mild mannered reporter (.*) leaps into a nearby phone booth\, mistaking it for a dressing room\!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Loqui</name>
						<script>pup("loqui",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: You hear slight whispers as (.*) helps The Revolution grow\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Perdition</name>
						<script>pup("perdition",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) just beat Aardwolf\.\.\.again\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Rhabdo</name>
						<script>pup("rhabdo",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) amasses new power and leads the Dark Templars in new rituals to Dak\'kon\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Masaki</name>
						<script>pup("masaki",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Not a sound is heard as (.*) crosses the nightingale floor and steals your last breath\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Pyre</name>
						<script>pup("pyre",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) culls more souls and watches them ignite as Sorrow stokes the inferno\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Amazon</name>
						<script>pup("amazon",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Reflecting from constant battle\, (.*)\'s strength radiates within\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Druid</name>
						<script>pup("druid",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Another tale about (.*) is written in the Book of Mabinogian\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Retribution</name>
						<script>pup("retribution",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Blood drips from (.*)\'s weapon as they turn their gaze towards you\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Crimson</name>
						<script>pup("crimson",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*)\'s hammer shatters the earth, sending lightning across the land\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Imperium</name>
						<script>pup("imperium",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Bloodied but victorious\, (.*) rises and screams \"Veni Vidi Vici\!\"$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Xunti</name>
						<script>pup("xunti",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Blood gushes from the latest sacrifice as (.*) gains the approval of Xiuhtecuhtli\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Crusader</name>
						<script>pup("crusader",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: There is rejoicing in the Temple as Crusader Hero (.*) increases in power\!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Bard</name>
						<script>pup("bard",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Orchestral music swells as (.*) completes another rousing verse in the epic Song of Aardwolf\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Hook</name>
						<script>pup("hook",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: People burn and villages flee in terror as (.*) conquers more of the world\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Baal</name>
						<script>pup("baal",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: The True Source floods (.*) with Power\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Dragon</name>
						<script>pup("dragon",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: A sword is drawn as Draconian fury pulses through (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Light</name>
						<script>pup("light",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: A magnificent light shines before (.*) leading them toward the virtue of Radience\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Emerald</name>
						<script>pup("emerald",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: (.*) kneels in worship to Athena in celebration of another glorious victory\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Seekers</name>
						<script>pup("seekers",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: The genius (?&lt;name&gt;.*) has found another way to avoid remorting\!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Chaos</name>
						<script>pup("chaos",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: The very Fabric of Magic shudders as (.*)\'s power increases\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Watchmen</name>
						<script>pup("watchmen",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Stendarr smiles as his holy champion\, (.*)\, triumphs over evil\!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Twinlobe</name>
						<script>pup("twinlobe",matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^INFO: Energy flows through (.*) as s?he gains understanding\!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
			</TriggerGroup>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>inGame</name>
				<script>raiseEvent("inGame")</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^Welcome to Aardwolf. May your adventures be mystical, challenging and rewarding.$</string>
					<string>^############# Reconnecting to Game #############$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>map</name>
				<script>clearWindow("minimap")</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>20</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>&lt;MAPSTART&gt;</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>3</integer>
				</regexCodePropertyList>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>capture</name>
					<script>--echo("\ncaptured value: " .. matches[2] .. " .\n")
if matches[2] == "&lt;MAPSTART&gt;" or matches[2] == "&lt;MAPEND&gt;" or matches[2] == "&lt;MAPEND&gt;" then
	deleteLine()
else
	selectString(line, 1)
	copy()
	appendBuffer("minimap")
	deleteLine()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(.*)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>endCapture</name>
					<script>setTriggerStayOpen("map",0)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>&lt;MAPEND&gt;</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>exitsCheck</name>
				<script>if string.match(matches[2], "other") then
	--temp disabled, portals being set for skills/spells
	setRoomChar(gmcp.room.info.num, "&gt;")
	--aard.other = true
else
	aard.other = false
end
if string.find(matches[2], "(north)", 0, true) then
	setDoor(gmcp.room.info.num, "n", 2)
	setDoor(gmcp.room.info.exits["n"], aard.reverse_dirs["n"], 2)
end
if string.find(matches[2], "(south)", 0, true) then
	setDoor(gmcp.room.info.num, "s", 2)
	setDoor(gmcp.room.info.exits["s"], aard.reverse_dirs["s"], 2)
end
if string.find(matches[2], "(east)", 0, true) then
	setDoor(gmcp.room.info.num, "e", 2)
	setDoor(gmcp.room.info.exits["e"], aard.reverse_dirs["e"], 2)
end
if string.find(matches[2], "(west)", 0, true) then
	setDoor(gmcp.room.info.num, "w", 2)
	setDoor(gmcp.room.info.exits["w"], aard.reverse_dirs["w"], 2)
end
if string.find(matches[2], "(up)", 0, true) then
	setDoor(gmcp.room.info.num, "up", 2)
	setDoor(gmcp.room.info.exits["u"], aard.reverse_dirs["u"], 2)
end
if string.find(matches[2], "(down)", 0, true) then
	setDoor(gmcp.room.info.num, "down", 2)
	setDoor(gmcp.room.info.exits["d"], aard.reverse_dirs["d"], 2)
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^\[ Exits: (.*) \]$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>healthPotionTracker</name>
				<script>aard.hpot = tonumber(matches[2]) or 1
local hp_pct = tostring(getPercent(aard.hp, aard.maxhp))
Health:setValue(aard.hp, aard.maxhp,"&lt;b&gt; &amp;nbsp; "..aard.hp.."hp | "..string.format("%i", hp_pct).."% &amp;nbsp; ("..aard.hpot..")&lt;/b&gt;")

-- Clan			lvl	Health (Heal)
-- Masaki		201 -=Warm Sake=-
-- Tao			201	Little Jade Pill [EXTREME]
-- Shadkil	201 a mysterious black pill
-- Pyre     201 Whispers in the Twilight
-- Touchston 60 (&gt;TouchStone&lt;) Blue Gem Extract
-- Perdition 60 + Eternity +
-- Dragon    60 White Dragon's Blood
-- Gaardian  60 Grande Caramel Macchiato
-- Tao			 60 -=[ Healing Power of the Jade Dragon ]=-
-- Dominion  60 Jade Elixir
-- Bard			 60 Healer's Ballad
-- Pyre		   60 A Bitter Reprieve
-- Crimson	 60	Vigor
-- masaki		 60 -=Salve of Seikenji=-
-- Seekers	 60 (Seekers) Potion of Healing
-- Crusader	 60 Salvation
-- DoH			 60	Healing Touch
-- Tanelorn  60 Tranquility's Healing Touch
-- loqui		 60 :::Angel's Breath:::
-- druid		 60 \|/ Ogham Bark \|/

-- Aylor		  1 (!(Light Relief)!)		\(!\(Light Relief\)!\)|\(!\(Serious Relief\)!\)|\(!\(Critical Care\)!\)
-- Aylor		 20 (!(Serious Relief)!)  
-- Aylor		 40 (!(Critical Care)!)   </script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^(?:\([ ]*(\d+)\)|    ) (?:\(.*?\) |)(?:Academy Healing Potion|a mysterious black pill|\(!\(Light Relief\)!\)|\(!\(Serious Relief\)!\)|\(!\(Critical Care\)!\)|White Dragon's Blood|Whispers in the Twilight|Grande Caramel Macchiato|Jade Elixir|Healer's Ballad|A Bitter Reprieve|Vigor|Salvation|Healing Touch|Tranquility's Healing Touch|-=Warm Sake=-|-=Salve of Seikenji=-|:::Angel's Breath:::|\+ Eternity \+|Little Jade Pill \[EXTREME\]|\(&gt;TouchStone&lt;\) Blue Gem Extract|-=\[ Healing Power of the Jade Dragon \]=-|\(Seekers\) Potion of Healing|\\\|/ Ogham Bark \\\|/).*\)$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>manaPotionTracker</name>
				<script>aard.spot = tonumber(matches[2]) or 1
local mp_pct = tostring(getPercent(aard.mp, aard.maxmp))
Mana:setValue(aard.mp, aard.maxmp,"&lt;b&gt; &amp;nbsp; "..aard.mp.."mp | "..string.format("%i", mp_pct).."% &amp;nbsp; ("..aard.spot..")&lt;/b&gt;")

-- Clan			lvl	Mana (black lotus)
-- Dominion	201 Moonlight Wine
-- Masaki		201 -=Shogun's Viagra Shot=-
-- Tao			201	-=[ Essence of the Jade Dragon ]=-
-- Seekers  201 (Seekers) Potion of Lotus Flower
-- Touchston201 (&gt;TouchStone&lt;) Sardonyx Gem Extract
-- Pyre			201 Sigil of Solitude 
-- Crimson	200	Meade of the Gods
-- DoH			200	Flourish of Magic
-- Tanelorn 200 Philter of Peace
-- Dragon		200	-=*)Dragon's Breath(*=-
-- Romani		180 ^*^Darane Svatura^*^
-- Tanelorn 180 Prosperity
-- Touchston175 (&gt;Touchstone&lt;) Diamond Gem extract
-- Dominion	150 Ancestral Power
-- Seekers  150 (Seekers) Potion of Lotus Bloom
-- Touchston150 (&gt;TouchStone&lt;) Amethyst Gem Extract
-- Bard			130 Bag o' Buttery Showtime Popcorn
-- Touchston125 (&gt;Touchstone&lt;) Citrine Gem Extract
-- Tanelorn 120 Terrill's Energy Tonic
-- Gaardian 120 Ice Cold Arnold Palmer
-- Crusader 100 Epiphany
-- Seekers	100 (Seekers) Potion of Lotus Bud
-- loqui		100 :::Revolution's Calling:::
-- Dragon	  100	Vorel's Lightning
-- Tao			 91 -=[ Blood of the Jade Dragon ]=-
-- Dominion	 90 Call upon spirits
-- Touchston 85 (&gt;TouchStone&lt;) Alabaster Gem Extract
-- Gaardian  80 a shot of espresso
-- Romani		 80 Trandorfir Pani ---'---,{@
-- Dominion	 60 Green Herbal Tea
-- DoH			 60 Mystical Touch
-- Seekers	 60 (Seekers) Potion of Lotus Stem
-- Tanelorn  60 Tranquility's Blessed Lucidity
-- loqui		 60 :::Devil's Brew:::
-- Tao			 40 -=[ Meditation of the Jade Dragon ]=-
-- Touchston 40 (&gt;Touchstone&lt;) Green Garnet Gem Extract
-- Crusader  30	Celestial Beads
-- Seekers	 30 (Seekers) Potion of Lotus Seed
-- Bard			 20 Cheesy Nachos
-- Academy	  1	Academy Black Lotus Potion

-- Aylor		  1	(!(Lotus Rush)!)	</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^(?:\([ ]*(\d+)\)|    ) (?:\(.*?\) |)(?:Moonlight Wine|\(!\(Lotus Rush\)!\)|Sigil of Solitude|Meade of the Gods|Flourish of Magic|Philter of Peace|Prosperity|Ancestral Power|Bag o' Buttery Showtime Popcorn|Terrill's Energy Tonic|Ice Cold Arnold Palmer|Epiphany|Vorel's Lightning|Call upon spirits|a shot of espresso|Green Herbal Tea|Mystical Touch|Tranquility's Blessed Lucidity|Celestial Beads|Cheesy Nachos|Academy Black Lotus Potion|:::Devil's Brew:::|:::Revolution's Calling:::|-=Shogun's Viagra Shot=-|-=\[ Essence of the Jade Dragon \]=-|-=\[ Blood of the Jade Dragon \]=-|-=\[ Meditation of the Jade Dragon \]=-|\^\*\^Darane Svatura\^\*\^|Trandorfir Pani ---'---,{@|-=\*\)Dragon's Breath\(\*=-|\(&gt;TouchStone&lt;\) Sardonyx Gem Extract|\(&gt;Touchstone&lt;\) Diamond Gem extract|\(&gt;TouchStone&lt;\) Amethyst Gem Extract|\(&gt;Touchstone&lt;\) Citrine Gem Extract|\(&gt;TouchStone&lt;\) Alabaster Gem Extract|\(&gt;Touchstone&lt;\) Green Garnet Gem Extract|\(Seekers\) Potion of Lotus Flower|\(Seekers\) Potion of Lotus Bloom|\(Seekers\) Potion of Lotus Bud|\(Seekers\) Potion of Lotus Stem|\(Seekers\) Potion of Lotus Seed).*\)$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>movePotionTracker</name>
				<script>aard.mpot = tonumber(matches[2]) or 1
local mv_pct = tostring(getPercent(aard.mv, aard.maxmv))
Moves:setValue(aard.mv, aard.maxmv,"&lt;b&gt; &amp;nbsp; "..aard.mv.."mv | "..string.format("%i", mv_pct).."% &amp;nbsp; ("..aard.mpot..")&lt;/b&gt;")

-- Clan			lvl	Moves (refresh)
-- Daoine		150 FaetorAde
-- Dominion 100 a Refreshing Idea
-- Bard			100 Song of the Traveller
-- Seekers	100 No-Doze
-- Touchston 85 (&gt;TouchStone&lt;) Ruby Gem Extract
-- Chaos		 50 {A Minor Rejuve}
-- Crusader	 50	Divine Refreshment
-- Academy	  1	Academy Refresh Potion

-- Clan			lvl	Utility:
-- Boot 		 60 [Potion] Military Breakfast  heal,heal,black lotus,refresh
-- Bard					The Skeleton Key Rag		pass door,fly,underwater breathing,true seeing
-- Seekers	 48 (Seekers) Elixir of Maneuverability		pass door,fly,underwater breathing,invis</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^(?:\([ ]*(\d+)\)|    ) (?:\(.*?\) |)(?:FaetorAde|a Refreshing Idea|Song of the Traveller|No-Doze|Divine Refreshment|{A Minor Rejuve}|Academy Refresh Potion|\(&gt;TouchStone&lt;\) Ruby Gem Extract).*\)$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>consider all - mob string</name>
				<script>moveCursor(0, getLineNumber())
if matches[3] == " would be easy, but is it even worth the work out?" then--y
	hinsertText('|c550000-10 ')
elseif matches[3] == " looks a little worried about the idea." then--y
	hinsertText('|c770000 -2 ')
elseif matches[3] == " should be a fair fight!" then--y
	hinsertText('|c005500 -1 ')
elseif matches[3] == " snickers nervously." then--y
	hinsertText('|c007700 +2 ')
elseif matches[3] == " chuckles at the thought of you fighting" then--y
	hinsertText('|c009900 +5 ')
elseif matches[3] == " would crush you like a bug!" then--y
	hinsertText('|c996622+21 ')
elseif matches[3] == " would dance on your grave!" then--y
	hinsertText('|c996622+31 ')
elseif matches[3] == " says 'BEGONE FROM MY SIGHT unworthy!'" then--y
	hinsertText('|c996622+41 ')
elseif matches[3] == " into the ground." then--y
	hinsertText('|c550000-20 ')
elseif matches[3] == " is weak compared to you." then--y
	hinsertText('|c770000 -5 ')
elseif matches[3] == " while you can!" then--y
	hinsertText('|c009900+10 ')
elseif matches[3] == " would be either very brave or very stupid." then--y
	hinsertText('|c996622+16 ')
elseif matches[2] == "You would be completely annihilated by " then
	hinsertText('|c996622+51 ')
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^(?:\(.*\) |)(.*)((?: would be easy, but is it even worth the work out\?| looks a little worried about the idea.| should be a fair fight!| snickers nervously.| chuckles at the thought of you fighting| would crush you like a bug!| would dance on your grave!| says 'BEGONE FROM MY SIGHT unworthy!'))(?: him.| her.| it.|)$</string>
					<string>^(?:|\(.*\) )(?:You would stomp |No Problem! |Best run away from |Challenging |You would be completely annihilated by )(.*)((?: into the ground.| is weak compared to you.| while you can!| would be either very brave or very stupid.))$</string>
					<string>^(?:|\(.*\) )(You would be completely annihilated by )(.*)!$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>noexp off</name>
				<script>aard.noexp = ""
aard.qTimeNOexp()</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^You will now receive experience. Happy leveling!$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>noexp on</name>
				<script>if aard.noexp ~= " *NO EXP*" then
  aard.noexp = " *NO EXP*"
  aard.qTimeNOexp()
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^You will no longer receive experience. Happy questing!$</string>
					<string>^You have set your character to receive no experience points!$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>daily blessing</name>
				<script>--18 Apr 2019 12:58:55
--echo("\n input date: "..matches[2])
--lastblessing="18 Apr 2019 12:58:55"
aard.timerDaily = datetime:parse(matches[2], "%d %b %Y %H:%M:%S", true)
aard.timerDaily = aard.timerDaily - 3600--workaround bug: https://github.com/Mudlet/Mudlet/issues/2514
--echo("\n epoch date: ")
--display(aard.timerDaily)

--echo("\n epoch date, difference from now: ")
--display(shms(getEpoch()-aard.timerDaily, true))

aard.timerDaily = aard.timerDaily + (aard.config["tdiff"]*60*60) + 82800--82800 = 23 hours which is the time between blessings
--echo("\n output date: ")--1555621135
--display(aard.tdiff*60*60)
--display(aard.timerDaily)
onTick()
--aard.qTimeNOexp()</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^You received your last daily blessing at (.*)\.$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>disarmed</name>
				<script>send("get "..aard.config["wield"]..";wield "..aard.config["wield"])</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^.* DISARMS you and sends your .* flying\!$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>pupstat</name>
				<script>aard.plevel = aard.clevel or math.floor(getEpoch())
aard.clevel = math.floor(getEpoch())
aard.ltime = ""
local h,m,s = shms(aard.clevel-aard.plevel)
if h ~= "00" then
	aard.ltime = "@W"..h.."@yh:"
end
if h ~= "00" or m ~= "00" then
	aard.ltime = aard.ltime.."@W"..m.."@ym:"
end
aard.ltime = aard.ltime.."@W"..s.."@ys"

--aard.ltime  00h:02m:40s

aard.levelstat = {
[aard.clevel]={level=gmcp.char.status.level,zone=gmcp.room.info.zone,train=0,lucky=0,bt=0,db=0,str=0,int=0,wis=0,dex=0,con=0,luck=0,},
}
aard.levelreport = true


function pupreport()
	local trainsum = tonumber(aard.levelstat[aard.clevel].train) + tonumber(aard.levelstat[aard.clevel].lucky) + tonumber(aard.levelstat[aard.clevel].bt) + tonumber(aard.levelstat[aard.clevel].db)
	aard.pupstr = "@ypup: @W"..aard.levelstat[aard.clevel].train
	if aard.levelstat[aard.clevel].lucky ~= 0 then
		aard.pupstr = aard.pupstr.."@y+@W"..aard.levelstat[aard.clevel].lucky
	end
	if aard.levelstat[aard.clevel].bt ~= 0 then
		aard.pupstr = aard.pupstr.."@y+@W"..aard.levelstat[aard.clevel].bt
	end
	if aard.levelstat[aard.clevel].db ~= 0 then
		aard.pupstr = aard.pupstr.."@y+@W"..aard.levelstat[aard.clevel].db
	end
	aard.pupstr = aard.pupstr.."@y = @W"..trainsum.."@ytrains "
	local statspace = ""
	if aard.levelstat[aard.clevel].str ~= 0 then
		aard.pupstr = aard.pupstr.."@y+@Wstr"
		statspace = " "
	end
	if aard.levelstat[aard.clevel].int ~= 0 then
		aard.pupstr = aard.pupstr.."@y+@Wint"
		statspace = " "
	end
	if aard.levelstat[aard.clevel].wis ~= 0 then
		aard.pupstr = aard.pupstr.."@y+@Wwis"
		statspace = " "
	end
	if aard.levelstat[aard.clevel].dex ~= 0 then
		aard.pupstr = aard.pupstr.."@y+@Wdex"
		statspace = " "
	end
	if aard.levelstat[aard.clevel].con ~= 0 then
		aard.pupstr = aard.pupstr.."@y+@Wcon"
		statspace = " "
	end
	if aard.levelstat[aard.clevel].luck ~= 0 then
		aard.pupstr = aard.pupstr.."@y+@Wluck"
		statspace = " "
	end
	local xpmob = math.floor(aard.mobexp/aard.mobcount)
	
	local secs = aard.clevel-aard.plevel
	local xpsec = aard.mobexp/secs
	local xpmin = math.floor(xpsec*60)
	
	--aard.pupstr = aard.pupstr..statspace..aard.ltime.." @W"..aard.mobcount.."@ymobs (@W"..xpmob.."@yxp/mob @W"..xpmin.."@yxp/min)"
	aard.pupstr = aard.pupstr..statspace..aard.ltime
	--StatMonitor: Gained a pup: 3+1 = 4 trains int+wis bonus 01m:58s 14 mobs killed (63.93xp/mob 508xp/min)
	--titan/terra i hear are 4/5 man max
	
	if gmcp.group then
		if gmcp.group.count then
      if gmcp.group.count &lt; 5 then
      	send("gt "..aard.pupstr)
      end
		end
	else
		send("gt "..aard.pupstr)
  end
	--decho("All", "&lt;50,50,0:0,255,0&gt;test")
	--128-128-0
	--255-255-255
	
	--reset values
	aard.mobcount = 0
	aard.mobexp = 0
	
	setTriggerStayOpen("pupstat",0)
end

timerID = tempTimer(2, [[pupreport()]])--report in 2 seconds, all level up data should be recorded by then.

--You raise a level! You are now level 70.
--Congratulations, hero. You have increased your powers!</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>9</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>Congratulations, hero. You have increased your powers!</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>3</integer>
				</regexCodePropertyList>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="yes" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>trains</name>
					<script>aard.levelstat[aard.clevel].train = matches[2]

--You gain 3 trains.
--Lucky! You gain an extra 2 training sessions!
--You gain 1 additional training session from your enhanced battle learning.
--You gain a bonus Wisdom point!
--You gain a bonus Intelligence point!</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You gain (\d+) train[s]*\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="yes" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>lucky</name>
					<script>aard.levelstat[aard.clevel].lucky = matches[2]

--You gain 3 trains.
--Lucky! You gain an extra 2 training sessions!
--You gain 1 additional training session from your enhanced battle learning.
--You gain a bonus Wisdom point!
--You gain a bonus Intelligence point!</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Lucky! You gain an extra (\d+) training session[s]*!$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="yes" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Battle Training</name>
					<script>aard.levelstat[aard.clevel].bt = matches[2]

--You gain 3 trains.
--Lucky! You gain an extra 2 training sessions!
--You gain 1 additional training session from your enhanced battle learning.
--You gain a bonus Wisdom point!
--You gain a bonus Intelligence point!
--You gain 6 extra trains daily blessing bonus.</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You gain (\d+) additional training session[s]* from your enhanced battle learning\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="yes" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Daily Blessing</name>
					<script>aard.levelstat[aard.clevel].db = matches[2]

--You gain 3 trains.
--Lucky! You gain an extra 2 training sessions!
--You gain 1 additional training session from your enhanced battle learning.
--You gain a bonus Wisdom point!
--You gain a bonus Intelligence point!
--You gain 6 extra trains daily blessing bonus.</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You gain (\d+) extra train[s]* daily blessing bonus\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="yes" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Stat</name>
					<script>if matches[2] == "Strength" then
	aard.levelstat[aard.clevel].str = aard.levelstat[aard.clevel].str+1
elseif matches[2] == "Intelligence" then
	aard.levelstat[aard.clevel].int = aard.levelstat[aard.clevel].int+1
elseif matches[2] == "Wisdom" then
	aard.levelstat[aard.clevel].wis = aard.levelstat[aard.clevel].wis+1
elseif matches[2] == "Dexterity" then
	aard.levelstat[aard.clevel].dex = aard.levelstat[aard.clevel].dex+1
elseif matches[2] == "Constitution" then
	aard.levelstat[aard.clevel].con = aard.levelstat[aard.clevel].con+1
elseif matches[2] == "Luck" then
	aard.levelstat[aard.clevel].luck = aard.levelstat[aard.clevel].luck+1
end

--You gain 3 trains.
--Lucky! You gain an extra 2 training sessions!
--You gain 1 additional training session from your enhanced battle learning.
--You gain a bonus Wisdom point!
--You gain a bonus Intelligence point!</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You gain a bonus (\w+) point!$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</Trigger>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>PlayerNotes</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Finger</name>
					<script>if not aard.playerdb then
	aard.playerdb = aard.playerdb or {}
  if io.exists(getMudletHomeDir().."/aardwolf/config-playerdb.lua") then
    table.load(getMudletHomeDir().."/aardwolf/config-playerdb.lua", aard.playerdb)
  else
  	table.save(getMudletHomeDir().."/aardwolf/config-playerdb.lua", aard.playerdb)
  end
end

function delPlayerNote(player)
	if aard.playerdb[player] then
		aard.playerdb = table.removeKey(aard.playerdb, player)
	end
end

if aard.playerdb[matches[2]] then
	decho("\n&lt;255,255,255&gt;Note: ")
	dechoLink("&lt;51,102,255&gt;"..aard.playerdb[matches[2]], "printCmdLine'playernote "..matches[2].." "..aard.playerdb[matches[2]].."'", "Click to edit Note for this Player.", true)
	echo("  ")
	dechoLink('&lt;192,0,0&gt;[x]', 'delPlayerNote("'..matches[2]..'")', 'Click to delete the Note for '..matches[2], true)
	--dechoLink("&lt;192,0,0&gt;[x]", "printCmdLine'playernote delete "..matches[2].."'", "Click to delete the Note for this Player.", true)
else
	decho("\n&lt;255,255,255&gt;Note: ")
	dechoLink("&lt;51,102,255&gt;[Add Note]", "printCmdLine'playernote "..matches[2].." '", "Click to set a Note for this Player.", true)
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^---------------- Player \: (\w+) \(\w+\) --------------</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>captures/gags</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>PK/Scry</name>
					<script>decho("\n&lt;255,0,0&gt;PK!!\nPK!!\nPK!!\nPK!!\nPK!!\nPK!!\nPK!!\nPK!!\nPK!!\nPK!!\nPK!!\nPK!!\nPK!!\nPK!!\nPK!!\nPK!!\nPK!!\nPK!!\nPK!!\n")
decho("All", "&lt;255,0,0&gt;PK!!")
decho("Private", "&lt;255,0,0&gt;PK!!")
decho("Group", "&lt;255,0,0&gt;PK!!")
aard.audioAlert("Tell")
aard.audioAlert("Alert")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You feel as if you are being watched\.$</string>
						<string>^\*\* You can take revenge on \w+ for \d+ minutes\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>War</name>
					<script>if tonumber(gmcp.char.status.level) &gt;= tonumber(matches[2]) and tonumber(gmcp.char.status.level) &lt;= tonumber(matches[3]) then
  selectCurrentLine()
  copy()
  appendBuffer("Private")
  appendBuffer("All")
  appendBuffer("Group")
  aard.audioAlert("Alert")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^WARFARE\: .* has been declared by \w+ for levels (\d+) to (\d+)!$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Gquest</name>
					<script>if tonumber(gmcp.char.status.level) &gt;= tonumber(matches[2]) and tonumber(gmcp.char.status.level) &lt;= tonumber(matches[3]) then
  selectCurrentLine()
  copy()
  appendBuffer("Private")
  appendBuffer("All")
  appendBuffer("Group")
  aard.audioAlert("Gquest")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Global Quest\: Global quest # \d+ has been declared for levels (\d+) to (\d+) \- .*\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>captures Private</name>
					<script>selectCurrentLine()
copy()
appendBuffer("Private")
appendBuffer("All")
appendBuffer("Group")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Remort Auction\: .*$</string>
						<string>^(\w+) (?:has|tried to) invite[d]* you to join group\: (.*)\.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>gquest captures ALL</name>
					<script>selectCurrentLine()
copy()
appendBuffer("All")
--^\&gt;\&gt;\&gt; .* \&lt;\&lt;\&lt;$
--^INFO\: .*$</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Global Quest\: Global Quest # \d+ has been won by \w+ \- \d+(?:th|st|rd) win\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>capture remote socials</name>
					<script>selectCurrentLine()
local r,g,b = getFgColor()
--echo("\n"..r.."-"..g.."-"..b.."\n")
if r == 0 and g == 128 and b == 128 then
	copy()
	appendBuffer("Private")
	appendBuffer("All")
	appendBuffer("Group")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#008080</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\*.*$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>gag clan</name>
					<script>if gmcp.room then
  if gmcp.room.info then
    if gmcp.room.info.num == 47195 then--Boot cRecal
    	deleteLine()
    end
  end
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\w+ considers (?:his|her) chances of taking on the whole room!$</string>
						<string>^\w+ stops holding \]An Old Duffle Bag\[\.$</string>
						<string>^\w+ holds .* in (?:his|her) hand\.$</string>
						<string>^\w+ stops using .* as a portal.$</string>
						<string>^\w+ equips .* as a portal\.$</string>
						<string>^\w+ removes Aardwolf Ring of Invisibility from (?:his|her) left finger\.$</string>
						<string>^\w+ wears Aardwolf Ring of Invisibility on (?:his|her) left finger\.$</string>
						<string>^\w+ stops wielding .* in (?:his|her) off-hand\.$</string>
						<string>^\w+ wields .* in (?:his|her) off-hand\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>quest</name>
					<script>aard.qtime = 0
aard.qTimeNOexp()
selectCurrentLine()
copy()
appendBuffer("Private")
appendBuffer("All")
appendBuffer("Group")
aard.audioAlert("Quest")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^QUEST: You may now quest again.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Epics</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>pheal</name>
						<script>--party heal cast counter
--add a way to track my own pheals, possibly with a keybinding or something that adds to the values when casting it
if gmcp.group then
	if aard.group[matches[2]] then
		aard.group[matches[2]].pheal = aard.group[matches[2]].pheal + 1
	end
	if gmcp.group.count then
    if gmcp.group.count &gt; 4 then
    	deleteLine()
    end
	end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) chants the phrase 'party heal'\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>gag</name>
						<script>--spamreduce groupexp
if gmcp.group then
	if gmcp.group.count then
    if gmcp.group.count &gt; 1 then
    	deleteLine()
    end
	end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You are already fully healed\.$</string>
							<string>^You are already fully refreshed\.$</string>
							<string>^You are now fully healed\.$</string>
							<string>^You feel fully refreshed\!$</string>
							<string>^\w+ is already fully healed\.$</string>
							<string>^\w+ is already fully refreshed\.$</string>
							<string>^\w+ is now fully healed\.$</string>
							<string>^\w+ now feels fully refreshed\.$</string>
							<string>^\w+ heals (?:him|her)self\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>damage</name>
						<script>local crit = matches[2]
local attacker = matches[3]
local attack = matches[4]
local target = matches[5]
local damage = matches[6]
local holyreprisal = matches[7]
--track by cumulative since group join/create
--but also track since last experience message
aard.group = aard.group or {}
local v = ""
if string.sub(attacker, -2) == "'s" then
	v = attacker:sub(1, -3)
elseif string.sub(attacker, -2) == "s'" then
	v = attacker:sub(1, -2)
else
	v = gmcp.char.base.name
end

if gmcp.group then
  if aard.group[v] then
  	aard.group[v].alldam = tonumber(aard.group[v].alldam) + tonumber(damage)
  		
  	if aard.group[v][attack] then
  		aard.group[v][attack] = tonumber(aard.group[v][attack]) + tonumber(damage)
  	else
  		aard.group[v][attack] = tonumber(damage)
  	end
  end
  
  if gmcp.group.count then
    if gmcp.group.count &gt; 4 then
  		if aard.group[attacker:sub(1, -3)] or aard.group[attacker:sub(1, -2)] then
    		deleteLine()
			elseif string.find(attacker, "'") and target ~= "You" then
				deleteLine()
  		end
    end
  end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^((?:\*|))((?:.*\'s?|Your)) (.*) (?:misses|tickles|bruises|scratches|grazes|nicks|scars|hits|injures|wounds|mauls|maims|mangles|mars|LACERATES|DECIMATES|DEVASTATES|ERADICATES|OBLITERATES|EXTIRPATES|INCINERATES|MUTILATES|DISEMBOWELS|MASSACRES|DISMEMBERS|RENDS|\- BLASTS \-|\-\= DEMOLISHES \=\-|\*\* SHREDS \*\*|\*\*\*\* DESTROYS \*\*\*\*|\*\*\*\*\* PULVERIZES \*\*\*\*\*|\-\=\- VAPORIZES \-\=\-|\&lt;\-\=\=\-\&gt; ATOMIZES \&lt;\-\=\=\-\&gt;|\&lt;\-\:\-\&gt; ASPHYXIATES \&lt;\-\:\-\&gt;|\&lt;\-\*\-\&gt; RAVAGES \&lt;\-\*\-\&gt;|\&lt;\&gt;\*\&lt;\&gt; FISSURES \&lt;\&gt;\*\&lt;\&gt;|\&lt;\*\&gt;\&lt;\*\&gt; LIQUIDATES \&lt;\*\&gt;\&lt;\*\&gt;|\&lt;\*\&gt;\&lt;\*\&gt;\&lt;\*\&gt; EVAPORATES \&lt;\*\&gt;\&lt;\*\&gt;\&lt;\*\&gt;|\&lt;\-\=\-\&gt; SUNDERS \&lt;\-\=\-\&gt;|\&lt;\=\-\=\&gt;\&lt;\=\-\=\&gt; TEARS INTO \&lt;\=\-\=\&gt;\&lt;\=\-\=\&gt;|\&lt;\-\&gt;\*\&lt;\=\&gt; WASTES \&lt;\=\&gt;\*\&lt;\-\&gt;|\&lt;\-\+\-\&gt;\&lt;\-\*\-\&gt; CREMATES \&lt;\-\*\-\&gt;\&lt;\-\+\-\&gt;|\&lt;\*\&gt;\&lt;\*\&gt;\&lt;\*\&gt;\&lt;\*\&gt; ANNIHILATES \&lt;\*\&gt;\&lt;\*\&gt;\&lt;\*\&gt;\&lt;\*\&gt;|\&lt;\-\-\*\-\-\&gt;\&lt;\-\-\*\-\-\&gt; IMPLODES \&lt;\-\-\*\-\-\&gt;\&lt;\-\-\*\-\-\&gt;|\&lt;\-\&gt;\&lt;\-\=\-\&gt;\&lt;\-\&gt; EXTERMINATES \&lt;\-\&gt;\&lt;\-\=\-\&gt;\&lt;\-\&gt;|\&lt;\-\=\=\-\&gt;\&lt;\-\=\=\-\&gt; SHATTERS \&lt;\-\=\=\-\&gt;\&lt;\-\=\=\-\&gt;|\&lt;\*\&gt;\&lt;\-\:\-\&gt;\&lt;\*\&gt; SLAUGHTERS \&lt;\*\&gt;\&lt;\-\:\-\&gt;\&lt;\*\&gt;|\&lt;\-\*\-\&gt;\&lt;\-\&gt;\&lt;\-\*\-\&gt; RUPTURES \&lt;\-\*\-\&gt;\&lt;\-\&gt;\&lt;\-\*\-\&gt;|\&lt;\-\*\-\&gt;\&lt;\*\&gt;\&lt;\-\*\-\&gt; NUKES \&lt;\-\*\-\&gt;\&lt;\*\&gt;\&lt;\-\*\-\&gt;|\-\&lt;\[\=\-\+\-\=\]\&lt;\:\:\:\&lt;\&gt;\:\:\:\&gt; GLACIATES \&lt;\:\:\:\&lt;\&gt;\:\:\:\&gt;\[\=\-\+\-\=\]\&gt;\-|\&lt;\-\=\-\&gt;\&lt;\-\:\-\*\-\:\-\&gt;\&lt;\*\-\-\*\&gt; METEORITES \&lt;\*\-\-\*\&gt;\&lt;\-\:\-\*\-\:\-\&gt;\&lt;\-\=\-\&gt;|\&lt;\-\:\-\&gt;\&lt;\-\:\-\*\-\:\-\&gt;\&lt;\-\*\-\&gt; SUPERNOVAS \&lt;\-\*\-\&gt;\&lt;\-\:\-\*\-\:\-\&gt;\&lt;\-\:\-\&gt;|does UNSPEAKABLE things to|does UNTHINKABLE things to|does UNIMAGINABLE things to|does UNBELIEVABLE things to) (.*)(?:\.|\!) \[(\d+)\]((?:\*|))$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>map quest cp gq</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="yes" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>wheretarget</name>
					<script>--echo("\nFired\n")
--display(matches[4])
aard.qTarget = matches[2]..matches[3]
aard.qRoom = matches[4]:trim()
--echo("\ntarget: "..aard.qTarget)
--echo("\nroom: "..aard.qRoom)
if getRoomArea(aard.map.seen_room) then
  aard.qArea = getRoomAreaName(getRoomArea(aard.map.seen_room))
  --echoRoomListArea(aard.qArea)
  echoRoomListArea(getRoomArea(gmcp.room.info.num))
end
disableTrigger("wheretarget")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^([a-zA-Z0-9_,'"-&amp;]+)( [a-zA-Z0-9_,'"-&amp;]+)* [ ]+([ a-zA-Z0-9_,'"-&amp;]+)*$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="yes" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>where</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>30</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Players near you\:$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>wherecap</name>
						<script>--echo("\nFired\n")
--display(matches[4])
aard.qTarget = matches[2]..matches[3]
aard.qRoom = matches[4]:trim()
--echo("\ntarget: "..aard.qTarget)
--echo("\nroom: "..aard.qRoom)
if getRoomArea(aard.map.seen_room) then
  aard.qArea = getRoomAreaName(getRoomArea(aard.map.seen_room))
  --echoRoomListArea(aard.qArea)
  echoRoomListArea(getRoomArea(gmcp.room.info.num))
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^([a-zA-Z0-9_,'"-&amp;]+)( [a-zA-Z0-9_,'"-&amp;]+)* [ ]+([ a-zA-Z0-9_,'"-&amp;]+)*$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>endwhere</name>
						<script>if string.find(matches[2], "  ") or string.find(matches[2], "near") then
  --do nothing
else
	setTriggerStayOpen("where",0)
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(.*)$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>qtarget scan highlight</name>
					<script>--display(matches[2])
local aq = {
["A lovebird"]="[AQ] - bird song (RARE), [AQ] - a blade of grass",
["A spider"]="[AQ] - a spider web",
}

if aard.qTarget then
	if string.lower(aard.qTarget) == string.lower(matches[2]) then
		hecho(" |c990000[TARGET]??")
	end
elseif aq[matches[2]] then
	hecho(" |c990000"..aq[matches[2]])
elseif aard.cTarget then
  for i, name in pairs(aard.cTarget) do
    if string.lower(name) == string.lower(matches[2]) then
    	hecho(" |c990000[TARGET]??")
    end
  end
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^     - \(.*?\) (.*)$</string>
						<string>^     - (.*)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>cp level</name>
					<script>--toggle noexp back off
--in scripts section look at "config" cplvl and set to 0 to disable noexp cp toggle
if matches[2] then
	aard.cpLevel = tonumber(matches[2])
else
	aard.cpLevel = tonumber(gmcp.char.status.level)
end
if aard.noexp == " *NO EXP*" and tonumber(gmcp.char.status.level) &lt;= aard.cpLevel and tonumber(gmcp.char.status.level) &lt;= aard.config["cplvl"] then
  aard.noexp = ""
  aard.qTimeNOexp()
	send("noexp")--turn noexp back on
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>.* tells you 'Good luck in your campaign!'$</string>
						<string>^Level Taken........: \[  (?:| |  ) (\d+) \]$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>cp check</name>
					<script>selectString( "You still have to kill ", 1 )
replace("")
if not aard.cpLevel then
	aard.cpLevel = aard.cpLevel or 0
	send("cp info",false)
end
aard.qTarget = matches[2]
if aard.areaInfo[matches[3]] then
	--local areaID = findAreaID(aard.areaInfo[matches[3]].zone)
	local areaID = lookupAreaID(aard.areaInfo[matches[3]].zone)	
	local areaExits = getAreaExits(areaID)
	-- check area exits and figure out which room has the shortest path cost, its likely the entrance.
	if not areaExits[1] then--must be noexit/portal entrance	
		--check all path costs and choose the lowest cost
    local roomlist = getAreaRooms(areaID)  
    -- obtain a room list for each of the room IDs we got
		lowestcost = 9000
		tryroom = 0
    for _, id in pairs(roomlist) do
			local pathable,cost = getPath(aard.map.current_room,id)
			if pathable == true and cost &lt; lowestcost then
				lowestcost = cost
				tryroom = id
			end
    end
  	echo(" ")
  	hechoLink("|cFF0000-"..tryroom, [[gotoRoom(]]..tryroom..[[)]], "runto "..tryroom, true)				
		
	elseif not areaExits[2] then--only one possible room
		echo(" ")
		--display(areaExits[1])
		hechoLink("|cFF0000"..areaExits[1], [[gotoRoom(]]..areaExits[1]..[[)]], "runto "..matches[3], true)
	else--multiple exits

		lowestcost = 9000
		tryroom = 0		
    for _, id in pairs(areaExits) do
			local pathable,cost = getPath(aard.map.current_room,id)
			if pathable == true and cost &lt; lowestcost then
				lowestcost = cost
				tryroom = id
			end
    end		
  	echo(" ")
  	hechoLink("|cFF0000"..tryroom, [[gotoRoom(]]..tryroom..[[)]], "runto "..tryroom, true)
		
	end
else
	--aard.roomFind(matches[3])--must be a room cp
	echoRoomList(matches[3])
	--echoRoomListArea(aard.qAreaID)
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You still have to kill \* (.*) \((.*?)\)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>qArea</name>
					<script>aard.qArea = matches[2]
if aard.areaInfo[aard.qArea] then
	echoRoomListAreaSearch(aard.areaInfo[aard.qArea].zone)
else
	echo("\nArea Not found.")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(?:The Statue of Calliope|A Grumpy Old General|Questor) tells you 'of (.*)\.'$</string>
						<string>^is in the general area of (.*)\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>qRoom</name>
					<script>aard.qRoom = matches[2]</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(?:The Statue of Calliope|A Grumpy Old General|Questor) tells you 'of (.*) which is in the general area'$</string>
						<string>.* can be found in the vicinity of (.*) which$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>qTarget</name>
					<script>aard.qTarget = matches[2]</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(?:The Statue of Calliope|A Grumpy Old General|Questor) tells you 'Seek (.*) out somewhere in the vicinity'$</string>
						<string>^You are on a quest to slay (.*)\!$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>itemDB</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>item</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>50</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>+-----------------------------------------------------------------+</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="yes" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>name</name>
						<script>aard.ansi = {"@w","@D","@D","@R","@r","@G","@g","@Y","@y","@B","@b","@M","@m","@C","@c","@W","@w"}
aard.xterm = {
["128-0-0"]="@r",
["0-128-0"]="@g",
["128-128-0"]="@y",
["0-0-128"]="@b",
["128-0-128"]="@m",
["0-128-128"]="@c",
["192-192-192"]="@w",
["128-128-128"]="@D",
["255-0-0"]="@R",
["0-255-0"]="@G",
["255-255-0"]="@Y",
["0-0-255"]="@B",
["255-0-255"]="@M",
["0-255-255"]="@C",
["255-255-255"]="@W",
["0-0-153"]="@x017",
["0-0-153"]="@x018",
["0-0-153"]="@x019",
["0-0-204"]="@x020",
["0-51-0"]="@x022",
["0-51-51"]="@x023",
["0-51-102"]="@x024",
["0-51-153"]="@x025",
["0-51-204"]="@x026",
["0-51-255"]="@x027",
["0-102-0"]="@x028",
["0-102-51"]="@x029",
["0-102-102"]="@x030",
["0-102-153"]="@x031",
["0-102-204"]="@x032",
["0-102-255"]="@x033",
["0-153-0"]="@x034",
["0-153-51"]="@x035",
["0-153-102"]="@x036",
["0-153-153"]="@x037",
["0-153-204"]="@x038",
["0-153-255"]="@x039",
["0-204-0"]="@x040",
["0-204-51"]="@x041",
["0-204-102"]="@x042",
["0-204-153"]="@x043",
["0-204-204"]="@x044",
["0-204-255"]="@x045",
["0-255-51"]="@x047",
["0-255-102"]="@x048",
["0-255-153"]="@x049",
["0-255-204"]="@x050",
["102-0-51"]="@x052",
["102-0-51"]="@x053",
["51-0-102"]="@x054",
["51-0-153"]="@x055",
["51-0-204"]="@x056",
["51-0-255"]="@x057",
["51-51-0"]="@x058",
["51-51-51"]="@x059",
["51-51-102"]="@x060",
["51-51-153"]="@x061",
["51-51-204"]="@x062",
["51-51-255"]="@x063",
["51-102-0"]="@x064",
["51-102-51"]="@x065",
["51-102-102"]="@x066",
["51-102-153"]="@x067",
["51-102-204"]="@x068",
["51-102-255"]="@x069",
["51-153-0"]="@x070",
["51-153-51"]="@x071",
["51-153-102"]="@x072",
["51-153-153"]="@x073",
["51-153-204"]="@x074",
["51-153-255"]="@x075",
["51-204-0"]="@x076",
["51-204-51"]="@x077",
["51-204-102"]="@x078",
["51-204-153"]="@x079",
["51-204-204"]="@x080",
["51-204-255"]="@x081",
["51-255-0"]="@x082",
["51-255-51"]="@x083",
["51-255-102"]="@x084",
["51-255-153"]="@x085",
["51-255-204"]="@x086",
["51-255-255"]="@x087",
["102-0-0"]="@x088",
["102-0-51"]="@x089",
["102-0-102"]="@x090",
["102-0-153"]="@x091",
["102-0-204"]="@x092",
["102-0-255"]="@x093",
["102-51-0"]="@x094",
["102-51-51"]="@x095",
["102-51-102"]="@x096",
["102-51-153"]="@x097",
["102-51-204"]="@x098",
["102-51-255"]="@x099",
["102-102-0"]="@x100",
["102-102-51"]="@x101",
["102-102-102"]="@x102",
["102-102-153"]="@x103",
["102-102-204"]="@x104",
["102-102-255"]="@x105",
["102-153-0"]="@x106",
["102-153-51"]="@x107",
["102-153-102"]="@x108",
["102-153-153"]="@x109",
["102-153-204"]="@x110",
["102-153-255"]="@x111",
["102-204-0"]="@x112",
["102-204-51"]="@x113",
["102-204-102"]="@x114",
["102-204-153"]="@x115",
["102-204-204"]="@x116",
["102-204-255"]="@x117",
["102-255-0"]="@x118",
["102-255-51"]="@x119",
["102-255-102"]="@x120",
["102-255-153"]="@x121",
["102-255-204"]="@x122",
["102-255-255"]="@x123",
["153-0-0"]="@x124",
["153-0-51"]="@x125",
["153-0-102"]="@x126",
["153-0-153"]="@x127",
["153-0-204"]="@x128",
["153-0-255"]="@x129",
["153-51-0"]="@x130",
["153-51-51"]="@x131",
["153-51-102"]="@x132",
["153-51-153"]="@x133",
["153-51-204"]="@x134",
["153-51-255"]="@x135",
["153-102-0"]="@x136",
["153-102-51"]="@x137",
["153-102-102"]="@x138",
["153-102-153"]="@x139",
["153-102-204"]="@x140",
["153-102-255"]="@x141",
["153-153-0"]="@x142",
["153-153-51"]="@x143",
["153-153-102"]="@x144",
["153-153-153"]="@x145",
["153-153-204"]="@x146",
["153-153-255"]="@x147",
["153-204-0"]="@x148",
["153-204-51"]="@x149",
["153-204-102"]="@x150",
["153-204-153"]="@x151",
["153-204-204"]="@x152",
["153-204-255"]="@x153",
["153-255-0"]="@x154",
["153-255-51"]="@x155",
["153-255-102"]="@x156",
["153-255-153"]="@x157",
["153-255-204"]="@x158",
["153-255-255"]="@x159",
["204-0-0"]="@x160",
["204-0-51"]="@x161",
["204-0-102"]="@x162",
["204-0-153"]="@x163",
["204-0-204"]="@x164",
["204-0-255"]="@x165",
["204-51-0"]="@x166",
["204-51-51"]="@x167",
["204-51-102"]="@x168",
["204-51-153"]="@x169",
["204-51-204"]="@x170",
["204-51-255"]="@x171",
["204-102-0"]="@x172",
["204-102-51"]="@x173",
["204-102-102"]="@x174",
["204-102-153"]="@x175",
["204-102-204"]="@x176",
["204-102-255"]="@x177",
["204-153-0"]="@x178",
["204-153-51"]="@x179",
["204-153-102"]="@x180",
["204-153-153"]="@x181",
["204-153-204"]="@x182",
["204-153-255"]="@x183",
["204-204-0"]="@x184",
["204-204-51"]="@x185",
["204-204-102"]="@x186",
["204-204-153"]="@x187",
["204-204-204"]="@x188",
["204-204-255"]="@x189",
["204-255-0"]="@x190",
["204-255-51"]="@x191",
["204-255-102"]="@x192",
["204-255-153"]="@x193",
["204-255-204"]="@x194",
["204-255-255"]="@x195",
["255-0-51"]="@x197",
["255-0-102"]="@x198",
["255-0-153"]="@x199",
["255-0-204"]="@x200",
["255-51-0"]="@x202",
["255-51-51"]="@x203",
["255-51-102"]="@x204",
["255-51-153"]="@x205",
["255-51-204"]="@x206",
["255-51-255"]="@x207",
["255-102-0"]="@x208",
["255-102-51"]="@x209",
["255-102-102"]="@x210",
["255-102-153"]="@x211",
["255-102-204"]="@x212",
["255-102-255"]="@x213",
["255-153-0"]="@x214",
["255-153-51"]="@x215",
["255-153-102"]="@x216",
["255-153-153"]="@x217",
["255-153-204"]="@x218",
["255-153-255"]="@x219",
["255-204-0"]="@x220",
["255-204-51"]="@x221",
["255-204-102"]="@x222",
["255-204-153"]="@x223",
["255-204-204"]="@x224",
["255-204-255"]="@x225",
["255-255-51"]="@x227",
["255-255-102"]="@x228",
["255-255-153"]="@x229",
["255-255-204"]="@x230",
["67-67-67"]="@x232",
["67-67-67"]="@x233",
["67-67-67"]="@x234",
["67-67-67"]="@x235",
["67-67-67"]="@x236",
["67-67-67"]="@x237",
["67-67-67"]="@x238",
["78-78-78"]="@x239",
["89-89-89"]="@x240",
["100-100-100"]="@x241",
["111-111-111"]="@x242",
["122-122-122"]="@x243",
["133-133-133"]="@x244",
["144-144-144"]="@x245",
["155-155-155"]="@x246",
["166-166-166"]="@x247",
["177-177-177"]="@x248",
["188-188-188"]="@x249",
["200-200-200"]="@x250",
["211-211-211"]="@x251",
["222-222-222"]="@x252",
["233-233-233"]="@x253",
["244-244-244"]="@x254",
}
aard.itemflags = ""--new item clear previously stored flags
local v = matches[2]:trim()
echo("\nName:"..v)
posX = selectString(matches[2]:trim(),1)
replaced = ""
bgr=""
for h = posX,posX+v:len()-1,1 do
	selectSection(h,h)
	local r,g,b = getFgColor()
	if bgr ~= aard.xterm[r.."-"..g.."-"..b] then
		bgr = aard.xterm[r.."-"..g.."-"..b]
		--echo("\n"..r.."-"..g.."-"..b.."       "..string.sub(v,h-posX+1,h-posX+1))
		replaced = replaced .. bgr .. string.sub(v,h-posX+1,h-posX+1)
	else
		replaced = replaced .. string.sub(v,h-posX+1,h-posX+1)
	end
end
echo("\n"..replaced.."@w\n")
--send("spouse "..replaced.."@w")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\| Name       : (.*)\|$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="yes" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>stats</name>
						<script>aard.itemIgnore = {
["Name"]="have a seperate trigger for names",
["Keywords"]="keywords are often not unique enough, item ids work better, dont store this data",
["Score"]="This score is assigned by compare set and is variable depending on class, dont store this data",
["Owned By"]="This score is assigned by compare set and is variable depending on class, dont store this data",
["Holding"]="temporary value, dont store this data",
["Items Inside"]="temporary value, dont store this data",
["Tot Weight"]="temporary value, dont store this data",
["Item Burden"]="temporary value, dont store this data",
["Uses Left"]="temporary value, dont store this data",
["Duration"]="most useful lights should be permanent?? dont think this should be stored",
["Market Item Number"]="temporary value, dont store this data",
["Item is being sold by"]="temporary value, dont store this data",
["Auction will end in"]="temporary value, dont store this data",
}

if not aard.itemIgnore[matches[2]] then
  local a1 = matches[2]
  local v1 = matches[3]
  echo("\n"..a1..":"..v1)
  
  if matches[5] then
    local a2 = matches[5]
    local v2 = matches[6]
    echo("\n"..a2..":"..v2)
  end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>(?:\| Stat Mods  \:|\| Resist Mods\:|\| Skill Mods \: Modifies|\| Spells     \: \d+ (?:use|uses) of level|\|            \: \d+ (?:use|uses) of level|\|| ) ([a-zA-Z0-9]+(?: [a-zA-Z]+)*)[ ]*(?:\: \+|\: |by \+| ')[ ]*([a-zA-Z0-9,+-&gt;]+(?: [a-zA-Z]+)*)[']*  </string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="yes" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>flags</name>
						<script>aard.itemflags = aard.itemflags..string.gsub(matches[2]:trim()," ","")
echo("\nFlags:"..aard.itemflags)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\| (?:Flags      |           )\: ([ a-zA-Z0-9,-]+)\|</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="yes" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>furnitureHeal</name>
						<script>--Did not combine this in the stats trigger because the Heal rate for mana is labeled "Magic"
--the string "Magic" is also used for resists.
local v1 = matches[2]
local v2 = matches[3]
echo("\nhealhp:"..v1)
echo("\nhealmn:"..v2)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>\| Heal Rate  \: Health \[(\d+)\]    Magic \[(\d+)\]            (?:| |  |   |    )            \|</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="yes" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>weightpercent</name>
						<script>local v = matches[2]:trim()
echo("\nWeight%:"..v)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\|            \: Items inside weigh (.*)% of their usual weight[ ]*  \|$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>endCapture</name>
						<script>if matches[2] =="+-----------------------------------------------------------------+" or string.find(matches[2], "\|") then
  --do nothing
else
	--echo("\nFIRED")
	setTriggerStayOpen("item",0)
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(.*)$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
			</TriggerGroup>
		</TriggerGroup>
	</TriggerPackage>
	<TimerPackage />
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>aard</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>gui</name>
				<script>--type gui to reload your the gui.
guiLoad()</script>
				<command></command>
				<packageName></packageName>
				<regex>^gui$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>vconfig</name>
				<script>--(?:\| Stat Mods  \:|\| Resist Mods\:|\| Skill Mods \: Modifies|\| Spells     \: \d+ (?:use|uses) of level|\|            \:
-- \d+ (?:use|uses) of level|\|| ) ([a-zA-Z0-9]+(?: [a-zA-Z]+)*)[ ]*(?:\: \+|\: |by \+| ')[ ]*([a-zA-Z0-9,+-&gt;]+(?: [a-zA-Z]+)*)[']*  

--aard.config["hpot"]="elixir",
--aard.config["mpot"]="moonlight",
--aard.config["vpot"]="refreshing",
--aard.config["pbag"]="bag",
--aard.config["port"]="hold duff;enter;hold flute",
--aard.config["attack1"]="hammer",
--aard.config["debuff1"]="marbu",
--aard.config["debuff2"]="dirt",
--aard.config["cplvl"]=150,
--aard.config["cpexp"]=700,
--aard.config["group"]=1,
--aard.config["tdiff"]=-3,
--aard.config["speak"]="false",

--display(matches[2])
--display(matches[3])

if matches[2] and matches[3] then
	if aard.config[matches[2]] ~= nil then
		local arg = string.gsub(matches[3],"|",";")
		--if matches[3] has space then surround with single quotes
		aard.config[matches[2]] = arg
		if gmcp.char.base.name then
			table.save(getMudletHomeDir().."/aardwolf/config-"..gmcp.char.base.name..".lua", aard.config)
		end
	else
		echo("\n"..matches[2].." is Not a valid option.\n")
	end
elseif matches[2] then
	echo("\nNo Argument Provided for option.\n")
end
--lua display(getFgColor())
decho("&lt;51,102,255&gt;-vconfig- &lt;192,192,192&gt; seperate multiple commands with &lt;51,102,255&gt;|&lt;192,192,192&gt; instead of &lt;51,102,255&gt;;")
echo("\n\n")

decho("  &lt;51,102,255&gt;- &lt;192,192,192&gt;Recall Portal: ") setFgColor(51,102,255)
echoLink(aard.config["port"], "printCmdLine'vconfig port "..string.gsub(aard.config["port"],";","|").."'", "Click to set the Recall Portal to use.", true)
echo("\n")

decho("  &lt;51,102,255&gt;- &lt;192,192,192&gt;Wielded Weapon: ") setFgColor(51,102,255)
echoLink(aard.config["wield"], "printCmdLine'vconfig wield '", "Click to set the Wielded Weapon to use.", true)

decho("  &lt;51,102,255&gt;- &lt;192,192,192&gt;Dual Weapon: ") setFgColor(51,102,255)
echoLink(aard.config["dual"], "printCmdLine'vconfig dual '", "Click to set the Dualwielded Weapon to use.", true)
echo("\n")

decho("  &lt;51,102,255&gt;- &lt;192,192,192&gt;Health Potion: ") setFgColor(51,102,255)
echoLink(aard.config["hpot"], "printCmdLine'vconfig hpot '", "Click to set the Health Potion to use.", true)

decho("  &lt;51,102,255&gt;- &lt;192,192,192&gt;Mana Potion: ") setFgColor(51,102,255)
echoLink(aard.config["mpot"], "printCmdLine'vconfig mpot '", "Click to set the Mana Potion to use.", true)
echo("\n")

decho("  &lt;51,102,255&gt;- &lt;192,192,192&gt;Moves Potion: ") setFgColor(51,102,255)
echoLink(aard.config["vpot"], "printCmdLine'vconfig vpot '", "Click to set the Moves Potion to use.", true)

decho("  &lt;51,102,255&gt;- &lt;192,192,192&gt;Potion Container: ") setFgColor(51,102,255)
echoLink(aard.config["pbag"], "printCmdLine'vconfig pbag '", "Click to set the Potion Container to use.", true)
echo("\n")

decho("  &lt;51,102,255&gt;- &lt;192,192,192&gt;Primary Attack: ") setFgColor(51,102,255)
echoLink(aard.config["attack1"], "printCmdLine'vconfig attack1 '", "Click to set the Primary Attack to use.", true)

decho("  &lt;51,102,255&gt;- &lt;192,192,192&gt;Primary Debuff: ") setFgColor(51,102,255)
echoLink(aard.config["debuff1"], "printCmdLine'vconfig debuff1 '", "Click to set the Primary Debuff to use.", true)

decho("  &lt;51,102,255&gt;- &lt;192,192,192&gt;2nd Debuff: ") setFgColor(51,102,255)
echoLink(aard.config["debuff2"], "printCmdLine'vconfig debuff2 '", "Click to set the 2nd Debuff to use.", true)
echo("\n")

decho("  &lt;51,102,255&gt;- &lt;192,192,192&gt;CP Level Until: ") setFgColor(51,102,255)
echoLink(aard.config["cplvl"], "printCmdLine'vconfig cplvl '", "Click to set the level to CP Level until.", true)

decho("  &lt;51,102,255&gt;- &lt;192,192,192&gt;CP Level noexp limit: ") setFgColor(51,102,255)
echoLink(aard.config["cpexp"], "printCmdLine'vconfig cpexp '", "Click to set the CP Level noexp toggle amount.", true)
echo("\n")

decho("  &lt;51,102,255&gt;- &lt;192,192,192&gt;Group Frame Format: ") setFgColor(51,102,255)
echoLink(aard.config["group"], "printCmdLine'vconfig group '", "Click to set the Group Frame Format until.", true)

decho("  &lt;51,102,255&gt;- &lt;192,192,192&gt;Mud Time Difference: ") setFgColor(51,102,255)
echoLink(aard.config["tdiff"], "printCmdLine'vconfig tdiff '", "Click to set the Time Difference from Mud Time.", true)
echo("\n")

decho("  &lt;51,102,255&gt;- &lt;192,192,192&gt;Speak alerts instead of sounds: ") setFgColor(51,102,255)
echoLink(aard.config["speak"], "printCmdLine'vconfig speak '", "Click to override audio alerts with speech.", true)
echo("\n")

setFgColor(192,192,192)
echo("\n")</script>
				<command></command>
				<packageName></packageName>
				<regex>^(?:vc|vco|vcon|vconf|vconfi|vconfig)(?: (\w+) (.*))*$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>PlayerNotes</name>
				<script>if matches[2] and matches[3] then
	aard.playerdb[matches[2]] = matches[3]
	table.save(getMudletHomeDir().."/aardwolf/config-playerdb.lua", aard.playerdb)
elseif matches[2] then
	echo("\nNote to add for this player was missing, please include note to add.\n")
end

decho("&lt;51,102,255&gt;-playernote- &lt;192,192,192&gt; playernote &lt;player&gt; &lt;note&gt;")
echo("\n\n")

decho("  &lt;51,102,255&gt;- &lt;192,192,192&gt;"..matches[2]..": ")
dechoLink("&lt;51,102,255&gt;"..aard.playerdb[matches[2]], "printCmdLine'playernote "..matches[2].." "..aard.playerdb[matches[2]].."'", "Click to edit Note for this Player.", true)
echo("\n\n")</script>
				<command></command>
				<packageName></packageName>
				<regex>^playernote(?: (\w+) (.*))*$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>guisave</name>
				<script>--type guisave to save your UI positioning.
GUIframe.saveSettings()</script>
				<command></command>
				<packageName></packageName>
				<regex>^guisave$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>startermap</name>
				<script>mapStarter()--call the mapStarter function which makes a backup, and if backup successfull loads the starter map.</script>
				<command></command>
				<packageName></packageName>
				<regex>^startermap$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>loadmap</name>
				<script>local saveString = getMudletHomeDir().."/aardwolf/mapBackup_"..getTime(true,"yyyy.MM.ddThh.mm.ss.zzz")..".dat"
local savedok = saveMap(saveString)

if not savedok then
  echo("Couldn't save map :(\n")
	return 0--bail out, old map didnt save.
else
  echo("Map saved to: "..saveString.."\n")
	loadMap(getMudletHomeDir().."/aardwolf/"..matches[2])
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^loadmap (.*)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>savemap</name>
				<script>--example:  savemap mapStarter
local savedok = saveMap(getMudletHomeDir().."/aardwolf/"..matches[2]..".dat")
if not savedok then
  echo("Couldn't save map :(\n")
else
  echo("Map saved to: "..getMudletHomeDir().."/aardwolf/"..matches[2]..".dat\n")
end

--lua display(getMapUserData("last_modified"))
--lua display(getAllMapUserData())</script>
				<command></command>
				<packageName></packageName>
				<regex>^savemap (.*)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>enter portal</name>
				<script>if matches[2] then
	display(matches[2])
  setRoomChar(gmcp.room.info.num, "&gt;")
  aard.other = true
  send("enter "..matches[2],false)
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^enter (.*)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>where</name>
				<script>if matches[2] then
	enableTrigger("wheretarget")
  send("where "..matches[2],false)
else--argument/target missing
	send("where",false)
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^(?:where|wher|whe) (.*)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>rf room find</name>
				<script>aard.roomFind(matches[2])
--aard.roomFind(tostring(room_id))
--aard.roomFindArea</script>
				<command></command>
				<packageName></packageName>
				<regex>^rf (.*)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>rfa room find current area</name>
				<script>aard.roomFindArea(matches[2])
--aard.roomFind(tostring(room_id))
--aard.roomFindArea</script>
				<command></command>
				<packageName></packageName>
				<regex>^rfa (.*)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>runto rt</name>
				<script>if string.match("sendhian", matches[2]:lower()) then
	send("run 2s10e2n7e7n11e4n4e;enter hole")--vidblain
	tempTimer(1,[[aard.coordrun(20286)]])
elseif string.match("light", matches[2]:lower()) then
	send("runto light",false)--light clanhall
elseif string.match("darklight", matches[2]:lower()) then
	send("run 2s10e2n7e7n11e4n4e;enter hole")--vidblain
	tempTimer(1,[[aard.coordrun(19643)]])
elseif string.match("imperial nation", matches[2]:lower()) then
	send("run 2s10e2n7e7n11e4n4e;enter hole")--vidblain
	tempTimer(1,[[aard.coordrun(16966)]])
elseif string.match("the witches of omen tor omentor", matches[2]:lower()) then
	send("run 2s10e2n7e7n11e4n4e;enter hole")--vidblain
	tempTimer(1,[[aard.coordrun(15578)]])
elseif string.match("inferno", matches[2]:lower()) then
	send("run 2s8w47s22w10sw;enter crystal;run 10esd")
elseif string.match("the partroxis", matches[2]:lower()) then
	gotoRoom(5861)--partroxis
else
	send("runto "..matches[2],false)
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^(?:runto|runt|rt) (.*)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>vidblain</name>
				<script>--run 2s10e2n7e7n11e4n4e;enter hole
if string.match("sendhian", matches[2]) then
	tempTimer(1,[[aard.coordrun(20286)]])
elseif string.match("darklight", matches[2]) then
	tempTimer(1,[[aard.coordrun(19643)]])
elseif string.match("imperial nation", matches[2]) then
	tempTimer(1,[[aard.coordrun(16966)]])
else
	echo("gt no vidblain match for: "..matches[2])
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^vidblain (.*)$</regex>
			</Alias>
		</AliasGroup>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>aard</name>
			<packageName></packageName>
			<script>uninstallPackage("generic_mapper")

aard = aard or {}
aard.gui = aard.gui or {}
aard.map = aard.map or {}
aard.log = aard.log or {}
aard.command = nil
aard.other = false
aard.newzone = false
aard.state = aard.state or 0
aard.tnl = aard.tnl or 0
aard.qtime = aard.qtime or 0
aard.dtime = aard.dtime or 0
aard.timerQuest = aard.timerQuest or 0
aard.timerDaily = aard.timerDaily or 0
aard.tnlmax = aard.tnlmax or 1000
aard.noexp = aard.noexp or ""
aard.name = aard.name or ""
aard.gindex = aard.gindex or 0
aard.ename = aard.ename or ""
aard.epct = aard.epct or 0
aard.hp = aard.hp or 100
aard.mp = aard.mp or 100
aard.mv = aard.mv or 100
aard.maxhp = aard.maxhp or 100
aard.maxmp = aard.maxmp or 100
aard.maxmv = aard.maxmv or 100
aard.hpot = aard.hpot or 0
aard.spot = aard.spot or 0
aard.mpot = aard.mpot or 0

function aard.log:debug(msg)
  if aard.log.enableDebug then
    cecho("&lt;dark_slate_grey&gt;[&lt;white&gt;::&lt;dark_orchid&gt;(debug):&lt;light_grey&gt; "..msg.." &lt;white&gt;::&lt;dark_slate_grey&gt;]\n")
  end
end

function aard.log:info(msg)
  cecho("&lt;dark_slate_grey&gt;[&lt;white&gt;::&lt;light_slate_grey&gt;(info):&lt;light_grey&gt; "..msg.." &lt;white&gt;::&lt;dark_slate_grey&gt;]\n")
end

function aard.log:error(msg)
  cecho("&lt;dark_slate_grey&gt;[&lt;white&gt;::&lt;firebrick&gt;(error):&lt;light_grey&gt; "..msg.." &lt;white&gt;::&lt;dark_slate_grey&gt;]\n")
end

function aard.audioAlert(event)
  if aard.config["speak"] == "true" then
    if GUIframe.speech[event] == nil then
      aard.log:error("Undefined speech audio alert: " .. event)
      return
    end
  
    ttsSpeak(GUIframe.speech[event])
    return
  end
  
  if GUIframe.sounds[event] == nil then
    aard.log:error("Undefined audio alert: " .. event)
    return
  end
  
  playSoundFile(GUIframe.sounds[event])
end

function round(n)
  return math.floor(n + 0.5)
end</script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>onSysDataSendRequest</name>
				<packageName></packageName>
				<script>function onSysDataSendRequest(event, args)
  aard.command = args
end</script>
				<eventHandlerList>
					<string>sysDataSendRequest</string>
				</eventHandlerList>
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>CSSMan</name>
				<packageName></packageName>
				<script>-- CSSMan by Vadi. Public domain.

CSSMan = {}
CSSMan.__index = CSSMan

function CSSMan.new(stylesheet)
  local obj  = { stylesheet = {} }
  setmetatable(obj,CSSMan)
  local trim = string.trim

  assert(type(stylesheet) == "string", "CSSMan.new: no stylesheet provided. A possible error is that you might have used CSSMan.new, not CSSMan:new")

  for line in stylesheet:gmatch("[^\r\n]+") do
    local attribute, value = line:match("^(.-):(.-);$")
    if attribute and value then
      attribute, value = trim(attribute), trim(value)
      obj.stylesheet[attribute] = value
    end
  end

  return obj
end

function CSSMan:set(key, value)
  self.stylesheet[key] = value
end

function CSSMan:get(key)
  return self.stylesheet[key]
end

function CSSMan:getCSS(key)
  local lines, concat = {}, table.concat
  for k,v in pairs(self.stylesheet) do lines[#lines+1] = concat({k,": ", v, ";"}) end
  return concat(lines, "\n")
end

function CSSMan:gettable()
  return self.stylesheet
end

function CSSMan:settable(tbl)
  assert(type(tbl) == "table", "CSSMan:settable: table expected, got "..type(tbl))

  self.stylesheet = tbl
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>TableKeyDelete</name>
				<packageName></packageName>
				<script>-- Remove key k (and its value) from table t. Return a new (modified) table.
function table.removeKey(t, k)
	local i = 0
	local keys, values = {},{}
	for k,v in pairs(t) do
		i = i + 1
		keys[i] = k
		values[i] = v
	end

	while i&gt;0 do
		if keys[i] == k then
			table.remove(keys, i)
			table.remove(values, i)
			break
		end
		i = i - 1
	end

	local a = {}
	for i = 1,#keys do
		a[keys[i]] = values[i]
	end

	return a
end

--local t = {name="swfoo", domain="swfoo.com"}
--t = table.removeKey(t, "domain")</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>config</name>
				<packageName></packageName>
				<script>-----------------------
-- User Config - BACKUP settings here to notepad prior to upgrading to new version.
-----------------------
aard.configDefault = {
["hpot"]="elixir",
["mpot"]="moonlight",
["vpot"]="refreshing",
["pbag"]="bag",
["wield"]="dagger",
["dual"]="dagger",
["port"]="hold duff;enter;hold flute",
["attack1"]="hammer",
["debuff1"]="marbu",
["debuff2"]="dirt",
["cplvl"]=150,
["cpexp"]=700,
["group"]=1,
["tdiff"]=-3,
["speak"]="false", -- Stringly typed because of user input in vconfig
}

--Automatically toggle noexp once your TNL is less than this amount on CP level +1
--This is to get in 1 CP every level, without mistakenly leveling +2 levels during a CP.
--The default is assumed CP leveling
--aard.cplvl = 150--set to 0 to disable
--aard.cpexp = 700

--group window format group: 0=normal, 1=compact, 2=compact minimal

--Aardwolf is based on Eastern Time (ET), so to adjust set this to a positive or negative number to correct for local time.
--My local time is Pacific Time (PT) so I use -3

--gauge bar colors
aard.hpc1="#1aa41a"
aard.hpc2="#005500"

aard.mnc1="#4570fc"
aard.mnc2="#1133cc"

aard.mvc1="#b0b051"
aard.mvc2="#555511"

aard.tnlc1="#a343cd"
aard.tnlc2="#4c006e"

aard.goodc1="#d98839"
aard.goodc2="#814100"
aard.neutralc1="#888"
aard.neutralc2="#444"
aard.evilc1="#8c2929"
aard.evilc2="#410000"

aard.enemyc1="#f04141"
aard.enemyc2="#cc0000"

aard.menuHeight = 25
aard.subWidth = 200

-- Set to true to enable the GUI functionality
aard.gui.enable = true--currently unused

-- Set to true to enable the mapping script
aard.map.enable = true

-- Turn on debug output. very spammy.
aard.log.enableDebug = false

--scrollbar StyleSheet
function styleLoad()
  local grey = "#31363b"
  local blue = "#2478c8"
	local black = "#000000"
  setAppStyleSheet([[
    QScrollBar:vertical {
       background: ]]..black..[[;
       margin: 9px 0 9px 0;
  		 border-radius: 7px;
    }
    QScrollBar:vertical:hover {
       background: ]]..grey..[[;
    }
    QScrollBar::handle:vertical {
       background-color: ]]..grey..[[;
       min-height: 20px;
       border-width: 4px;
       border-style: solid;
       border-color: ]]..black..[[;
       border-radius: 7px;
    }
    QScrollBar::handle:vertical:hover {
       background-color: ]]..blue..[[;
       border-width: 1px;
    }
    QScrollBar::add-line:vertical {
      background-color: #000000;
      height: 1px;
      subcontrol-position: bottom;
      subcontrol-origin: margin;
    }
    QScrollBar::sub-line:vertical {
      background-color: #000000;
      height: 1px;
      subcontrol-position: top;
      subcontrol-origin: margin;
    }
    QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical {
      background: none;
    }
    QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
      background: none;
    }
  ]])
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>guiFrame</name>
				<packageName></packageName>
				<script>-- Jor'Mox's GUIframe Script
-- 1/16/2019
-- v1.4.1

-- To resize frames or move tabs, right click and drag either the resize label or the tab
-- until the desired result is achieved.

-- To add a window to a frame for the script to manage, use the
-- GUIframe.addWindow(window, name, container, hideText) function, where the window
-- variable contains the Geyser object you want to add, the name variable contains
-- the name you want it to be referred to as, which also is used as the text printed
-- on the associated tab that is created, the container variable is a string containing
-- one of the following: bottom, top, topleft, topright, bottomleft, bottomright,
-- and the hideText variable is an optional boolean which, if true, prevents text being
-- written on the tab for this window.

-- To remove a window from GUIframe, use the GUIframe.removeWindow(name, container)
-- function, where the name variable is the same name you gave the window when adding it,
-- and the optional container variable is a string specifying which container to remove
-- the window from. If no container is specified, the window is removed regardless of
-- which container it is in.

-- Resizing of frames can be enabled or disabled using the GUIframe.enable(side) and
-- GUIframe.disable(side, hide) functions respectively. If the second argument to
-- GUIframe.disable is false, then the entire set of frames on that side is hidden, and
-- the border is adjusted as if that side had be resized to zero.

-- To save and load settings, use the GUIframe.saveSettings() and
-- GUIframe.loadSettings(redraw) functions. If the redraw argument is true, the border
-- background color is changed to black to force the area of the borders to be redrawn.
-- Additionally, the GUIframe.reinitialize() function can be used to force the script to
-- initialize itself again, going back to default settings.

-- To activate a tab without it being clicked, use the GUIframe.activate(name) function.
-- And to apply a stylesheet to a tab that is different from the default stylesheet, use
-- the GUIframe.styleTab(name, style) function, where the style variable contains a string
-- with the CSS to be applied. Since tabs are styled only when created or when this
-- function is used, there should be no concern with this styling being overwritten.

GUIframe = GUIframe or {}

local mainW, mainH = getMainWindowSize()
local halfW, halfH = math.floor(mainW/2), math.floor(mainH/2)

GUIframe.configs = GUIframe.configs or {}

GUIframe.defaults = {
    tabHeight = 20,
    tabStyle = [[
        background-color: "#31363b";
        border-width: 1px;
        border-style: outset;
        border-color: grey;
        margin-right: 0px;
        margin-left: 0px;
        qproperty-alignment: 'AlignCenter | AlignCenter';]],
    tabEchoStyle = '&lt;center&gt;&lt;p style="font-size:13px; color:white"&gt;',
		tabEchoStyleFlash = '&lt;center&gt;&lt;p style="font-size:14px; color:#2478c8"&gt;&lt;b&gt;',
    leftStartWidth = 50,
    leftStartHeight = halfH,
    rightStartWidth = 400,
    rightStartHeight = halfH,
    topStartHeight = 50,
    bottomStartHeight = 50,
    resizeHeight = 30,
    resizeWidth = 30,
    resizeHoverImage = "/aardwolf/blue_arrows.png",
    resizeRestImage = "/aardwolf/blue_arrows_30t.png",
    borderOffset = 5,
}

GUIframe.windows = GUIframe.windows or {}
GUIframe.tabs = GUIframe.tabs or {}
GUIframe.tabCoords = GUIframe.tabCoords or {}
GUIframe.sides = GUIframe.sides or {left = 'enabled', right = 'enabled', top = 'enabled', bottom = 'enabled'}

--added for tab blink
GUIframe.configs.tabsToBlink = GUIframe.configs.tabsToBlink or {}
GUIframe.configs.chatTabs = GUIframe.configs.chatTabs or {}--list of chat tabs.
GUIframe.configs.blink = 1--enables blink feature
GUIframe.configs.blinkTime = 2--seconds between blinks
GUIframe.configs.Alltab = "All"--this should be the tab name that has a copy of ALL chat messages, not just a single channel.
--below style is to paint active chat tab blue
GUIframe.configs.activeStyle = [[
        background-color: "#2478c8";
        border-width: 1px;
        border-style: outset;
        border-color: grey;
        margin-right: 0px;
        margin-left: 0px;
        qproperty-alignment: 'AlignCenter | AlignCenter';]]

--store the last active tab because Drag and Drop stores it per container/region which is difficult to reference without looping/checking all regions.
GUIframe.configs.activeLast = GUIframe.configs.activeLast or ""
GUIframe.configs.flashing = true
GUIframe.configs.chatTabs["All"] = true
GUIframe.configs.chatTabs["Private"] = true
GUIframe.configs.chatTabs["Group"] = true
GUIframe.configs.chatTabs["Tell"] = true
GUIframe.configs.chatTabs["Say"] = true
GUIframe.configs.chatTabs["Spouse"] = true
GUIframe.configs.chatTabs["Clan"] = true
GUIframe.configs.chatTabs["Friend"] = true
GUIframe.configs.styleFlash = GUIframe.configs.styleFlash or ""

function GUIframe.blink()
  if GUIframe.configs.blinkID then killTimer(GUIframe.configs.blinkID) end
  if not GUIframe.configs.blink then 
    GUIframe.configs.blinkTimerOn = false
    return 
  end
  --if not GUIframe.tabs[tab].hidden then
		if GUIframe.configs.flashing == true then
			GUIframe.configs.styleFlash = GUIframe.defaults.tabEchoStyleFlash
			GUIframe.configs.flashing = false
		else
			GUIframe.configs.styleFlash = GUIframe.defaults.tabEchoStyle
			GUIframe.configs.flashing = true
		end
    for tab,_ in pairs(GUIframe.configs.tabsToBlink) do
			--GUIframe.tabs[tab]:flash()
			GUIframe.tabs[tab]:echo(GUIframe.configs.styleFlash..tab)
    end
  --end
  GUIframe.configs.blinkID = tempTimer(GUIframe.configs.blinkTime, function () GUIframe.blink() end)
end

--start the blink timers, if enabled
if GUIframe.configs.blink and not GUIframe.configs.blinkTimerOn then
		GUIframe.blink()
end
--end added for tab blink

local resize_style = "border-image: url(%s%s);"

local configs = table.update(GUIframe.defaults, GUIframe.configs)
local tabsInfo, containerInfo, resizeInfo

local container_names = {'topLeftContainer', 'bottomLeftContainer', 'topRightContainer',
    'bottomRightContainer', 'bottomContainer', 'topContainer'}
local tab_names = {'topLeftTabs', 'topRightTabs', 'bottomLeftTabs', 'bottomRightTabs'}
local resizeLabels = {'resizeLeft', 'resizeRight', 'resizeTop', 'resizeBottom'}
local sides = {"top","bottom","left","right"}
local side_containers = {
    left = {"topLeftContainer","bottomLeftContainer","topLeftTabs","bottomLeftTabs"},
    right = {"topRightContainer","bottomRightContainer","topRightTabs","bottomRightTabs"},
    top = {"topContainer"},
    bottom = {"bottomContainer"}
}

local function get_window_coords(win, update) -- gets coords for window, stores data in tabCoords table as needed
    local x, y = win:get_x(), win:get_y()
    local w, h = win:get_width(), win:get_height()
    if update then
        GUIframe.tabCoords[win.name]  = {x = x, y = y, w = w, h = h}
    end
    return x, y, w, h
end

local function check_overlap(tab, x, y) -- checks to see if given coords overlap tab or tab container
    if type(tab) == "string" then tab = GUIframe[tab] or GUIframe.tabs[tab] end
    if tab.hidden or tab.auto_hidden then return false end
    local info = GUIframe.tabCoords[tab.name]
    local x1, y1 = info.x, info.y
    local x2, y2 = x1 + info.w, y1 + info.h
    return (x &gt;= x1 and x &lt;= x2 and y &gt;= y1 and y &lt;= y2)
end

local function update_tab(tab, x, y, w, h) -- resizes and moves tab and updates tab coords table
    tab:move(x, y)
    tab:resize(w,h)
    local info = GUIframe.tabCoords[tab.name] or {}
    info.x, info.y = tab:get_x(), tab:get_y()
    info.w, info.h = tab:get_width(), tab:get_height()
    if table.contains(tab_names, tab.name) then
        info.container = true
    end
    GUIframe.tabCoords[tab.name] = info
end

local function get_containers(pos)
    if type(pos) == "table" then pos = pos.name end
    for _,w in ipairs({'right','left','container','tabs'}) do
        pos = pos:gsub(w,w:title())
    end
    local con, tab
    if string.find(pos,"Container") then
        con = GUIframe[pos]
        if not con then return end
        tabs = con.tabs
    elseif string.find(pos,"Tabs") then
        tabs = GUIframe[pos]
        if not tab then return end
        con = tabs.con
    else
        con = GUIframe[pos.."Container"]
        tabs = GUIframe[pos.."Tabs"]
    end
    return con, tabs
end

local function config()
    configs = table.update(GUIframe.defaults, GUIframe.configs)
    GUIframe.windows = {}
    GUIframe.tabCoords = {}

    tabsInfo = {
        topLeftTabs = {name = 'topLeftTabs', x = 0, y = 0, width = configs.leftStartWidth,
            height = configs.tabHeight},
        bottomLeftTabs = {name = 'bottomLeftTabs', x = 0, y = configs.leftStartHeight,
            width = configs.leftStartWidth, height = configs.tabHeight},
        topRightTabs = {name = 'topRightTabs', x = mainW - configs.rightStartWidth, y = 0,
            width = configs.rightStartWidth, height = configs.tabHeight},
        bottomRightTabs = {name = 'bottomRightTabs', x = mainW - configs.rightStartWidth,
            y = configs.rightStartHeight, width = configs.rightStartWidth, height = configs.tabHeight},
    }
    containerInfo = {
        topLeftContainer = {name = 'topLeftContainer', x = 0, y = configs.tabHeight,
            width = configs.leftStartWidth, height = configs.leftStartHeight - configs.tabHeight},
        bottomLeftContainer = {name = 'bottomLeftContainer', x = 0, y = configs.leftStartHeight + configs.tabHeight,
            width = configs.leftStartWidth, height = configs.leftStartHeight - configs.tabHeight},
        topRightContainer = {name = 'topRightContainer', x = mainW - configs.rightStartWidth,
            y = configs.tabHeight, width = configs.rightStartWidth,
            height = configs.rightStartHeight - configs.tabHeight},
        bottomRightContainer = {name = 'bottomRightContainer', x = mainW - configs.rightStartWidth,
            y = configs.rightStartHeight + configs.tabHeight, width = configs.rightStartWidth,
            height = configs.rightStartHeight - configs.tabHeight},
        bottomContainer = {name = 'bottomContainer', x = configs.leftStartWidth,
            y = mainH - configs.bottomStartHeight, height = configs.bottomStartHeight,
            width = mainW - configs.leftStartWidth - configs.rightStartWidth},
        topContainer = {name = 'topContainer', x = configs.leftStartWidth, y = 0, height = configs.topStartHeight,
            width = mainW - configs.leftStartWidth - configs.rightStartWidth}
    }
    resizeInfo = {
        resizeLeft = {name = 'resizeLeft', x = configs.leftStartWidth,
            y = configs.leftStartHeight - configs.resizeHeight / 2, height = configs.resizeHeight,
            width = configs.resizeWidth},
        resizeRight = {name = 'resizeRight', x = configs.rightStartWidth - configs.resizeWidth,
            y = configs.rightStartHeight - configs.resizeHeight / 2, height = configs.resizeHeight,
            width = configs.resizeWidth},
        resizeTop = {name = 'resizeTop', x = halfW - configs.resizeWidth / 2,
            y = configs.topStartHeight, height = configs.resizeHeight, width = configs.resizeWidth},
        resizeBottom = {name = 'resizeBottom', x = halfW - configs.resizeWidth / 2,
            y = mainH - configs.bottomStartHeight - configs.resizeHeight, height = configs.resizeHeight,
            width = configs.resizeWidth}
    }

    for name, cons in pairs(containerInfo) do
        GUIframe[name] = Geyser.Container:new(cons)
    end
    for name, cons in pairs(tabsInfo) do
        GUIframe[name] = Geyser.Container:new(cons)
        local cname = name:gsub("Tabs","Container")
        GUIframe[cname].tabs = GUIframe[name]
        GUIframe[name].con = GUIframe[cname]
    end
    local style = resize_style
    local path = getMudletHomeDir()
    path = path:gsub("[\\/]","/")
    configs.resizeRestImage = configs.resizeRestImage:gsub("[\\/]","/")
    configs.resizeHoverImage = configs.resizeHoverImage:gsub("[\\/]","/")
    local no_image
    if not (io.exists(path .. configs.resizeHoverImage) and io.exists(path .. configs.resizeRestImage)) then
        debugc("GUIframe: config: resize image(s) not found")
        path = "255,20,147,"
        style = "background-color: rgba(%s%s);"
        no_image = true
    end

    for name, cons in pairs(resizeInfo) do
        GUIframe[name] = Geyser.Label:new(cons)
        GUIframe[name]:setColor(0,0,0,0)
        GUIframe[name]:setStyleSheet(string.format(style, path, (no_image and "100") or configs.resizeRestImage))
        GUIframe[name]:setOnEnter("GUIframe."..name..".setStyleSheet", GUIframe[name],
            string.format(style, path, (no_image and "255") or configs.resizeHoverImage))
        GUIframe[name]:setOnLeave("GUIframe."..name..".setStyleSheet", GUIframe[name],
            string.format(style, path, (no_image and "100") or configs.resizeRestImage))
        GUIframe[name]:setClickCallback("GUIframe.buttonClick", name)
        GUIframe[name]:setReleaseCallback("GUIframe.buttonRelease", name)
        GUIframe[name]:setMoveCallback("GUIframe.buttonMove", name)
    end
    setBorderLeft(configs.leftStartWidth + configs.borderOffset)
    setBorderRight(configs.rightStartWidth + configs.borderOffset)
    setBorderTop(configs.topStartHeight + configs.borderOffset)
    setBorderBottom(configs.bottomStartHeight + configs.borderOffset)
    GUIframe.initialized = true
end

local function deselectContainer(container, tabs)
    -- hide all windows in container
    for _, win in pairs(container.windowList) do
        win:hide()
        win.active = false
    end
    -- unhighlight all tabs in tabs container
    if tabs then
        for _, tab in pairs(tabs.windowList) do
            local name = tab.name:gsub("Tab","")
            local show = GUIframe.windows[name].showText
            if show then
                tab:echo(configs.tabEchoStyle..name)
								GUIframe.styleTab(name, GUIframe.defaults.tabStyle)
            end
	    end
	end
end

local function adjustTabs(tabs)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    -- remove duplicated window names
    local found = {}
    for k,v in ipairs(tabs.windows) do
        if not table.contains(found,v) and tabs.windowList[v] and not tabs.windowList[v].isClicked then
            table.insert(found,v)
        end
    end
    -- calculate tab width and set height
    local w, h = math.floor(100 / #tabs.windows), configs.tabHeight
    local function wrap(num) return tostring(num) .. "%" end
    -- resize and reposition all tabs
    local shown, first
    for k,v in ipairs(found) do
        local tab = tabs.windowList[v]
        if not first then first = v:gsub("Tab","") end
        if not shown and tab.active then
            shown = v
        elseif tab.active then
            tab.active = false
        end
        update_tab(tab, wrap(w * (k-1)), 0, wrap(w), h)
    end
    if first and not shown and GUIframe.windows[first] then GUIframe.windows[first]:show() end
    tabs.space_pos = nil
end

local function reorderTabs(tabs, name, pos)
    local windows = tabs.windows
    while table.contains(windows, name) do
        table.remove(windows, table.index_of(windows, name))
    end
    table.insert(windows, pos, name)
end

local function makeSpace(tabs, tab, pos)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    local windows = table.deepcopy(tabs.windows)
    local space_pos = tabs.space_pos
    local tab_pos = table.index_of(windows, tab.name)
    -- calculate tab width and set height
    local num_tabs = #windows + 1
    if tab_pos then
        num_tabs = num_tabs - 1
        if pos &gt; tab_pos then pos = pos - 1 end
        if pos == space_pos then pos = pos + 1 end
    elseif space_pos and pos &gt;= space_pos then
        pos = pos + 1
    end
    local w, h = math.floor(100 / num_tabs), configs.tabHeight
    local function wrap(num) return tostring(num) .. "%" end
    -- resize and reposition all tabs
    if tab_pos then table.remove(windows,tab_pos) end
    for k,v in ipairs(windows) do
        if k &gt;= pos then
            update_tab(tabs.windowList[v], wrap(w * k), 0, wrap(w), h)
        else
            update_tab(tabs.windowList[v], wrap(w * (k-1)), 0, wrap(w), h)
        end
    end
    tabs.space_pos = pos
end

local function round(num,roundTo)
	local b, r = math.modf(num/roundTo)
	if r &gt;= 0.5 then
		b = b + 1
	end
	return b * roundTo
end

local function setBorder(side, val)
    local funcs = {left = setBorderLeft, right = setBorderRight, top = setBorderTop, bottom = setBorderBottom}
    val = math.max(val,0)
	funcs[side](val)
end

local function resizeContainers(side, w, h)
    if table.contains({"left", "right"}, side) then
        local info = {
            left = {resize = "resizeLeft", cons = {"topLeftContainer","bottomLeftContainer"},
                tabs = {"topLeftTabs","bottomLeftTabs"}, x = 0, w = w},
            right = {resize = "resizeRight", cons = {"topRightContainer","bottomRightContainer"},
                tabs = {"topRightTabs","bottomRightTabs"}, x = w, w = mainW - w}
        }
        info = info[side]
        -- move and resize top, bottom and tab containers
        update_tab(GUIframe[info.tabs[1]], info.x, 0, info.w, configs.tabHeight)
        update_tab(GUIframe[info.tabs[2]], info.x, h, info.w, configs.tabHeight)
        GUIframe[info.cons[1]]:resize(info.w, h - configs.tabHeight)
        GUIframe[info.cons[1]]:move(info.x, configs.tabHeight)
        GUIframe[info.cons[2]]:resize(info.w, mainH - h - configs.tabHeight)
        GUIframe[info.cons[2]]:move(info.x, h + configs.tabHeight)
        -- adjust border size
        setBorder(side, info.w + configs.borderOffset)

        -- adjust width of top and bottom containers
        local x, y
        x = (GUIframe.sides.left ~= "hidden" and GUIframe.topLeftContainer:get_width()) or 0
        w = ((GUIframe.sides.right ~= "hidden" and GUIframe.topRightContainer:get_x()) or mainW) - x
        for _, con in ipairs({GUIframe.topContainer, GUIframe.bottomContainer}) do
            y, h = con:get_y(), con:get_height()
            con:resize(w, h)
            con:move(x, y)
        end
    elseif table.contains({"top", "bottom"}, side) then
        local x = 0
        w = mainW
        if GUIframe.sides.left ~= "hidden" then
            w = w - GUIframe.topLeftContainer:get_width()
            x = GUIframe.topLeftContainer:get_width()
        end
        if GUIframe.sides.right ~= "hidden" then w = w - GUIframe.topRightContainer:get_width() end
        local info = {top = {con = "topContainer", y = 0, h = h}, bottom = {con = "bottomContainer", y = h, h = mainH - h}}
        local con = GUIframe[info[side].con]
        con:resize(w, info[side].h)
        con:move(x, info[side].y)
        setBorder(side, info[side].h + configs.borderOffset)
    end
		minimapsnap()--Snap minimap to side of Mapper
end

local function refresh()
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    mainW, mainH = getMainWindowSize()
    local rH, rW = configs.resizeHeight, configs.resizeWidth
    local x, y, w
    -- adjust bottom left and right container heights
    for _, C in ipairs({GUIframe.bottomLeftContainer, GUIframe.bottomRightContainer}) do
        C:resize(C:get_width(), mainH - C:get_y())
    end
    -- reposition right containers
    w = GUIframe.topRightContainer:get_width()
    for _, C in ipairs({GUIframe.topRightContainer, GUIframe.topRightTabs,
        GUIframe.bottomRightContainer, GUIframe.bottomRightTabs}) do
        C:move(mainW - w,C:get_y())
    end
    -- resize and reposition bottom and top containers
    w, x = mainW, 0
    if GUIframe.sides.left ~= "hidden" then
        w = w - GUIframe.topLeftContainer:get_width()
        x = GUIframe.topLeftContainer:get_width()
    end
    if GUIframe.sides.right ~= "hidden" then w = w - GUIframe.topRightContainer:get_width() end
    for _, C in ipairs({GUIframe.topContainer, GUIframe.bottomContainer}) do
        C:resize(w, C:get_height())
        C:move(x, C.name == "topContainer" and 0 or mainH - C:get_height())
    end
    -- reposition resize labels
    x, y = GUIframe.topLeftContainer:get_width(), GUIframe.bottomLeftTabs:get_y()
    GUIframe.resizeLeft:move(x, y - rH / 2)
    x, y = GUIframe.topRightContainer:get_x(), GUIframe.bottomRightTabs:get_y()
    GUIframe.resizeRight:move(x - rW, y - rH / 2)
    x = (GUIframe.topContainer:get_width() - rW) / 2
    if GUIframe.sides.left ~= "hidden" then x = x + GUIframe.topLeftContainer:get_width() end
    y = GUIframe.topContainer:get_height()
    GUIframe.resizeTop:move(x, y)
    y = GUIframe.bottomContainer:get_y()
    GUIframe.resizeBottom:move(x, y - rH)
end
	
-- enables the resize label for the given side and shows all associated containers if hidden
function GUIframe.enable(side)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    if not table.contains(sides,side) then error("GUIframe.enable: invalid side",2) end
    local cons = side_containers[side]
    for _, con in ipairs(cons) do
        GUIframe[con]:show()
        for _,win in pairs(GUIframe[con].windowList) do -- loop can be removed after Geyser fix comes in
            if win.active then win:show() end
        end
    end
    if table.contains({"left","right"}, side) then
        setBorder(side, GUIframe[cons[1]]:get_width() + configs.borderOffset)
    else
        setBorder(side, GUIframe[cons[1]]:get_height() + configs.borderOffset)
    end
    GUIframe["resize"..side:title()]:show()
    GUIframe.sides[side] = "enabled"
    refresh()
end

-- disables and hides the resize label for the given side, and hides all associated containers if indicated
function GUIframe.disable(side, hide)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    if not table.contains(sides,side) then error("GUIframe.disable: invalid side",2) end
    local cons = side_containers[side]
    GUIframe.sides[side] = "disabled"
    if hide then
        for _, con in ipairs(cons) do
            GUIframe[con]:hide()
            for _, win in pairs(GUIframe[con].windowList) do -- loop can be removed after Geyser fix comes in
                if win.type == "mapper" then win:hide() end
            end
        end
        local border = _G["setBorder"..side:title()]
        border(0)
        GUIframe.sides[side] = "hidden"
    end
    GUIframe["resize"..side:title()]:hide()
    refresh()
end

-- adds a Geyser window or container to the given container, with a tab showing the given name if applicable
function GUIframe.addWindow(window, name, container, hideText)
    if not GUIframe.initialized then config() end
    if type(container) == "table" then container = container.name end
    local con, tabs = get_containers(container)
    if not con then error("GUIframe.addWindow: invalid container name",2) end
    if not name then error("GUIframe.addWindow: name argument required",2) end
    -- remove window from any containers
    for _, tcon in ipairs(container_names) do
        if table.contains(GUIframe[tcon].windows, window.name) then
            GUIframe.removeWindow(name, tcon)
        end
    end
    deselectContainer(con,tabs)
    -- add tab for window, if applicable
    if tabs then
        local showText = not hideText
        window.showText = showText
        local lbl = Geyser.Label:new({name = name.."Tab", x = 0, y = 0, width = 10, height = 10},tabs)
        lbl:setStyleSheet(configs.tabStyle)
        if showText then
            lbl:echo(configs.tabEchoStyle.."&lt;b&gt;"..name)
        end
        lbl:setClickCallback("GUIframe.buttonClick", name)
        lbl:setReleaseCallback("GUIframe.buttonRelease", name)
        lbl:setMoveCallback("GUIframe.buttonMove", name)
        GUIframe.tabs[name] = lbl
        adjustTabs(tabs)
    end
    -- add window to container and set size and position
    con:add(window)
    window:resize("100%","100%")
    window:move(0,0)
    window:show()
    GUIframe.windows[name] = window
	raiseEvent("sysWindowResizeEvent")
end

-- removes a named Geyser window or container from the named container (using name given in GUIframe.addWindow)
function GUIframe.removeWindow(name, container)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    if not container then container = GUIframe.windows[name].container end
    local con, tabs = get_containers(container)

    if not con or not table.contains(container_names, con.name) then
        error("GUIframe.removeWindow: invalid container name",2)
    end
    if not name then error("GUIframe.removeWindow: name argument required",2) end
    if tabs then
        local lbl = tabs.windowList[name.."Tab"]
        if lbl then
            tabs:remove(lbl)
            adjustTabs(tabs)
            lbl:hide()
        end
    end
    local window = GUIframe.windows[name]
    con:remove(window)
    window:hide()
end

-- saves the current GUI setup, including the size of the different containers and what windows go in which container
function GUIframe.saveSettings()
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    local saveTbl = {}
    local w, h = GUIframe.topLeftContainer:get_width(), GUIframe.bottomLeftTabs:get_y()
    saveTbl.left = {w = w, h = h}
    w, h = GUIframe.topRightContainer:get_width(), GUIframe.bottomRightTabs:get_y()
    saveTbl.right = {w = w, h = h}
    w, h = GUIframe.topContainer:get_width(), GUIframe.topContainer:get_height()
    saveTbl.top = {w = w, h = h}
    w, h = GUIframe.bottomContainer:get_width(), GUIframe.bottomContainer:get_height()
    saveTbl.bottom = {w = w, h = h}

    -- get added windows and containers they are assigned to
    local windows = {}
    local text = {}
    for k,v in pairs(GUIframe.windows) do
        local con = v.container.name
        windows[con] = windows[con] or {}
        table.insert(windows[con], k)
        text[con] = text[con] or {}
        text[con][k] = v.showText
    end
    -- reorder windows to match tab order for tabbed containers
    for con, wins in pairs(windows) do
        if con:find("Left") or con:find("Right") then
            local tabs = GUIframe[con].tabs.windows
            local new = {}
            for k,v in ipairs(tabs) do
                local wname = v:gsub("Tab","")
                table.insert(new, {wname, text[con][wname]})
            end
            windows[con] = new
        end
    end
    saveTbl.windows = windows
    saveTbl.sides = GUIframe.sides
    table.save(getMudletHomeDir() .. "/GUIframeSave.lua", saveTbl)
		echo("\nSettings Saved.\n")
end

-- loads GUI setup from a previous save
function GUIframe.loadSettings(redraw)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
    local saveTbl = {}
    local path = getMudletHomeDir() .. "/GUIframeSave.lua"
    path = path:gsub("\\","/")
    mainW, mainH = getMainWindowSize()
    if not io.exists(path) then debugc("GUIframe.loadSettings: save file doesn't exist.") return end
    table.load(path, saveTbl)
    resizeContainers("left", saveTbl.left.w, saveTbl.left.h)
    resizeContainers("right", mainW - saveTbl.right.w, saveTbl.right.h)
    resizeContainers("top", saveTbl.top.w, saveTbl.top.h)
    resizeContainers("bottom", saveTbl.bottom.w, mainH - saveTbl.bottom.h)
    for con, wins in pairs(saveTbl.windows) do
        for _,name in ipairs(wins) do
            if type(name) == "string" then
                GUIframe.addWindow(GUIframe.windows[name], name, con)
            else
                local n, s = name[1], not name[2]
                GUIframe.addWindow(GUIframe.windows[n], n, con, s)
            end
        end
    end

    for side, state in pairs(saveTbl.sides) do
        if state == "enabled" then
            GUIframe.enable(side)
        elseif state == "disabled" then
            GUiframe.disable(side,false)
        elseif state == "hidden" then
            GUIframe.disable(side,true)
        end
    end
    -- force redraw of screen
    if redraw then
        setBackgroundColor(1,1,1)
        setBackgroundColor(0,0,0)
    end
end

-- can be called to force the script to run its config function again
function GUIframe.reinitialize()
    config()
end

-- can be called to activate a given tab without clicking on it
function GUIframe.activate(name)
    if not GUIframe.initialized then error("GUIframe not initialized",1) end
	local window = GUIframe.windows[name]
	if window then
        local con, tabs = get_containers(window.container.name)
        -- hide and unhighlight other windows and tabs
        deselectContainer(con, tabs)
        -- show selected window
        window:show()
        window.active = true
				if GUIframe.configs.chatTabs[name] then
					GUIframe.configs.activeLast = name--added for tab blink
				end
        -- highlight selected tab
        if window.showText then
            GUIframe.tabs[name]:echo(configs.tabEchoStyle.."&lt;b&gt;"..name)
						if GUIframe.configs.chatTabs[name] then--make sure its defined as one of our chat tabs.
							GUIframe.styleTab(name, GUIframe.configs.activeStyle)--apply blue style for active tab.
						end
        end
    end
end

-- can be called to apply a style to a given tab
function GUIframe.styleTab(name, style)
    if not GUIframe.initialized then error("GUIframe not initialized",1) end
	local tab = GUIframe.tabs[name]
	if tab then
	    tab:setStyleSheet(style)
    end
end

-- internally used function to handle button click callbacks
function GUIframe.buttonClick(name, event)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
	if table.contains(resizeLabels,name) then
	    if event.button == "RightButton" then
	        local lbl = GUIframe[name]
	        lbl.difX, lbl.difY = event.x, event.y
	        lbl.savedX, lbl.savedY = getMousePosition()
            GUIframe[name].isClicked = true
        end
	elseif event.button == "LeftButton" then
        local window = GUIframe.windows[name]
        local con, tabs = get_containers(window.container.name)
        -- hide and unhighlight other windows and tabs
        deselectContainer(con, tabs)
        -- show selected window
        window:show()
        window.active = true
				if GUIframe.configs.chatTabs[name] then
					GUIframe.configs.activeLast = name--added for tab blink
				end
        -- highlight selected tab
        if window.showText then
            GUIframe.tabs[name]:echo(configs.tabEchoStyle.."&lt;b&gt;"..name)
						if GUIframe.configs.chatTabs[name] then--make sure its defined as one of our chat tabs.
							GUIframe.styleTab(name, GUIframe.configs.activeStyle)--apply blue style for active tab.
						end
        end
				--added for tab blink
        if GUIframe.configs.blink and GUIframe.configs.tabsToBlink[name] then--blink is enabled and we selected a blinking tab
          GUIframe.configs.tabsToBlink[name] = nil--the tab is now visible so we can quit blinking it
        end
				--we selected the ALL/Private tab, so we dont need to blink any tabs.
        if GUIframe.configs.blink and name == GUIframe.configs.Alltab or GUIframe.configs.blink and name == "Private" then
          GUIframe.configs.tabsToBlink = {}--clear any tabs set to be blinked
        end
				--end added for tab blink
    elseif event.button == "RightButton" then
        local window, tab = GUIframe.windows[name], GUIframe.tabs[name]
        tab.savedX, tab.savedY = getMousePosition()
        tab.difX, tab.difY, tab.isClicked = event.x, event.y, true
        -- force update of coords for all tabs and tab containers
        GUIframe.tabCoords = {}
        for _, name in ipairs(tab_names) do
            get_window_coords(GUIframe[name], true)
            for tname, tab in pairs(GUIframe[name].windowList) do
                get_window_coords(tab, true)
            end
        end
    end
    raiseEvent("GUIframe.buttonClick",name,event)
end

-- internally used function to handle button release callbacks
function GUIframe.buttonRelease(name, event)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
	if table.contains(resizeLabels,name) then
	    if event.button == "RightButton"  then
            local lbl = GUIframe[name]
            lbl.savedX, lbl.savedY, lbl.difX, lbl.difY, lbl.isClicked = nil, nil, nil, nil, false
        end
	elseif event.button == "RightButton" then
	    local window, tab = GUIframe.windows[name], GUIframe.tabs[name]
	    local con, tabs = get_containers(window.container.name)
	    tab.difX, tab.difY, tab.savedX, tab.savedY, tab.isClicked = nil, nil, nil, nil, false
	    hideWindow("show_container")
	    for _, tname in ipairs(tab_names) do
	        local info = GUIframe[tname]
	        if info.mouse_over then
	            local pos = info.space_pos
	            info.mouse_over = nil
							GUIframe.addWindow(window, name, tname:gsub("Tabs",""), not window.showText)
	            if pos then
    	            reorderTabs(info, tab.name, pos)
    	            adjustTabs(info)
    	        end
	        end
	    end
	    adjustTabs(tabs)
	end
	raiseEvent("GUIframe.buttonRelease",name,event)
end

-- internally used function to handle button move callbacks
function GUIframe.buttonMove(name, event)
    if not GUIframe.initialized then error("GUIframe not initialized",2) end
	if table.contains(resizeLabels,name) then
	    lbl = GUIframe[name]
	    if lbl.isClicked then
	        local w, h = getMousePosition()
	        w, h = round(w - lbl.difX, 10), round(h - lbl.difY, 10)
            mainW, mainH = getMainWindowSize()
            local side, cW, cH, rX, rY
            local minX = GUIframe.sides.left ~= "hidden" and GUIframe.topLeftContainer:get_width() or 0
            local maxX = GUIframe.sides.right ~= "hidden" and GUIframe.topRightContainer:get_x() or mainW
            local minY = GUIframe.sides.top ~= "hidden" and GUIframe.topContainer:get_height() or 0
            local maxY = GUIframe.sides.left ~= "hidden" and GUIframe.bottomContainer:get_y() or mainH
            local mid, min, max = GUIframe.topContainer:get_width(), math.min, math.max
            local tabH, rH, rW = configs.tabHeight, configs.resizeHeight, configs.resizeWidth
	        w, h = max(w, 0), max(h, 0)
            local info = { -- specify position of resize labels and size of containers
                resizeLeft = {side = "left", x = min(w, maxX - rW),
                    y = min(max(h + rH / 2,tabH), mainH - tabH) - rH / 2,
                    w = min(w, maxX - rW), h = min(max(h + rH / 2,tabH), mainH-tabH) },
                resizeRight = {side = "right", x = min(max(w, minX), mainW),
                    y = min(max(h + rH / 2, tabH), mainH - tabH) - rH / 2,
                    w = min(max(w, minX), mainW - rW) + rW, h = min(max(h + rH / 2, tabH), mainH - tabH) },
                resizeTop = {side = "top", x = minX + (mid - rW) / 2,
                    y = min(h, maxY - rH), w = maxX - minX, h = min(h, maxY - rH) },
                resizeBottom = {side = "bottom", x = minX + (mid - rW) / 2,
                    y = min(max(h, minY) - rH, mainH), w = maxX - minX, h = min(max(h, minY) + rH, mainH)} }
            info = info[name]
            lbl:move(info.x, info.y)
            resizeContainers(info.side, info.w, info.h)
        end
    else
        local window, tab = GUIframe.windows[name], GUIframe.tabs[name]
        local con, tabs = get_containers(window.container.name)
        local x, y = getMousePosition()
        local over_con, over_tab
        if tab and tab.isClicked then
            moveWindow(tab.name, x - tab.difX, y - tab.difY)
            -- check to see if mouse is over any tab containers
            for _, tcon in ipairs(tab_names) do
                if check_overlap(tcon, x, y) then
                    over_con = tcon
                    GUIframe[tcon].mouse_over = true
                    local info = GUIframe.tabCoords[tcon]
                    local tx, ty, tw, th = info.x, info.y, info.w, info.h
                    createLabel("show_container", 0, 0, 0, 0, 1)
                    moveWindow("show_container", tx, ty)
                    resizeWindow("show_container", tw, th)
                    setLabelStyleSheet("show_container",[[
                        background-color: black;
                        border: 2px solid white;]])
                    showWindow("show_container")
                    lowerWindow("show_container")
                    -- check to see if mouse is over any tabs
                    for tname, info in pairs(GUIframe.tabs) do
                        if tname ~= name and check_overlap(info, x, y) then
                            over_tab = info.name
                            local windows = GUIframe[tcon].windows
                            local index = table.index_of(windows,over_tab)
                            makeSpace(GUIframe[tcon],tab,index)
                            break
                        end
                    end
                    break
                end
            end
            -- remove any unnecessary spaces in tab containers
            for _, name in ipairs(tab_names) do
                if name ~= over_con then
                    adjustTabs(GUIframe[name])
                    GUIframe[name].mouse_over = nil
                end
            end
        end
	end
	raiseEvent("GUIframe.buttonMove",name,event)
end

-- internally used function to handle sysWindowResizeEvent
function GUIframe.eventHandler(event,...)
    if event == "sysWindowResizeEvent" and GUIframe.initialized then
        refresh()
    end
end

registerAnonymousEventHandler("sysWindowResizeEvent","GUIframe.eventHandler")</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>guiLoad</name>
				<packageName></packageName>
				<script>function aard.qTimeNOexp()
  gStyleW = '&lt;font style="color:#ffffff"&gt;'
  gStyleG = '&lt;font style="color:#1aa41a"&gt;'
	
  if aard.qtime == 0 then
    Tnl:setValue(aard.tnlmax-aard.tnl, aard.tnlmax, "&lt;b&gt;&amp;nbsp;TNL: "..aard.tnl..gStyleG.."&amp;nbsp; QT:"..aard.qtime.."&amp;nbsp;"..aard.noexp.."&amp;nbsp;"..aard.dtime.."&lt;/b&gt;")
  else
    Tnl:setValue(aard.tnlmax-aard.tnl, aard.tnlmax, "&lt;b&gt;&amp;nbsp;TNL: "..aard.tnl.."&amp;nbsp; QT:"..aard.qtime..gStyleG.."&amp;nbsp;"..aard.noexp.."&amp;nbsp;"..aard.dtime.."&lt;/b&gt;")
  end	
end

function guiLoad()
--Chat Tabs
	All = Geyser.MiniConsole:new({name = "All",autoWrap = true,color = "black",fontSize = 10})
  Private = Geyser.MiniConsole:new({name = "Private",autoWrap = true,color = "black",fontSize = 10})
  Group = Geyser.MiniConsole:new({name = "Group",autoWrap = true,color = "black",fontSize = 10})
	Tell = Geyser.MiniConsole:new({name = "Tell",autoWrap = true,color = "black",fontSize = 10})
	Say = Geyser.MiniConsole:new({name = "Say",autoWrap = true,color = "black",fontSize = 10})
	Spouse = Geyser.MiniConsole:new({name = "Spouse",autoWrap = true,color = "black",fontSize = 10})
	Clan = Geyser.MiniConsole:new({name = "Clan",autoWrap = true,color = "black",fontSize = 10})
	Friend = Geyser.MiniConsole:new({name = "Friend",autoWrap = true,color = "black",fontSize = 10})
	--ItemDB = Geyser.MiniConsole:new({name = "ItemDB",autoWrap = true,color = "black",fontSize = 10})

	GUIframe.addWindow(All,"All","bottomright")
  GUIframe.addWindow(Private,"Private","bottomright")
  GUIframe.addWindow(Group,"Group","bottomright")
	GUIframe.addWindow(Tell,"Tell","bottomright")
	GUIframe.addWindow(Say,"Say","bottomright")
	GUIframe.addWindow(Spouse,"Spouse","bottomright")
	GUIframe.addWindow(Clan,"Clan","bottomright")
	GUIframe.addWindow(Friend,"Friend","bottomright")
	--GUIframe.addWindow(ItemDB,"ItemDB","bottomleft")

--Footer Gauges
	Footer = Geyser.HBox:new({name = "Footer", x = 0, y = 0, width = "100%", height = "100%"})
	GUIframe.addWindow(Footer, 'Gauges', 'bottom')

  Column1 = Geyser.VBox:new({name = "Column1"},Footer)
  Column2 = Geyser.VBox:new({name = "Column2"},Footer)
  Column3 = Geyser.VBox:new({name = "Column3"},Footer)

	--regular group style
  GaugeBackGCSS = CSSMan.new([[
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #666,  stop: 1 #333);
    border-width: 1px;
    border-color: black;
    border-style: solid;
    border-radius: 1;
    padding: 1px;
    margin: 1px;
  ]])
  GaugeFrontGCSS = CSSMan.new([[
    background-color: rgba(0,0,0,0);
    border-top: 1px black solid;
    border-left: 1px black solid;
    border-bottom: 1px black solid;
    border-radius: 1;
    padding: 1px;
    margin: 1px;
  ]])

	--compact group style
  GaugeBackGCSS2 = CSSMan.new([[
    background-color: rgba(0,0,0,0%);
    border: 0px;
    padding: 0px;
    margin: 0px;
  ]])
	--compact group style
  GaugeBackGCSS1 = CSSMan.new([[
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #666,  stop: 1 #333);
    border-width: 1px;
    border-color: black;
    border-style: solid;
    border-radius: 1;
    padding: 0px;
    margin: 0px;
  ]])
  GaugeFrontGCSS1 = CSSMan.new([[
    background-color: rgba(0,0,0,0);
    border-top: 1px black solid;
    border-left: 1px black solid;
    border-bottom: 1px black solid;
    border-radius: 1;
    padding: 0px;
    margin: 0px;
  ]])

	--gauges style
  GaugeBackCSS = CSSMan.new([[
    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #666,  stop: 1 #333);
    border-width: 1px;
    border-color: black;
    border-style: solid;
    border-radius: 2;
    padding: 1px;
    margin: 2px;
  ]])
  GaugeFrontCSS = CSSMan.new([[
    background-color: rgba(0,0,0,0);
    border-top: 1px black solid;
    border-left: 1px black solid;
    border-bottom: 1px black solid;
    border-radius: 2;
    padding: 1px;
    margin: 2px;
  ]])

  Enemy = Geyser.Gauge:new({
    name = "Enemy",
  },Column1)
  Enemy.back:setStyleSheet(GaugeBackCSS:getCSS())
  GaugeFrontCSS:set("background-color","QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 "..aard.enemyc1..", stop: 1 "..aard.enemyc2..")")
  Enemy.front:setStyleSheet(GaugeFrontCSS:getCSS())
  Enemy:setValue(0,100,"&lt;b&gt; &amp;nbsp; enemy&lt;/b&gt;")

  Health = Geyser.Gauge:new({
    name = "Health",
  },Column1)
  Health.back:setStyleSheet(GaugeBackCSS:getCSS())
  GaugeFrontCSS:set("background-color","QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 "..aard.hpc1..", stop: 1 "..aard.hpc2..")")
  Health.front:setStyleSheet(GaugeFrontCSS:getCSS())
  Health:setValue(100,100,"&lt;b&gt; &amp;nbsp; hp&lt;/b&gt;")

	Moves = Geyser.Gauge:new({
    name = "Moves",
  },Column2)
  Moves.back:setStyleSheet(GaugeBackCSS:getCSS())
  GaugeFrontCSS:set("background-color","QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 "..aard.mvc1..", stop: 1 "..aard.mvc2..")")
  Moves.front:setStyleSheet(GaugeFrontCSS:getCSS())
  Moves:setValue(100,100,"&lt;b&gt; &amp;nbsp; mv&lt;/b&gt;")

  Mana = Geyser.Gauge:new({
    name = "Mana",
  },Column2)
  Mana.back:setStyleSheet(GaugeBackCSS:getCSS())
  GaugeFrontCSS:set("background-color","QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 "..aard.mnc1..", stop: 1 "..aard.mnc2..")")
  Mana.front:setStyleSheet(GaugeFrontCSS:getCSS())
  Mana:setValue(100,100,"&lt;b&gt; &amp;nbsp; mp&lt;/b&gt;")

  Tnl = Geyser.Gauge:new({
    name = "Tnl",
  },Column3)
  Tnl.back:setStyleSheet(GaugeBackCSS:getCSS())
  GaugeFrontCSS:set("background-color","QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 "..aard.tnlc1..", stop: 1 "..aard.tnlc2..")")
  Tnl.front:setStyleSheet(GaugeFrontCSS:getCSS())
  Tnl:setValue(100,100,"&lt;b&gt; &amp;nbsp; tnl&lt;/b&gt;")

	Align = Geyser.Gauge:new({
    name = "Align",
  },Column3)
  Align.back:setStyleSheet(GaugeBackCSS:getCSS())
  GaugeFrontCSS:set("background-color","QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 "..aard.neutralc1..", stop: 1 "..aard.neutralc2..")")
  Align.front:setStyleSheet(GaugeFrontCSS:getCSS())
  Align:setValue(100,100,"&lt;b&gt; &amp;nbsp; align&lt;/b&gt;")
end

if not guiLoaded then--only run once per launch of mudlet
	guiLoaded = true
	guiLoad()
end

--this section is to load the map and events following it seperately because of a current bug:
-- https://github.com/Mudlet/Mudlet/issues/2076
-- basically by using a tempTimer to load this part of the GUI it will load the settings properly.
registerAnonymousEventHandler(
  'sysLoadEvent',
  function()
    if GUIframe then
      if not mapcontainer then
        mapcontainer = Geyser.Container:new({name = 'mapcontainer', x = 0, y = 0, width = 300, height = 400})
        mapwin = Geyser.Mapper:new({name = "mapwin", x = 0, y = 0, width = '100%', height = '100%'}, mapcontainer)
        tempTimer(0.1, function()
          GUIframe.addWindow(mapcontainer, "Map", "topright")
					print('MainWindowSize: ' .. tostring(getMainWindowSize()))
        	mapCheck()
        	setMapZoom(35)
					GUIframe.loadSettings()
					GUIframe.activate("All")
					styleLoad()--set scrollbar stylesheet
        	local mapw = 232
        	local maph = 255	
        	minimap = Geyser.MiniConsole:new({name="minimap",x=0,y=0,width=mapw,height=maph,color="black",font="Source Code Pro Black",fontSize=10})
        	minimapsnap()
					if (aard.map.enable) then aard:init_map() end
					aard.init = true
					aard.log:info("Scripts initialized")
					cShopMenu()--if rooms are missing from map this can break loading, do it last.
        end)
      end
    end
  end
)</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>onInGame</name>
				<packageName></packageName>
				<script>-- Actions to occur once we are truly 'in' the game. 
-- Will only fire on first connect/reconnect
function onInGame()
	setServerEncoding("UTF-8")	
	aard.command = nil -- clear this so that the mapper does not think our mud password is a special exit command
	
	-- Need to be fully in-game before getting room/sector info	
	sendGMCP('Core.Supports.Set [ "Char 1", "Comm 1", "Room 1" ]')
	sendGMCP("tags on")
	sendGMCP("maptype 1")
	sendGMCP("group on")
	
	sendGMCP("request room")
	sendGMCP("request sectors")
	sendGMCP("request char")
	sendGMCP("request quest") --used for quest time
	
	--sendGMCP("gmcpchannels on") -- ommit channels from main output
	

	send("tags map on",false)-- enable maptags so we can capture minimap.
	send("map",false)-- sends the command "map" to the mud without echoing to the screen.	
	send("look in "..aard.config["pbag"],false)-- look in potion container so we can update our count when logging in.
	send("daily",false)--daily blessing status not available via GMCP, so we need to check it, to set the timer.
	
	aard.command = nil -- clear this so that the mapper does not think our mud password is a special exit command
	
	--map off:
	--sendGMCP("maptype -1")
	
	 --"0 - Standard ASCII based map|"
   --"1 - Solid single line map|"
   --"2 - Solid double line map|"
   --"3 - Solid single line map (no end caps)|"
   --"4 - Solid double line map (no end caps)|"
   --"5 - Solid single line map (extended walls)|"
   --"6 - Solid double line map (extended walls)|"

	--send("P",false) -- Force a prompt to display to init various prompt-based flags
	--send("look",false)
end</script>
				<eventHandlerList>
					<string>inGame</string>
				</eventHandlerList>
			</Script>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>adt</name>
				<packageName></packageName>
				<script>aard.adt = aard.adt or {}
aard.adt.pups = aard.adt.pups or {}
aard.adt.lvls = aard.adt.lvls or {}
aard.adt.deaths = aard.adt.deaths or {}</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>adt pup level death</name>
					<packageName></packageName>
					<script>function pup(clan,player)
	aard.foundmatch=true
  aard.adt.pups[clan] = aard.adt.pups[clan] or {}
  if aard.adt.pups[clan][player] then
  	aard.adt.pups[clan][player] = aard.adt.pups[clan][player] + 1
  else
  	aard.adt.pups[clan][player] = 1
  end
	setTriggerStayOpen("infogate",0)
	deleteLine()	
end

function lvl(clan,player)
	aard.foundmatch=true
  aard.adt.lvls[clan] = aard.adt.lvls[clan] or {}
  if aard.adt.lvls[clan][player] then
  	aard.adt.lvls[clan][player] = aard.adt.lvls[clan][player] + 1
  else
  	aard.adt.lvls[clan][player] = 1
  end
	setTriggerStayOpen("infogate",0)
	deleteLine()	
end

function death(clan,player)
	if string.find(player, "HARDCORE") then-- was still testing this as hardcore deaths should probably go in their own table.
		appendBuffer("All")
		appendBuffer("Spouse")
	else
  	aard.foundmatch=true
    aard.adt.deaths[clan] = aard.adt.deaths[clan] or {}
    if aard.adt.deaths[clan][player] then
    	aard.adt.deaths[clan][player] = aard.adt.deaths[clan][player] + 1
    else
    	aard.adt.deaths[clan][player] = 1
    end
  	setTriggerStayOpen("infogate",0)
  	deleteLine()
	end
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>aardMap</name>
				<packageName></packageName>
				<script>mudlet = mudlet or {}
mudlet.mapper_script = true
aard.areaInfo = aard.areaInfo or {}</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>init_map</name>
					<packageName></packageName>
					<script>function aard:init_map()
  
  --sendGMCP("rawcolor on")
  
  aard.map.current_zone = nil
  aard.map.current_room = nil
  aard.map.prior_room = nil
  aard.map.prior_room_data = {}
  aard.map.seen_room = nil
  aard.map.terrain = {}
  aard.map.sectors = nil
  
  aard.map.init = true
  aard.log:info("Initalized aard mapper")
	
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>labelAdjustment</name>
					<packageName></packageName>
					<script>GUIlabel = GUIlabel or {}
local adjustInfo

GUIlabel.adjustLabel = function(name, x, y, w, h, c)
    local info, lbl
    if type(name) == "table" then
        if name.type == "label" then
            lbl = name
        else
            info = name
        end
    else
        info = {name = name, x = x, y = y, width = w, height = h, color = c}
    end
    if not lbl then
        lbl = Geyser.Label:new(info)
    end
    lbl:setClickCallback("GUIlabel.onClick",lbl)
    lbl:setReleaseCallback("GUIlabel.onRelease",lbl)
    lbl:setMoveCallback("GUIlabel.onMove",lbl)
    if info then
        return lbl
    end
end

local function make_percent(num)
    num = math.floor(10000*num)/100
    num = tostring(num).."%"
    return num
end

GUIlabel.finishLabel = function(lbl, size_as_percent, position_as_percent)
    lbl:setClickCallback("fakeFunction")
    lbl:setReleaseCallback("fakeFunction")
    lbl:setMoveCallback("fakeFunction")
    local x, y, w, h = lbl:get_x(), lbl:get_y(), lbl:get_width(), lbl:get_height()
    local winw, winh = getMainWindowSize()
    x, y, w, h = make_percent(x/winw), make_percent(y/winh), make_percent(w/winw), make_percent(h/winh)
    if size_as_percent then lbl:resize(w,h) end
    if position_as_percent then lbl:move(x,y) end
end

GUIlabel.onClick = function(lbl, event)
    if event.button == "LeftButton" then
        local x, y = getMousePosition()
        local w, h = lbl:get_width(), lbl:get_height()
        local x1, y1 = x - event.x, y - event.y
        local x2, y2 = x1 + w, y1 + h
        local left, right, top, bottom = event.x &lt;= 10, x &gt;= x2 - 10, event.y &lt;= 10, y &gt;= y2 - 10
        if right and left then left = false end
        if top and bottom then top = false end
        local move = not (right or left or top or bottom)
        adjustInfo = {name = lbl.name, top = top, bottom = bottom, left = left, right = right, move = move, x = x, y = y}
    end
end

GUIlabel.onRelease = function(lbl, event)
    if event.button == "LeftButton"  and adjustInfo and adjustInfo.name == lbl.name then
        adjustInfo = nil
    end
end

GUIlabel.onMove = function(lbl, event)
    if adjustInfo and adjustInfo.name == lbl.name then
        local x, y = getMousePosition()
        local winw, winh = getMainWindowSize()
        local x1, y1, w, h = lbl.get_x(), lbl.get_y(), lbl:get_width(), lbl:get_height()
        local dx, dy = adjustInfo.x - x, adjustInfo.y - y
        local max, min = math.max, math.min
        if adjustInfo.move then
            local tx, ty = max(0,x1-dx), max(0,y1-dy)
            tx, ty = min(tx, winw - w), min(ty, winh - h)
            lbl:move(tx, ty)
        else
            local w2, h2, x2, y2 = w - dx, h - dy, x1 - dx, y1 - dy
            local tx, ty, tw, th = x1, y1, w, h
            if adjustInfo.top then
                ty, th = y2, h + dy
            elseif adjustInfo.bottom then
                th = h2
            end
            if adjustInfo.left then
                tx, tw = x2, w + dx
            elseif adjustInfo.right then
                tw = w2
            end
            tx, ty, tw, th = max(0,tx), max(0,ty), max(10,tw), max(10,th)
            tw, th = min(tw, winw), min(th, winh)
            tx, ty = min(tx, winw-tw), min(ty, winh-th)
            lbl:move(tx, ty)
            lbl:resize(tw, th)
        end
        adjustInfo.x, adjustInfo.y = x, y
    end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>tools</name>
					<packageName></packageName>
					<script>function minimapsnap()
	local mapw = 232
	local maph = 255
	local mapx = 800
	local mapy = 0
  if GUIframe.tabCoords.topRightTabs then
		mapx = GUIframe.tabCoords.topRightTabs.x - mapw - 22
		mapy = GUIframe.tabCoords.topRightTabs.y
	end
	
  if minimap then
		--minimap
		minimap:move(mapx,mapy)
		
		--group frames
		if gInfo then
      local barW = 150
      local gx = minimap.x:gsub("px","")+(minimap.width:gsub("px","")-barW)
      local gy = minimap.y:gsub("px","")+minimap.height:gsub("px","")
      gInfo:move(gx,gy)
		end
		
	end	
end

function mapStarter()
  setMapUserData("last_modified", getTime(true,"yyyy.MM.ddThh:mm:ss.zzz"))
  
  local saveString = getMudletHomeDir().."/aardwolf/mapBackup_"..getTime(true,"yyyy.MM.ddThh.mm.ss.zzz")..".dat"
	local savedok = saveMap(saveString)
	
  if not savedok then
    echo("Couldn't save map :(\n")
		return 0--bail out, map didnt save.
  else
    echo("Map saved to: "..saveString.."\n")
		loadMap(getMudletHomeDir().."/aardwolf/mapStarter.dat")
  end
  --lua display(getMapUserData("last_modified"))
  --lua display(getAllMapUserData())	
end

function mapCheck()
	--MAP Backup, save, load
  local myRoomsTable = getRooms()
  local count = count or 0
  for _ in pairs(myRoomsTable) do count = count + 1 end
	if count &gt; 14906 then
		echo("\n")
		aard.log:info("Your existing map has "..count.." rooms mapped.")
		aard.log:info("To load the starter map anyway (14907 rooms) type: startermap")
		aard.log:info("startermap will backup your map before loading the starter map.")
	else
		mapStarter()		
	end
end

function checkDoor(id,dir)
  local doors = getDoors(id)
  
  if not next(doors) then
		--cecho("\nThere aren't any doors in the room.")
		return
	end
  
  local door_status = {"open", "closed", "locked"}  
  for direction, door in pairs(doors) do
  	if direction == dir then
			if dir == "up" then--shorten further
				dir = "u"
			elseif dir == "down" then--shorten further
				dir = "d"
			end
  		return "o "..dir..";"
  	end
    --cecho("\nThere's a door leading in "..direction.." that is "..door_status[door]..".")
  end
end

function openDoor(dir)
  local doors = getDoors(aard.map.current_room)
  
  if not next(doors) then
		--cecho("\nThere aren't any doors in the room.")
		return
	end
  
  local door_status = {"open", "closed", "locked"}  
  for direction, door in pairs(doors) do
  	if direction == dir then
  		send("op "..dir,true)
  	end
    --cecho("\nThere's a door leading in "..direction.." that is "..door_status[door]..".")
  end
end

aard.echocolour = "cyan"

function aard_regenerate_areas()
  -- cached data
  aard.areatable = getAreaTable() -- this translates an area name to an ID
  aard.areatabler = {} -- this translates an ID to an area name

  local t = getAreaTable()
  for k,v in pairs(t) do
    aard.areatabler[tonumber(v)] = k
  end

  --aard.clearpathcache()
end
aard_regenerate_areas()

function aard.echoPath(from, to)
	assert(tonumber(from) and tonumber(to), "getPath: both from and to have to be room IDs")
	if getPath(from, to) then
		cecho("&lt;white&gt;Directions from &lt;yellow&gt;" .. string.upper(searchRoom(from)) .. " &lt;white&gt;to &lt;yellow&gt;" .. string.upper(searchRoom(to)) .. "&lt;white&gt;:")
		echo(table.concat(speedWalkDir, ", "))
		return aard.speedWalkDir
	else
	  cecho("&lt;white&gt;I can't find a way from &lt;yellow&gt;" .. string.upper(searchRoom(from)) .. " &lt;white&gt;to &lt;yellow&gt;" .. string.upper(searchRoom(to)) .. "&lt;white&gt;")
	end
end

function aard.roomFind(query)
  if query:ends('.') then query = query:sub(1,-2) end
  local result = aard.searchRoom(query)

  if type(result) == "string" or not next(result) then
    cecho("\n&lt;grey&gt; You have no recollection of any room with that name.\n") return end

  cecho("\n&lt;DarkSlateGrey&gt; You know the following relevant rooms:\n")

  local function showmeropis(roomid)
    if aard.game ~= "achaea" then return '' end

    return aard.oncontinent(getRoomArea(roomid), "Main") and '' or ' (Meropis)'
  end

  if not tonumber(select(2, next(result))) then -- old style
    for roomid, roomname in pairs(result) do roomid = tonumber(roomid)
      cecho(string.format("  &lt;LightSlateGray&gt;%s&lt;DarkSlateGrey&gt; (",
        tostring(roomname)))
      cechoLink("&lt;"..aard.echocolour.."&gt;"..roomid, 'gotoRoom('..roomid..')', string.format("Go to %s (%s)", roomid, tostring(roomname)), true)
      cecho(string.format("&lt;DarkSlateGrey&gt;) in &lt;LightSlateGray&gt;%s%s&lt;DarkSlateGrey&gt;.", aard.stripRoomName(tostring(getRoomAreaName(getRoomArea(roomid)))), showmeropis(roomid)))
      fg("DarkSlateGrey") echoLink(" &gt; Show path", [[aard.echoPath(]]..aard.map.current_room..[[, ]]..roomid..[[)]], "Display directions from here to "..roomname, true) echo("  ")
			fg("DarkSlateGrey") echoLink(" &gt; Show recall path\n", [[showSpeedWalk(32418, ]]..roomid..[[)]], "Display directions from here to "..roomname, true)
			resetFormat()
    end

  else -- new style
    for roomname, roomid in pairs(result) do roomid = tonumber(roomid)
      cecho(string.format("  &lt;LightSlateGray&gt;%s&lt;DarkSlateGrey&gt; (",
        tostring(roomname)))
      cechoLink("&lt;"..aard.settings.echocolour.."&gt;"..roomid, 'aard.gotoRoom('..roomid..')', string.format("Go to %s (%s)", roomid, tostring(roomname)), true)
      cecho(string.format("&lt;DarkSlateGrey&gt;) in &lt;LightSlateGray&gt;%s%s&lt;DarkSlateGrey&gt;.", aard.cleanAreaName(tostring(getRoomAreaName(getRoomArea(roomid)))), showmeropis(roomid)))
      fg("DarkSlateGrey") echoLink(" &gt; Show path", [[aard.echoPath(]]..aard.map.current_room..[[, ]]..roomid..[[)]], "Display directions from here to "..roomname, true) echo("  ")
			fg("DarkSlateGrey") echoLink(" &gt; Show recall path\n", [[showSpeedWalk(32418, ]]..roomid..[[)]], "Display directions from here to "..roomname, true)
			resetFormat()
    end
  end

  cecho(string.format("  &lt;DarkSlateGrey&gt;%d rooms found.\n", table.size(result)))
end

function aard.roomFindArea(query)
  if query:ends('.') then query = query:sub(1,-2) end
  local result = aard.searchRoomArea(query)

  if type(result) == "string" or not next(result) then
    cecho("\n&lt;grey&gt; You have no recollection of any room with that name.\n") return end

  cecho("\n&lt;DarkSlateGrey&gt; You know the following relevant rooms:\n")

  local function showmeropis(roomid)
    if aard.game ~= "achaea" then return '' end

    return aard.oncontinent(getRoomArea(roomid), "Main") and '' or ' (Meropis)'
  end

  if not tonumber(select(2, next(result))) then -- old style
    for roomid, roomname in pairs(result) do roomid = tonumber(roomid)
      cecho(string.format("  &lt;LightSlateGray&gt;%s&lt;DarkSlateGrey&gt; (",
        tostring(roomname)))
      cechoLink("&lt;"..aard.echocolour.."&gt;"..roomid, 'gotoRoom('..roomid..')', string.format("Go to %s (%s)", roomid, tostring(roomname)), true)
      cecho(string.format("&lt;DarkSlateGrey&gt;) in &lt;LightSlateGray&gt;%s%s&lt;DarkSlateGrey&gt;.", aard.stripRoomName(tostring(getRoomAreaName(getRoomArea(roomid)))), showmeropis(roomid)))
      fg("DarkSlateGrey") echoLink(" &gt; Show path", [[aard.echoPath(]]..aard.map.current_room..[[, ]]..roomid..[[)]], "Display directions from here to "..roomname, true) echo("  ")
			fg("DarkSlateGrey") echoLink(" &gt; Show speedwalk\n", [[showSpeedWalk(32418, ]]..roomid..[[)]], "Display directions from here to "..roomname, true)
			resetFormat()
    end

  else -- new style
    for roomname, roomid in pairs(result) do roomid = tonumber(roomid)
      cecho(string.format("  &lt;LightSlateGray&gt;%s&lt;DarkSlateGrey&gt; (",
        tostring(roomname)))
      cechoLink("&lt;"..aard.settings.echocolour.."&gt;"..roomid, 'aard.gotoRoom('..roomid..')', string.format("Go to %s (%s)", roomid, tostring(roomname)), true)
      cecho(string.format("&lt;DarkSlateGrey&gt;) in &lt;LightSlateGray&gt;%s%s&lt;DarkSlateGrey&gt;.", aard.cleanAreaName(tostring(getRoomAreaName(getRoomArea(roomid)))), showmeropis(roomid)))
      fg("DarkSlateGrey") echoLink(" &gt; Show path", [[aard.echoPath(]]..aard.map.current_room..[[, ]]..roomid..[[)]], "Display directions from here to "..roomname, true) echo("  ")
			fg("DarkSlateGrey") echoLink(" &gt; Show speedwalk\n", [[showSpeedWalk(32418, ]]..roomid..[[)]], "Display directions from here to "..roomname, true)
			resetFormat()
    end
  end

  cecho(string.format("  &lt;DarkSlateGrey&gt;%d rooms found.\n", table.size(result)))
end

-- searchRoom with a cache!
local cache = {}
setmetatable(cache, {__mode = "kv"}) -- weak keys/values = it'll periodically get cleaned up by gc

function aard.searchRoom(what)
  local result = cache[what]
  if not result then
    result = searchRoom(what)
    local realResult = {}
    for key, value in pairs(type(result) == "table" and result or {}) do
        -- both ways, because searchRoom can return either id-room name or the reverse
        if type(key) == "string" then					
          realResult[key:ends(" (road)") and key:sub(1, -8) or key] = value
        else
          realResult[key] = value:ends(" (road)") and value:sub(1, -8) or value
        end
    end
    cache[what] = realResult
    result = realResult
  end
  return result
end

function aard.searchRoomExact(what)
  local result = cache[what]
  if not result then
    result = searchRoom(what,true,true)
    local realResult = {}
    for key, value in pairs(type(result) == "table" and result or {}) do
        -- both ways, because searchRoom can return either id-room name or the reverse
        if type(key) == "string" then					
          realResult[key:ends(" (road)") and key:sub(1, -8) or key] = value
        else
          realResult[key] = value:ends(" (road)") and value:sub(1, -8) or value
        end
    end
    cache[what] = realResult
    result = realResult
  end
  return result
end

function aard.searchRoomArea(what)
  local result = cache[what]
  if not result then
    result = searchRoom(what)
    local realResult = {}
    for key, value in pairs(type(result) == "table" and result or {}) do
        -- both ways, because searchRoom can return either id-room name or the reverse
        if type(key) == "string" then					
          realResult[key:ends(" (road)") and key:sub(1, -8) or key] = value
        else
					--search room by string value
					--display(value)
					if getRoomArea(key) == getRoomArea(aard.map.seen_room) then
						realResult[key] = value:ends(" (road)") and value:sub(1, -8) or value
					end
					--display(getRoomArea(key))
					--display(getRoomArea(aard.map.seen_room))          
        end
    end
    cache[what] = realResult
    result = realResult
  end
  return result
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>mapAddons</name>
					<packageName></packageName>
					<script>mapAddOns = mapAddOns or {}

local function safeDelete(ids)
    for _, id in ipairs(ids) do
        id = tonumber(id)
        local rooms = {}
        for _, room in ipairs(getAllRoomEntrances(id)) do
            for dir, exit in pairs(getRoomExits(room)) do
                if exit == id then
                    if rooms[room] then
                        if type(rooms[room]) == "table" then
                            table.insert(rooms[room],dir)
                        else
                            rooms[room] = {rooms[room], dir}
                        end
                    else
                        rooms[room] = dir
                    end
                end
            end
        end
        deleteRoom(id)
        for rid, dirs in pairs(rooms) do
            if type(dirs) == "table" then
                for _, dir in ipairs(dirs) do
                    setExitStub(rid, dir, true)
                end
            else
                setExitStub(rid, dirs, true)
            end
        end
    end
    updateMap()
end

local function shiftZ(direction)
  local selectedRooms = getMapSelection()
  for i in pairs(selectedRooms.rooms) do
  	local x,y,z = getRoomCoordinates(selectedRooms.rooms[i])
  	setRoomCoordinates(selectedRooms.rooms[i], x, y, z+direction)
  end
	updateMap()
	centerview(selectedRooms.rooms[1])
end

function mapAddOns.eventHandler(event, mapEvent, ...)
    if event == "mapAddOnEvent" then
        if mapEvent == "safeDelete" then
            safeDelete(arg)
        elseif mapEvent == "shiftUp" then          
            shiftZ(1)
        elseif mapEvent == "shiftDown" then
            shiftZ(-1)
        end
    elseif event == "mapOpenEvent" then
        local events = {safeDelete = "Safe Delete", shiftUp = "Shift Up", shiftDown = "Shift Down"}
        local mapEvents = getMapEvents()
        for event, name in pairs(events) do
            if not mapEvents[event] then
                addMapEvent(event, "mapAddOnEvent","",name)
            end
        end
    end
end

registerAnonymousEventHandler("mapAddOnEvent","mapAddOns.eventHandler")
registerAnonymousEventHandler("mapOpenEvent","mapAddOns.eventHandler")</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>rooms</name>
					<packageName></packageName>
					<script>-- Rawcolor functionality leaves ANSI identifiers in many room names.
-- We don't want those, so strip them out.
-- Example: @WMy Colorful Roomname@g
function aard.stripRoomName(room_name)
  --local new_name = string.gsub(room_name, "@%a", "")
	local new_name = ansi2decho(room_name):gsub("%b&lt;&gt;", "")
	if room_name ~= new_name then
  	aard.log:debug("Cleaned room name: "..new_name)
	end
  return new_name
end

function aard.map:createUnexploredRoom(direction, room) --called from connectExits(
	local isCreated = false
	local found_zone, zone_id = aard.map:isKnownZone(gmcp.room.info.zone)
	--display(roomId)
	--if i use the info in the ASCII map I can also infer when a direction leads to a new zone.
	--allthough the only option that leaves me with is choosing not to yet mark that room on the map.
	
  aard.log:debug("Attempting to create Unexplored room for "..room)
  if room == -1 then
    aard.log:error("Unable to create room - no room id given by mud")
    return
  end

  isCreated = addRoom(room)
  setRoomName(room, "?")--set as ? to indicate not explored
  setRoomArea(room, zone_id)
	setRoomEnv(room, 999)--set env to 999 to indicate its an Unexplored room.

  --local terrain_id = aard.map.terrain[gmcp.room.info.terrain]
  --aard.log:debug("Setting terrain as "..terrain_id)
  --if terrain_id then
  --  setRoomEnv(room_id, terrain_id)
  --end

	--this blocks handles continent coords for creating unexplored rooms.
  if gmcp.room.info.coord.cont == 1 then
    aard.log:debug("Unexplored Continent room: hardcoding coords")
    if direction == "n" then
      setRoomCoordinates(room, tonumber(gmcp.room.info.coord.x), tonumber(gmcp.room.info.coord.y)*-1+1, 0)
    elseif direction == "s" then
      setRoomCoordinates(room, tonumber(gmcp.room.info.coord.x), tonumber(gmcp.room.info.coord.y)*-1-1, 0)
    elseif direction == "e" then
      setRoomCoordinates(room, tonumber(gmcp.room.info.coord.x)+1, tonumber(gmcp.room.info.coord.y)*-1, 0)
    elseif direction == "w" then
      setRoomCoordinates(room, tonumber(gmcp.room.info.coord.x)-1, tonumber(gmcp.room.info.coord.y)*-1, 0)
    elseif direction == "u" then
      setRoomCoordinates(room, tonumber(gmcp.room.info.coord.x), tonumber(gmcp.room.info.coord.y)*-1, 1)
    elseif direction == "d" then
      setRoomCoordinates(room, tonumber(gmcp.room.info.coord.x), tonumber(gmcp.room.info.coord.y)*-1, -1)
    else
      setRoomCoordinates(room, tonumber(gmcp.room.info.coord.x), tonumber(gmcp.room.info.coord.y)*-1, 0)
    end
  else
    aard.log:debug("unexploredRoom() getNewCoords() cRoom: "..aard.map.current_room)
    local x,y,z = aard.map:getNewCoords(direction,aard.map.current_room)
    
    local rooms_at_location = getRoomsByPosition(zone_id, x, y, z)
    --display(rooms_at_location)
    if table.size(rooms_at_location) &gt; 0 then 
      aard.log:debug("unexploredRoom() Found colliding rooms... moving")
      aard.map:moveCollidingRooms(zone_id, x, y, z, direction)
    end
    
    aard.log:debug("New coords set to:"..x.." "..y.." "..z)
    setRoomCoordinates(room, x, y, z)
	end
	
	setRoomChar(room, "?")
  aard.log:debug("Created new Unexplored room")
	local dir_num = aard.map:getExitNum(direction)
	setExit(aard.map.seen_room, room, dir_num)
 
  if not isCreated then
    aard.log:error("Failed to create new room!")
  end
end

function aard.map:exploreRoom()
  local room_id = gmcp.room.info.num
  local isCreated = true
  local found_zone, zone_id = aard.map:isKnownZone(gmcp.room.info.zone)
  local room_name = aard.stripRoomName(gmcp.room.info.name)

  if not found_zone then
    aard.log:error("exploring: Unknown zone! Can't create room in an unknown zone")
    return
  end

  aard.log:debug("Attempting to create room for "..room_id)
  if room_id == -1 then
    aard.log:error("Unable to create room - no room id given by mud")
    return
  end

  setRoomName(room_id, room_name)
  setRoomArea(room_id, zone_id)
	setRoomChar(room_id, "")

  local terrain_id = aard.map.terrain[gmcp.room.info.terrain]
  aard.log:debug("Setting terrain as "..terrain_id)
  if terrain_id then
    setRoomEnv(room_id, terrain_id)
  end

	--this blocks handles zone change on exploring existing unexplored room.
  if gmcp.room.info.zone ~= aard.map.prior_zone_name then
    if gmcp.room.info.coord.cont == 1 then
      aard.log:debug("Continent room: hardcoding coords")
			setRoomCoordinates(room_id, tonumber(gmcp.room.info.coord.x), tonumber(gmcp.room.info.coord.y)*-1, 0)
    else
      aard.log:debug("Changed zone, centering map at 0,0,0")
      setRoomCoordinates(room_id, 0, 0, 0)
  		aard.map.prior_zone_name=gmcp.room.info.zone
		end
  end
	
  aard.map.current_room = room_id
	if firstRoom == true or aard.newzone == true then
	  aard.map:connectExits(gmcp.room,false)
	else
	  aard.map:connectExits(gmcp.room,true)
	end
	
	--jakejake
	--display(aard.other)
	if aard.other == true then
		aard.other = false
  	aard.map:connectSpecialExits()
	end
  centerview(room_id)
  aard.log:debug("Explored room")
 
  if not isCreated then
    aard.log:error("Failed to create new room!")
  end
end

function aard.map:createRoom()
  local room_id = gmcp.room.info.num
  local isCreated = false
  local found_zone, zone_id = aard.map:isKnownZone(gmcp.room.info.zone)
  local room_name = aard.stripRoomName(gmcp.room.info.name)

  if not found_zone then
    aard.log:error("creating: Unknown zone! Can't create room in an unknown zone")
    return
  end

  aard.log:debug("Attempting to create room for "..room_id)
  if room_id == -1 then
    aard.log:error("Unable to create room - no room id given by mud")
    return
  end

  isCreated = addRoom(room_id)
  setRoomName(room_id, room_name)
  setRoomArea(room_id, zone_id)
	
	--JAKE if its a special exit this wont work, because its looking for cardinal direction
	if aard.map:isCardinalExit(aard.command) then
		setExit(aard.map.prior_room, room_id, aard.command)
	end
	aard.log:debug("Created Link from: " .. aard.map.prior_room .. " to: " .. room_id .. " dir: " .. aard.command)
	--echo("\n2from: " .. aard.map.prior_room .. " to: " .. room_id .. " dir: " .. aard.command .. " .\n")

  local terrain_id = aard.map.terrain[gmcp.room.info.terrain]
  aard.log:debug("Setting terrain as "..terrain_id)
  if terrain_id then
    setRoomEnv(room_id, terrain_id)
  end
	
	local firstRoom = false
  -- If there is no prior room, then this is the first room of the map
  if not aard.map.prior_room then
		firstRoom = true
    if gmcp.room.info.coord.cont == 1 then
      setRoomCoordinates(room_id, gmcp.room.info.coord.x, gmcp.room.info.coord.y*-1, 0)
    else
      setRoomCoordinates(room_id, 0, 0, 0)
    end
    aard.map.prior_room = room_id
    aard.log:debug("Created first map room for id "..room_id)
  else
    aard.map.prior_room = aard.map.current_room
		aard.log:debug("createRoom() getNewCoords() pRoom: "..aard.map.prior_room)

    local x,y,z = aard.map:getNewCoords(aard.command,aard.map.prior_room)--join organized crime

		local rooms_at_location = getRoomsByPosition(zone_id, x, y, z)
    --display(rooms_at_location)
    if table.size(rooms_at_location) &gt; 0 then 
      aard.log:debug("createRoom() Found colliding rooms... moving")
      aard.map:moveCollidingRooms(zone_id, x, y, z, aard.command) 
    end

    aard.log:debug("New coords set to:"..x.." "..y.." "..z)
    setRoomCoordinates(room_id, x, y, z)
  end

  aard.map.current_room = room_id
	if firstRoom == true or aard.newzone == true then
	  aard.map:connectExits(gmcp.room,false)
	else
	  aard.map:connectExits(gmcp.room,true)
	end
  if aard.other == true then
		aard.other = false
		aard.map:connectSpecialExits()
	end
  centerview(room_id)
  aard.log:debug("Created new room")
	aard.newzone = false
 
  if not isCreated then
    aard.log:error("Failed to create new room!")
  end
end

function aard.map:getNewCoords(command,fromRoom)
  if not command then
    aard.log:error("No command has been sent - can't find new coords")
    return
  end
  
  -- Continents are mapped in the 4th coordinate x,y system
  if gmcp.room.info.coord.cont == 1 then
    aard.log:debug("Continent room: hardcoding coords")
    return tonumber(gmcp.room.info.coord.x), tonumber(gmcp.room.info.coord.y)*-1, 0
  end

  if gmcp.room.info.zone ~= aard.map.prior_zone_name then
    aard.log:debug("Changed zone, centering map at 0,0,0")
    return 0,0,0 
  end
	
  if aard.map:isCardinalExit(command) then
    local direction_traveled = aard.map:getShortExit(command)
    aard.log:debug("Last command was a cardinal exit")
    local prior_room_x, prior_room_y, prior_room_z = getRoomCoordinates(fromRoom)
    if direction_traveled == "n" then
      return prior_room_x, prior_room_y+2, prior_room_z
    elseif direction_traveled == "s" then
      return prior_room_x, prior_room_y-2, prior_room_z
    elseif direction_traveled == "e" then
      return prior_room_x+2, prior_room_y, prior_room_z
    elseif direction_traveled == "w" then
      return prior_room_x-2, prior_room_y, prior_room_z
    elseif direction_traveled == "ne" then
      return prior_room_x+2, prior_room_y+2, prior_room_z
    elseif direction_traveled == "nw" then
      return prior_room_x-2, prior_room_y+2, prior_room_z
    elseif direction_traveled == "se" then
      return prior_room_x+2, prior_room_y-2, prior_room_z
    elseif direction_traveled == "sw" then
      return prior_room_x-2, prior_room_y-2, prior_room_z
    elseif direction_traveled == "u" then
      return prior_room_x, prior_room_y, prior_room_z+1
    elseif direction_traveled == "d" then
      return prior_room_x, prior_room_y, prior_room_z-1
    else
      return prior_room_x, prior_room_y, prior_room_z
    end
	else--not cardinal exit(special exit) and same zone, so just +1 the x axis
		local prior_room_x, prior_room_y, prior_room_z = getRoomCoordinates(fromRoom)
		return prior_room_x+1, prior_room_y, prior_room_z
  end
end

function aard.map:moveCollidingRooms(zone_id, cur_x, cur_y, cur_z, movedir)
  local x_axis_pos = {"e"}
  local x_axis_neg = {"w"}
  local y_axis_pos = {"n","nw","ne"}
  local y_axis_neg = {"s","sw","se"}
  local z_axis_pos = {"u"}
  local z_axis_neg = {"d"}

  local rooms = getAreaRooms(zone_id)
  local dir = movedir

  if table.contains(y_axis_pos, dir) then
    for name, id in pairs(rooms) do
      local x,y,z = getRoomCoordinates(id)
      if y &gt;= cur_y then
        setRoomCoordinates(id, x, y+2, z)
      end
    end
  elseif table.contains(y_axis_neg, dir) then
    for name, id in pairs(rooms) do
      local x,y,z = getRoomCoordinates(id)
      if y &lt;= cur_y then
        setRoomCoordinates(id, x, y-2, z)
      end
    end
  elseif table.contains(x_axis_pos, dir) then
    for name, id in pairs(rooms) do
      local x,y,z = getRoomCoordinates(id)
      if x &gt;= cur_x then
        setRoomCoordinates(id, x+2, y, z)
      end
    end
  elseif table.contains(x_axis_neg, dir) then
    aard.log:debug("Shifting rooms lower in x")
    for name, id in pairs(rooms) do
      local x,y,z = getRoomCoordinates(id)
      if x &lt;= cur_x then
        setRoomCoordinates(id, x-2, y, z)
      end
    end
  elseif table.contains(z_axis_pos, dir) then
    for name, id in pairs(rooms) do
      local x,y,z = getRoomCoordinates(id)
      if z &gt;= cur_z then
        setRoomCoordinates(id, x, y, z+1)
      end
    end
  elseif table.contains(z_axis_neg, dir) then
    for name, id in pairs(rooms) do
      local x,y,z = getRoomCoordinates(id)
      if z &lt;= cur_z then
        setRoomCoordinates(id, x, y, z-1)
      end
    end
  end
end

</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>speedwalk</name>
					<packageName></packageName>
					<script>function buildSpeedWalk(startID,toID)
	if startID then
		if getPath(startID,toID) then
			--doable
		end
	end
  if #speedWalkPath == 0 then
    aard.log:error("No speedwalk path found!")
  end
	
	local previousID = startID or aard.map.current_room
	local exits = aard.map:getAllExits(previousID)
  local path = {}
	
	
	local shrinkExits = {north = "n", south = "s", east = "e", west = "w", northeast = "ne", northwest = "nw", southeast = "se", southwest = "sw", up = "up", down = "down"}
	
  for i, room_id in pairs(speedWalkPath) do
    for j, exit in pairs(exits) do
      if tonumber(room_id) == exit then
				local door = checkDoor(previousID,shrinkExits[j])
				if door then
					table.insert(path, door)
				end
        table.insert(path, j)
				previousID = room_id
      end
    end
		exits = aard.map:getAllExits(room_id)
  end
	
	local run = ""
	local runFunc = {}
	local samedir = 1
	local es = {north = "n", south = "s", east = "e", west = "w", northeast = "ne", northwest = "nw", southeast = "se", southwest = "sw", up = "u", down = "d"}
	
	--if string.match("sendhian", matches[2]) then
	
	if es[path[1]] then
		run = run.."run "
	else
    if path[2] and path[3] then
    	if es[path[2]] and es[path[3]] then
    		run = run..path[1]..";run "
    	else
    		run = run..path[1]..";"
    	end
    else
			if path[1] then
    		run = run..path[1]..";"
			end
    end
		table.remove(path, 1)
	end

  while path[1] do
    local dir = path[1]
    table.remove(path, 1)
		
		if dir == path[1] then--dir is same as previous direction
			samedir = samedir+1--as long as the direction is same, increment a counter eg 2e 3e 4e until direction change			
		elseif samedir == 1 then--direction changed, single direction
    	if es[dir] then
    		run = run..es[dir]
    	else--only append ;run when direction was not a member of es[dir]
        if path[1] and path[2] then
        	if es[path[1]] and es[path[2]] then
        		run = run..";"..dir..";run "
        	else
        		run = run..";"..dir..";"
        	end
        else
        	run = run..";"..dir..";"
        end				
    	end			
		else--direction changed multiple in direction eg 2e 3e 4e		
    	if es[dir] then
    		run = run..samedir..es[dir]--no ; or semi colon, this one can be continuance
    	else--only append ;run when direction was not a member of es[dir]
				run = run..";run "..samedir..dir..";run "
    	end
			samedir = 1
		end
  end--while path[1]	
	run = string.gsub(run,";;",";")
	--display(run)
	return run
end

function showSpeedWalk(startID,toID)
	run = buildSpeedWalk(tonumber(startID),tonumber(toID))
	echo("\n"..run)
end

function doSpeedWalk()
	run = buildSpeedWalk()
	display(run)
	send(run)
end

function aard.map:getAllExits(room_id)
  local exits = getRoomExits(room_id)
  local sexits = getSpecialExitsSwap(room_id)
  return aard.map:concatTables(exits, sexits)
end

function aard.map:concatTables(table1, table2)
  local output = {}
  for i,v in pairs(table1) do
    output[i] = v
  end
  for i,v in pairs(table2) do
    output[i] = v
  end
  return output
end
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>areas</name>
					<packageName></packageName>
					<script>-- Handles all zone related functions

function aard.map:resetZone(zone_name)
  local zone_found, zone_id = aard.map:isKnownZone(zone_name)

  if not zone_found then
    aard.log:error("Zone not found - can't reset")
  else
    local rooms = getAreaRooms(zone_id)

    if not rooms then
      aard.log:info("No rooms to remove in "..zone_name)
      return
    end

    for room_name, room_id in pairs(rooms) do
      deleteRoom(room_id)
    end
    aard.log:info("Removed all rooms from zone "..zone_name)
  end
end

function aard.map:isKnownZone(zone_name)
  local zones = getAreaTable()
  local zone_found = false
  local found_zone_id = nil
  
  for known_zone_name, zone_id in pairs(zones) do
    if known_zone_name == zone_name then
      zone_found = true
      found_zone_id = zone_id
      aard.log:debug("Found zone as id "..zone_id)
      break
    end
  end

  
  return zone_found, found_zone_id

end

function aard.map:createZone(new_zone_name)
  local new_zone_id = nil

  if not aard.map:isKnownZone() then
    new_zone_id = addAreaName(new_zone_name)
    aard.log:debug("New zone "..new_zone_name.." created with id: "..new_zone_id)
  else
    aard.log:debug("Zone already exists, not creating new zone")
  end

  return new_zone_id
end

function aard.map:getZoneId(zone_name)
  local found, zone_id = aard.map:isKnownZone(zone_name)
  if not found then
    zone_id = aard.map:createZone(zone_name)
  end

  return zone_id
end

function aard.map:setZone(zone_name)
  
  -- Set this zone as the active zone
  local zone_id = aard.map:getZoneId(zone_name)
  if zone_id then
    aard.map.current_zone = zone_name
  else
    aard.map:error("Failed to set zone!")
  end
  aard.log:debug("Current zone is now: "..aard.map.current_zone)
	aard.newzone = true
end
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>exits</name>
					<packageName></packageName>
					<script>aard.CARDINAL_EXITS_LONG = {"north", "south", "east", "west", "northeast", "northwest", "southeast", "southwest", "up", "down"}

-- NOTE: Ordering reflects mudlet defaults for converting exits to numeric values
aard.CARDINAL_EXITS_SHORT = {"n", "ne", "nw", "e", "w", "s", "se", "sw", "u", "d"}

aard.reverse = {6,8,7,5,4,1,3,2,10,9}

aard.reverse_dirs = {
		n = "s", s = "n", w = "e", e = "w", u = "d", d = "u", nw = "se", ne = "sw", sw = "ne", se = "nw",
    north = "south", south = "north", west = "east", east = "west", up = "down",
    down = "up", northwest = "southeast", northeast = "southwest", southwest = "northeast",
    southeast = "northwest", ["in"] = "out", out = "in",
}

aard.CARDINAL_EXITS_SHRINK = {north = "n", south = "s", east = "e", west = "w", northeast = "ne", northwest = "nw", southeast = "se", southwest = "sw", up = "u", down = "d"}

aard.CARDINAL_EXITS_EXPAND = {n = "north", s = "south", e = "east", w = "west", ne = "northeast", nw = "northwest", se = "southeast", sw = "southwest", u = "up", d = "down"}

function aard.map:getExitNum(dir)
  if not aard.map:isCardinalExit(dir) then
    aard.log:error("Can't get an exit number for a non-cardinal direction!")
    return
  end
  local exit = aard.map:getShortExit(dir)
  for k,v in pairs(aard.CARDINAL_EXITS_SHORT) do
    if exit == v then
      return k
    end
  end

  aard.log:error("Unable to find exit number for direction "..exit)
end

function aard.map:isCardinalExit(command)
  local isCardinal = false

  if table.contains(aard.CARDINAL_EXITS_LONG, command) or table.contains(aard.CARDINAL_EXITS_SHORT, command) then
    isCardinal = true
  end

  return isCardinal
end

function aard.map:getShortExit(command)
  if table.contains(aard.CARDINAL_EXITS_SHORT, command) then
    return command
  elseif table.contains(aard.CARDINAL_EXITS_LONG, command) then
    
    return aard.CARDINAL_EXITS_SHRINK[command]
  end
end

function aard.map:connectExits(room_data,extraRooms)
  local exits = room_data.info.exits
  local room_id = room_data.info.num
  
  for direction, room in pairs(exits) do-- this is where exits are scanned
    local dir_num = aard.map:getExitNum(direction)
    if roomExists(room) then
      aard.log:debug("Room " .. room .. " exists, connecting room " .. room_id .. " stubs")
      setExitStub(room_id, dir_num, true)
      --aard.log:debug("room_id: " .. room_id .. " room: " .. room .. " dir_num: " .. dir_num .. " reverse_dir: " .. aard.reverse[dir_num])
      setExit(room_id, room, dir_num)
      local stubs = getExitStubs(room_id)
--      if stubs and table.contains(stubs, dir_num) then
--        aard.log:debug("Removing stub in dir "..dir_num)
--        setExitStub(room_id, dir_num, 0)
--      end
    else
			if extraRooms == true then
				aard.map:createUnexploredRoom(direction, room)
			end
      aard.log:debug("Unexplored exit, creating stub in direction "..dir_num)
      setExitStub(room_id, dir_num, true)
    end
  end
  aard.log:debug("Leaving connectExits()") 
end

function aard.map:connectSpecialExits()
  if not aard.map:isCardinalExit(aard.command) 
    and aard.command ~= "l" 
    and aard.command ~= "look" 
    and aard.command ~= "recall" 
		and aard.command ~= "home" 
		and not string.match(aard.command, "dual") --dual wielding after using aardwolf amulet portal is not a portal!
		and not string.match(aard.command, "run") then--run/runto is not a portal command!
    aard.log:debug("Saw special exit command ("..aard.command.."), linking to prior room")
		aard.audioAlert("Alert")

    local special_exits = getSpecialExits(gmcp.room.info.num)
    if not table.contains(special_exits, aard.command) then
      addSpecialExit(aard.map.prior_room, gmcp.room.info.num, aard.command)
    end
  end
end


</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>sectors</name>
					<packageName></packageName>
					<script>function aard.map:setCustomColors()

	local r,g,b
	aard.log:debug("Setting color environment")

	-- Must remap mud-specified IDs to be in non-ANSI ranges (0-15),
	-- otherwise colors won't function correctly
	for k,v in pairs(gmcp.room.sectors.sectors) do
		aard.map.terrain[v.name] = v.id+16
	end

	--display(aard.map.terrain)

	-- Roads --
	r,g,b = unpack(color_table.DarkGoldenrod)
	setCustomEnvColor(aard.map.terrain["road_eastwest"], r,g,b, 255)
	r,g,b = unpack(color_table.DarkGoldenrod)
	setCustomEnvColor(aard.map.terrain["road"], r,g,b, 255)
	r,g,b = unpack(color_table.SaddleBrown)
	setCustomEnvColor(aard.map.terrain["bridge"], r,g,b, 255)
	r,g,b = unpack(color_table.burlywood)
	setCustomEnvColor(aard.map.terrain["road_crossroads"], r,g,b, 255)
	r,g,b = unpack(color_table.burlywood)
	setCustomEnvColor(aard.map.terrain["crossroad_nw"], r,g,b, 255)
	r,g,b = unpack(color_table.burlywood)
	setCustomEnvColor(aard.map.terrain["crossroad_se"], r,g,b, 255)
	r,g,b = unpack(color_table.burlywood)
	setCustomEnvColor(aard.map.terrain["crossroad_ews"], r,g,b, 255)
	r,g,b = unpack(color_table.DarkGoldenrod)
	setCustomEnvColor(aard.map.terrain["smallroad"], r,g,b, 255)
	r,g,b = unpack(color_table.DarkGoldenrod)
	setCustomEnvColor(aard.map.terrain["smallroad_ew"], r,g,b, 255)
	r,g,b = unpack(color_table.tan)
	setCustomEnvColor(aard.map.terrain["trail_ew"], r,g,b, 255)

	-- Misc --
	r,g,b = unpack(color_table.light_gray)
	setCustomEnvColor(aard.map.terrain["inside"], r,g,b, 255)
	r,g,b = unpack(color_table.LightCoral)
	setCustomEnvColor(aard.map.terrain["city"], r,g,b, 255)
	r,g,b = unpack(color_table.slate_grey)
	setCustomEnvColor(aard.map.terrain["unused"], r,g,b, 255)
	r,g,b = unpack(color_table.maroon )
	setCustomEnvColor(aard.map.terrain["Mudschool"], r,g,b, 255)
	r,g,b = unpack(color_table.dim_gray)
	setCustomEnvColor(aard.map.terrain["areaexit"], r,g,b, 255)
	r,g,b = unpack(color_table.plum)
	setCustomEnvColor(aard.map.terrain["castle"], r,g,b, 255)
	r,g,b = unpack(color_table.light_pink )
	setCustomEnvColor(aard.map.terrain["pillar"], r,g,b, 255)
	r,g,b = unpack(color_table.medium_purple)
	setCustomEnvColor(aard.map.terrain["temple"], r,g,b, 255)
	r,g,b = unpack(color_table.orange)
	setCustomEnvColor(aard.map.terrain["shop"], r,g,b, 255)
	r,g,b = unpack(color_table.red)
	setCustomEnvColor(aard.map.terrain["clanexit"], r,g,b, 255)
	r,g,b = unpack(color_table.dim_gray)
	setCustomEnvColor(aard.map.terrain["chessblack"], r,g,b, 255)
	r,g,b = unpack(color_table.white)
	setCustomEnvColor(aard.map.terrain["chesswhite"], r,g,b, 255)
	r,g,b = unpack(color_table.yellow_green )
	setCustomEnvColor(aard.map.terrain["lottery"], r,g,b, 255)
	r,g,b = unpack(color_table.yellow)
	setCustomEnvColor(aard.map.terrain["alley"], r,g,b, 255)
	r,g,b = unpack(color_table.linen)
	setCustomEnvColor(aard.map.terrain["office"], r,g,b, 255)
	r,g,b = unpack(color_table.DodgerBlue)
	setCustomEnvColor(aard.map.terrain["electric"], r,g,b, 255)
	r,g,b = unpack(color_table.DarkSlateBlue)
	setCustomEnvColor(aard.map.terrain["well"], r,g,b, 255)
	r,g,b = unpack(color_table.maroon)
	setCustomEnvColor(aard.map.terrain["bloodyhall"], r,g,b, 255)
	r,g,b = unpack(color_table.firebrick)
	setCustomEnvColor(aard.map.terrain["bloodyroom"], r,g,b, 255)
	r,g,b = unpack(color_table.MediumOrchid)
	setCustomEnvColor(aard.map.terrain["palace_room"], r,g,b, 255)
	r,g,b = unpack(color_table.SaddleBrown)
	setCustomEnvColor(aard.map.terrain["ship"], r,g,b, 255)
	r,g,b = unpack(color_table.LightGoldenrod)
	setCustomEnvColor(aard.map.terrain["hut"], r,g,b, 255)
	r,g,b = unpack(color_table.red)
	setCustomEnvColor(aard.map.terrain["redcarpet"], r,g,b, 255)
	r,g,b = unpack(color_table.DarkSlateGray)
	setCustomEnvColor(aard.map.terrain["city_underground"], r,g,b, 255)
	r,g,b = unpack(color_table.LightGoldenrod)
	setCustomEnvColor(aard.map.terrain["cabin"], r,g,b, 255)
	r,g,b = unpack(color_table.slate_grey)
	setCustomEnvColor(aard.map.terrain["hallway"], r,g,b, 255)
	r,g,b = unpack(color_table.dim_gray)
	setCustomEnvColor(aard.map.terrain["stairs"], r,g,b, 255)
	r,g,b = unpack(color_table.magenta )
	setCustomEnvColor(aard.map.terrain["aylorcity"], r,g,b, 255)
	r,g,b = unpack(color_table.aquamarine)
	setCustomEnvColor(aard.map.terrain["ruins"], r,g,b, 255)

	r,g,b = unpack(color_table.LightGrey)
	setCustomEnvColor(aard.map.terrain["graveyard"], r,g,b, 255)
	r,g,b = unpack(color_table.LightSlateGrey)
	setCustomEnvColor(aard.map.terrain["crypt"], r,g,b, 255)

	-- Weather/Environment --
	r,g,b = unpack(color_table.alice_blue)
	setCustomEnvColor(aard.map.terrain["mist"], r,g,b, 255)
	r,g,b = unpack(color_table.snow)
	setCustomEnvColor(aard.map.terrain["snow"], r,g,b, 255)
	r,g,b = unpack(color_table.slate_grey)
	setCustomEnvColor(aard.map.terrain["dark"], r,g,b, 255)
	r,g,b = unpack(color_table.mint_cream)
	setCustomEnvColor(aard.map.terrain["air"], r,g,b, 255)
	r,g,b = unpack(color_table.slate_grey)
	setCustomEnvColor(aard.map.terrain["moon"], r,g,b, 255)
	r,g,b = unpack(color_table.light_grey)
	setCustomEnvColor(aard.map.terrain["tornado"], r,g,b, 255)
	r,g,b = unpack(color_table.DarkKhaki)
	setCustomEnvColor(aard.map.terrain["dustdevil"], r,g,b, 255)
	r,g,b = unpack(color_table.white_smoke)
	setCustomEnvColor(aard.map.terrain["wind1"], r,g,b, 255)
	r,g,b = unpack(color_table.alice_blue)
	setCustomEnvColor(aard.map.terrain["wind2"], r,g,b, 255)
	r,g,b = unpack(color_table.steel_blue)
	setCustomEnvColor(aard.map.terrain["lightning"], r,g,b, 255)
	r,g,b = unpack(color_table.cyan)
	setCustomEnvColor(aard.map.terrain["rain"], r,g,b, 255)
	r,g,b = unpack(color_table.gold)
	setCustomEnvColor(aard.map.terrain["sun"], r,g,b, 255)
	r,g,b = unpack(color_table.snow)
	setCustomEnvColor(aard.map.terrain["cloud1"], r,g,b, 255)
	r,g,b = unpack(color_table.light_grey)
	setCustomEnvColor(aard.map.terrain["cloud2"], r,g,b, 255)
	r,g,b = unpack(color_table.gray)
	setCustomEnvColor(aard.map.terrain["cloud3"], r,g,b, 255)
	r,g,b = unpack(color_table.DeepPink)
	setCustomEnvColor(aard.map.terrain["rainbow"], r,g,b, 255)

	-- Outdoors --

	r,g,b = unpack(color_table.papaya_whip)
	setCustomEnvColor(aard.map.terrain["plain"], r,g,b, 255)
	r,g,b = unpack(color_table.yellow_green)
	setCustomEnvColor(aard.map.terrain["field"], r,g,b, 255)
	r,g,b = unpack(color_table.LawnGreen)
	setCustomEnvColor(aard.map.terrain["field2"], r,g,b, 255)
	r,g,b = unpack(color_table.yellow_green)
	setCustomEnvColor(aard.map.terrain["field3"], r,g,b, 255)
	r,g,b = unpack(color_table.green)
	setCustomEnvColor(aard.map.terrain["field4"], r,g,b, 255)
	r,g,b = unpack(color_table.dark_sea_green)
	setCustomEnvColor(aard.map.terrain["dead_field"], r,g,b, 255)
	r,g,b = unpack(color_table.bisque)
	setCustomEnvColor(aard.map.terrain["ashen_field"], r,g,b, 255)
	r,g,b = unpack(color_table.ForestGreen)
	setCustomEnvColor(aard.map.terrain["forest"], r,g,b, 255)
	r,g,b = unpack(color_table.OliveDrab)
	setCustomEnvColor(aard.map.terrain["dead_forest"], r,g,b, 255)
	r,g,b = unpack(color_table.MediumSpringGreen)
	setCustomEnvColor(aard.map.terrain["hills"], r,g,b, 255)
	r,g,b = unpack(color_table.RosyBrown)
	setCustomEnvColor(aard.map.terrain["mountain"], r,g,b, 255)
	r,g,b = unpack(color_table.thistle)
	setCustomEnvColor(aard.map.terrain["mountain_cyan"], r,g,b, 255)
	r,g,b = unpack(color_table.moccasin)
	setCustomEnvColor(aard.map.terrain["desert"], r,g,b, 255)
	r,g,b = unpack(color_table.sandy_brown)
	setCustomEnvColor(aard.map.terrain["quicksand"], r,g,b, 255)
	r,g,b = unpack(color_table.DarkSlateGray)
	setCustomEnvColor(aard.map.terrain["underground"], r,g,b, 255)
	r,g,b = unpack(color_table.firebrick)
	setCustomEnvColor(aard.map.terrain["volcano"], r,g,b, 255)
	r,g,b = unpack(color_table.dark_orange)
	setCustomEnvColor(aard.map.terrain["cave"], r,g,b, 255)
	r,g,b = unpack(color_table.maroon)
	setCustomEnvColor(aard.map.terrain["fiery_cave"], r,g,b, 255)
	r,g,b = unpack(color_table.purple)
	setCustomEnvColor(aard.map.terrain["dungeon"], r,g,b, 255)
	r,g,b = unpack(color_table.LightGoldenrod)
	setCustomEnvColor(aard.map.terrain["beach"], r,g,b, 255)
	r,g,b = unpack(color_table.pale_goldenrod)
	setCustomEnvColor(aard.map.terrain["shore"], r,g,b, 255)
	r,g,b = unpack(color_table.green)
	setCustomEnvColor(aard.map.terrain["jungle"], r,g,b, 255)
	r,g,b = unpack(color_table.OliveDrab)
	setCustomEnvColor(aard.map.terrain["dead_jungle"], r,g,b, 255)
	r,g,b = unpack(color_table.OliveDrab)
	setCustomEnvColor(aard.map.terrain["swamp"], r,g,b, 255)
	r,g,b = unpack(color_table.light_grey)
	setCustomEnvColor(aard.map.terrain["rocks"], r,g,b, 255)

	r,g,b = unpack(color_table.LightCyan)
	setCustomEnvColor(aard.map.terrain["ice"], r,g,b, 255)
	r,g,b = unpack(color_table.light_blue)
	setCustomEnvColor(aard.map.terrain["insideice"], r,g,b, 255)
	r,g,b = unpack(color_table.turquoise)
	setCustomEnvColor(aard.map.terrain["icemount"], r,g,b, 255)
	r,g,b = unpack(color_table.pale_turquoise)
	setCustomEnvColor(aard.map.terrain["icehills"], r,g,b, 255)

	r,g,b = unpack(color_table.DarkOrchid)
	setCustomEnvColor(aard.map.terrain["flowers1"], r,g,b, 255)
	r,g,b = unpack(color_table.MediumPurple)
	setCustomEnvColor(aard.map.terrain["flowers2"], r,g,b, 255)

	-- Water --
	r,g,b = unpack(color_table.cornflower_blue)
	setCustomEnvColor(aard.map.terrain["waterswim"], r,g,b, 255)
	r,g,b = unpack(color_table.medium_slate_blue)
	setCustomEnvColor(aard.map.terrain["waternoswim"], r,g,b, 255)
	r,g,b = unpack(color_table.deep_sky_blue)
	setCustomEnvColor(aard.map.terrain["ocean"], r,g,b, 255)
	r,g,b = unpack(color_table.dodger_blue)
	setCustomEnvColor(aard.map.terrain["ocean2"], r,g,b, 255)
	r,g,b = unpack(color_table.medium_blue)
	setCustomEnvColor(aard.map.terrain["ocean3"], r,g,b, 255)
	r,g,b = unpack(color_table.midnight_blue)
	setCustomEnvColor(aard.map.terrain["ocean4"], r,g,b, 255)
	r,g,b = unpack(color_table.NavyBlue)
	setCustomEnvColor(aard.map.terrain["underwater"], r,g,b, 255)
	r,g,b = unpack(color_table.medium_aquamarine)
	setCustomEnvColor(aard.map.terrain["river"], r,g,b, 255)
	r,g,b = unpack(color_table.cornflower_blue)
	setCustomEnvColor(aard.map.terrain["afountain"], r,g,b, 255)
	r,g,b = unpack(color_table.cornflower_blue)
	setCustomEnvColor(aard.map.terrain["fountain"], r,g,b, 255)
	r,g,b = unpack(color_table.purple)
	setCustomEnvColor(aard.map.terrain["chaos_sea"], r,g,b, 255)

	-- Library --
	r,g,b = unpack(color_table.OldLace)
	setCustomEnvColor(aard.map.terrain["archive"], r,g,b, 255)
	r,g,b = unpack(color_table.DarkKhaki)
	setCustomEnvColor(aard.map.terrain["bookshelves"], r,g,b, 255)
	r,g,b = unpack(color_table.DarkKhaki)
	setCustomEnvColor(aard.map.terrain["bookshelves_ns"], r,g,b, 255)

	-- Hell --
	r,g,b = unpack(color_table.maroon)
	setCustomEnvColor(aard.map.terrain["hellinside"], r,g,b, 255)
	r,g,b = unpack(color_table.violet_red)
	setCustomEnvColor(aard.map.terrain["hellhall"], r,g,b, 255)
	r,g,b = unpack(color_table.firebrick)
	setCustomEnvColor(aard.map.terrain["hellfountain"], r,g,b, 255)
	r,g,b = unpack(color_table.red)
	setCustomEnvColor(aard.map.terrain["hell1"], r,g,b, 255)
	r,g,b = unpack(color_table.tomato)
	setCustomEnvColor(aard.map.terrain["hell2"], r,g,b, 255)
	r,g,b = unpack(color_table.OrangeRed)
	setCustomEnvColor(aard.map.terrain["hell3"], r,g,b, 255)
	r,g,b = unpack(color_table.coral)
	setCustomEnvColor(aard.map.terrain["hell4"], r,g,b, 255)

	-- Space --
	r,g,b = unpack(color_table.light_grey)
	setCustomEnvColor(aard.map.terrain["space1"], r,g,b, 255)
	r,g,b = unpack(color_table.gray)
	setCustomEnvColor(aard.map.terrain["space2"], r,g,b, 255)
	r,g,b = unpack(color_table.dim_gray)
	setCustomEnvColor(aard.map.terrain["space3"], r,g,b, 255)
	r,g,b = unpack(color_table.dark_slate_grey)
	setCustomEnvColor(aard.map.terrain["space4"], r,g,b, 255)

end
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>areaIndex</name>
					<packageName></packageName>
					<script>aard.areaInfo = {
["A Bad Trip"]={zone="badtrip",min=0,max=0},
["Alagh, the Blood Lands"]={zone="alagh",min=0,max=0},
["Gelidus"]={zone="gelidus",min=0,max=0},
["The Continent of Mesolar"]={zone="mesolar",min=0,max=0},
["The Dark Continent, Abend"]={zone="abend",min=0,max=0},
["The Southern Ocean"]={zone="southern",min=0,max=0},
["The Uncharted Oceans"]={zone="uncharted",min=0,max=0},
["The Warzone"]={zone="warzone",min=0,max=0},
["Vidblain, the Ever Dark"]={zone="vidblain",min=0,max=0},
["The Grand City of Aylor"]={zone="aylor",min=1,max=201},
["The Aylorian Academy"]={zone="academy",min=1,max=201},
["Kimr's Farm"]={zone="farm",min=1,max=5},
["Lowlands Paradise '96"]={zone="lowlands",min=1,max=5},
["The Forest of Li'Dnesh"]={zone="lidnesh",min=1,max=10},
["The Path of the Believer"]={zone="believer",min=1,max=10},
["Tournament Camps"]={zone="camps",min=1,max=10},
["Art of Melody"]={zone="melody",min=1,max=15},
["The Call of Heroes"]={zone="callhero",min=1,max=15},
["Hotel Orlando"]={zone="orlando",min=1,max=20},
["Land of Legend"]={zone="legend",min=1,max=20},
["Sen'narre Lake"]={zone="sennarre",min=1,max=20},
["The Land of the Beer Goblins"]={zone="beer",min=1,max=20},
["Gallows Hill"]={zone="gallows",min=1,max=30},
["Jotunheim"]={zone="jotun",min=1,max=40},
["Chaprenula's Laboratory"]={zone="lab",min=5,max=15},
["Siren's Oasis Resort"]={zone="sirens",min=5,max=15},
["The Fire Swamp"]={zone="fireswamp",min=5,max=15},
["The First Ascent"]={zone="ascent",min=5,max=15},
["The Graveyard"]={zone="graveyard",min=5,max=15},
["Den of Thieves"]={zone="thieves",min=5,max=20},
["Giant's Pet Store"]={zone="petstore",min=5,max=20},
["Sundered Vale"]={zone="vale",min=5,max=20},
["The Amusement Park"]={zone="amusement",min=5,max=20},
["The Chessboard"]={zone="chessboard",min=5,max=20},
["Child's Play"]={zone="childsplay",min=5,max=25},
["Dortmund"]={zone="dortmund",min=5,max=25},
["Canyon Memorial Hospital"]={zone="canyon",min=5,max=30},
["Fantasy Fields"]={zone="fantasy",min=5,max=30},
["Kerofk"]={zone="kerofk",min=5,max=30},
["The Gauntlet"]={zone="gauntlet",min=5,max=30},
["The Wood Elves of Nalondir"]={zone="woodelves",min=5,max=30},
["A Magical Hodgepodge"]={zone="hodgepodge",min=5,max=35},
["Aardwolf Zoological Park"]={zone="zoo",min=5,max=35},
["Brightsea and Glimmerdim"]={zone="glimmerdim",min=5,max=35},
["Cloud City of Gnomalin"]={zone="gnomalin",min=5,max=35},
["Olde Worlde Carnivale"]={zone="carnivale",min=5,max=35},
["The Infestation"]={zone="infest",min=5,max=35},
["The Shadows of Minos"]={zone="minos",min=5,max=35},
["The Town of Solan"]={zone="solan",min=5,max=35},
["War of the Wizards"]={zone="wizards",min=5,max=35},
["Hatchling Aerie"]={zone="hatchling",min=5,max=45},
["Adventures in Sendhia"]={zone="sendhian",min=5,max=50},
["Swordbreaker's Hoard"]={zone="hoard",min=5,max=50},
["The Chasm and The Catacombs"]={zone="chasm",min=10,max=20},
["Warrior's Training Camp"]={zone="wtc",min=10,max=20},
["All in a Fayke Day"]={zone="fayke",min=10,max=30},
["Guardian's Spyre of Knowledge"]={zone="spyreknow",min=10,max=30},
["Sho'aram, Castle in the Sand"]={zone="sandcastle",min=10,max=30},
["Fort Terramire"]={zone="terramire",min=10,max=35},
["New Thalos"]={zone="newthalos",min=10,max=35},
["Storm Mountain"]={zone="storm",min=10,max=35},
["Jungles of Verume"]={zone="verume",min=10,max=40},
["Wildwood"]={zone="wildwood",min=10,max=40},
["Dhal'Gora Outlands"]={zone="dhalgora",min=10,max=50},
["The Temple of Shouggoth"]={zone="shouggoth",min=10,max=50},
["Keep of the Kobaloi"]={zone="kobaloi",min=10,max=201},
["Aerial City of Cineko"]={zone="cineko",min=15,max=30},
["Kul Tiras"]={zone="kultiras",min=15,max=30},
["Necromancers' Guild"]={zone="necro",min=15,max=30},
["The UnderDark"]={zone="underdark",min=15,max=50},
["Realm of the Zodiac"]={zone="zodiac",min=20,max=30},
["Atlantis"]={zone="atlantis",min=20,max=40},
["Death's Manor"]={zone="manor",min=20,max=40},
["The Fractured Lands"]={zone="fractured",min=20,max=40},
["Weather Observatory"]={zone="weather",min=20,max=40},
["The Maelstrom"]={zone="maelstrom",min=20,max=45},
["Ancient Greece"]={zone="greece",min=20,max=50},
["Kingdom of Ahner"]={zone="ahner",min=20,max=50},
["Thandeld's Conflict"]={zone="conflict",min=20,max=50},
["Sheila's Cat Sanctuary"]={zone="cats",min=25,max=35},
["Mudwog's Swamp"]={zone="mudwog",min=30,max=40},
["Cradlebrook"]={zone="cradle",min=30,max=50},
["The Coral Kingdom"]={zone="coral",min=30,max=50},
["The Labyrinth"]={zone="labyrinth",min=30,max=60},
["Kingsholm"]={zone="kingsholm",min=30,max=65},
["Gold Rush"]={zone="goldrush",min=30,max=70},
["The Imperial City of Reme"]={zone="reme",min=30,max=100},
["The Silver Volcano"]={zone="volcano",min=30,max=100},
["Descent to Hell"]={zone="hell",min=35,max=55},
["Onyx Bazaar"]={zone="bazaar",min=35,max=55},
["The Blighted Tundra of Andarin"]={zone="andarin",min=35,max=60},
["Diamond Soul Revelation"]={zone="dsr",min=35,max=85},
["The Great Salt Flats"]={zone="salt",min=40,max=50},
["Raganatittu"]={zone="raga",min=40,max=60},
["The Darkside of the Fractured Lands"]={zone="darkside",min=40,max=60},
["The Wobbly Woes of Woobleville"]={zone="wooble",min=40,max=60},
["Zangar's Demonic Grotto"]={zone="zangar",min=40,max=60},
["The Land of Oz"]={zone="landofoz",min=40,max=70},
["Paradise Lost"]={zone="paradise",min=50,max=70},
["The Flying Citadel"]={zone="citadel",min=50,max=70},
["Castle Vlad-Shamir"]={zone="vlad",min=50,max=80},
["Earth Plane 4"]={zone="earthplane",min=50,max=80},
["The Old Cathedral"]={zone="cathedral",min=50,max=80},
["Jenny's Tavern"]={zone="jenny",min=50,max=100},
["Storm Ships of Lem-Dagor"]={zone="lemdagor",min=50,max=100},
["The Yurgach Domain"]={zone="yurgach",min=50,max=100},
["Hedgehogs' Paradise"]={zone="hedge",min=60,max=80},
["Plains of Nulan'Boar"]={zone="nulan",min=60,max=80},
["The Goblin Fortress"]={zone="fortress",min=60,max=80},
["The Great City of Knossos"]={zone="knossos",min=60,max=80},
["The Killing Fields"]={zone="fields",min=60,max=80},
["The Palace of Song"]={zone="songpalace",min=60,max=80},
["The Three Pillars of Diatz"]={zone="diatz",min=60,max=80},
["Realm of Deneria"]={zone="deneria",min=60,max=85},
["The DarkLight"]={zone="darklight",min=60,max=120},
["The Ruins of Diamond Reach"]={zone="ruins",min=60,max=120},
["Rosewood Castle"]={zone="rosewood",min=60,max=150},
["Imperial Nation"]={zone="imperial",min=65,max=201},
["Aardington Estate"]={zone="aardington",min=70,max=90},
["The Tournament of Illoria"]={zone="illoria",min=70,max=90},
["Wayward Alehouse"]={zone="alehouse",min=70,max=90},
["Nenukon and the Far Country"]={zone="nenukon",min=70,max=100},
["The Relinquished Tombs"]={zone="tombs",min=70,max=100},
["Tai'rha Laym"]={zone="laym",min=70,max=110},
["The Empire of Talsa"]={zone="talsa",min=70,max=130},
["The Fabled City of Stone"]={zone="stone",min=70,max=130},
["Northstar"]={zone="northstar",min=70,max=140},
["Kobold Siege Camp"]={zone="siege",min=80,max=100},
["Snuckles Village"]={zone="snuckles",min=80,max=100},
["The Gladiator's Arena"]={zone="arena",min=80,max=100},
["The Realm of the Hawklords"]={zone="hawklord",min=80,max=100},
["Wedded Bliss"]={zone="bliss",min=80,max=100},
["Anthrox"]={zone="anthrox",min=80,max=110},
["Island of Lost Time"]={zone="losttime",min=80,max=110},
["Realm of the Firebird"]={zone="firebird",min=80,max=110},
["Deathtrap Dungeon"]={zone="deathtrap",min=80,max=130},
["Pompeii"]={zone="pompeii",min=90,max=110},
["The Scarred Lands"]={zone="scarred",min=90,max=110},
["The Monastery"]={zone="monastery",min=90,max=120},
["Dark Elf Stronghold"]={zone="stronghold",min=90,max=125},
["Elemental Chaos"]={zone="elemental",min=90,max=150},
["Halls of the Damned"]={zone="damned",min=95,max=115},
["Insanitaria"]={zone="insan",min=95,max=115},
["Ascension Bluff Nursing Home"]={zone="nursing",min=100,max=120},
["Dusk Valley"]={zone="duskvalley",min=100,max=120},
["Faerie Tales"]={zone="ft1",min=100,max=120},
["Seven Wonders"]={zone="wonders",min=100,max=120},
["Xyl's Mosaic"]={zone="xylmos",min=100,max=120},
["Masquerade Island"]={zone="masq",min=100,max=130},
["Into the Long Night"]={zone="longnight",min=100,max=200},
["Sanctity of Eternal Damnation"]={zone="sanctity",min=100,max=201},
["Gnoll's Quarry"]={zone="quarry",min=105,max=125},
["The Marshlands of Agroth"]={zone="agroth",min=105,max=125},
["Arboretum"]={zone="arboretum",min=110,max=130},
["Tairayden Peninsula"]={zone="peninsula",min=110,max=130},
["The Stuff of Shadows"]={zone="stuff",min=110,max=130},
["Living Mines of Dak'Tai"]={zone="livingmine",min=110,max=140},
["Christmas Vacation"]={zone="xmas",min=110,max=150},
["The Misty Shores of Yarr"]={zone="yarr",min=115,max=135},
["Gilda And The Dragon"]={zone="gilda",min=120,max=140},
["The Eighteenth Dynasty"]={zone="dynasty",min=120,max=140},
["The Sanguine Tavern"]={zone="sanguine",min=120,max=140},
["Verdure Estate"]={zone="verdure",min=120,max=140},
["The Slaughter House"]={zone="slaughter",min=120,max=145},
["Faerie Tales II"]={zone="ftii",min=120,max=150},
["House of Cards"]={zone="cards",min=120,max=150},
["The Archipelago of Entropy"]={zone="entropy",min=120,max=150},
["The Uprising"]={zone="uprising",min=120,max=160},
["The Broken Halls of Horath"]={zone="horath",min=120,max=170},
["The School of Horror"]={zone="sohtwo",min=120,max=175},
["The Amazon Nation"]={zone="amazon",min=120,max=201},
["Tumari's Diner"]={zone="diner",min=125,max=145},
["The Blood Opal of Rauko'ra"]={zone="raukora",min=125,max=201},
["The School of Horror"]={zone="sohtwo",min=125,max=201},
["Foolish Promises"]={zone="promises",min=130,max=140},
["The Dark Temple of Zyian"]={zone="zyian",min=130,max=150},
["The Drageran Empire"]={zone="drageran",min=130,max=150},
["Tir na nOg"]={zone="tirna",min=130,max=150},
["A Peaceful Giant Village"]={zone="village",min=130,max=160},
["The Reman Conspiracy"]={zone="remcon",min=130,max=170},
["The Mountains of Desolation"]={zone="desolation",min=130,max=175},
["The Desert Prison"]={zone="desert",min=130,max=201},
["Desert Doom"]={zone="ddoom",min=135,max=150},
["Imagi's Nation"]={zone="imagi",min=140,max=160},
["Nanjiki Ruins"]={zone="nanjiki",min=140,max=160},
["The Abyssal Caverns of Sahuagin"]={zone="sahuagin",min=140,max=160},
["The Cougarian Queendom"]={zone="cougarian",min=140,max=160},
["The Gathering Horde"]={zone="gathering",min=140,max=170},
["Unearthly Bonds"]={zone="bonds",min=140,max=170},
["The Empire of Aiighialla"]={zone="empire",min=140,max=180},
["Takeda's Warcamp"]={zone="takeda",min=140,max=201},
["Arisian Realm"]={zone="arisian",min=150,max=170},
["Winterlands"]={zone="winter",min=150,max=170},
["Battlefields of Adaldar"]={zone="adaldar",min=150,max=180},
["Sagewood Grove"]={zone="sagewood",min=150,max=180},
["Rebellion of the Nix"]={zone="rebellion",min=150,max=190},
["The Cataclysm"]={zone="cataclysm",min=150,max=201},
["The Ruins of Stormhaven"]={zone="stormhaven",min=150,max=201},
["Black Lagoon"]={zone="lagoon",min=155,max=195},
["Annwn"]={zone="annwn",min=160,max=180},
["Dread Tower"]={zone="dread",min=160,max=180},
["Helegear Sea"]={zone="helegear",min=160,max=180},
["The Covenant of Mistridge"]={zone="mistridge",min=160,max=201},
["The Witches of Omen Tor"]={zone="omentor",min=160,max=201},
["Tribal Origins"]={zone="origins",min=165,max=190},
["Avian Kingdom"]={zone="avian",min=170,max=190},
["Empyrean, Streets of Downfall"]={zone="empyrean",min=170,max=200},
["Eternal Autumn"]={zone="autumn",min=170,max=201},
["The Glamdursil"]={zone="glamdursil",min=170,max=201},
["The Tree of Life"]={zone="tol",min=170,max=201},
["Black Rose"]={zone="blackrose",min=175,max=201},
["Intrigues of Times Past"]={zone="times",min=175,max=201},
["Mount duNoir"]={zone="dunoir",min=175,max=201},
["The Deadlights"]={zone="deadlights",min=175,max=201},
["The Keep of Kearvek"]={zone="kearvek",min=175,max=201},
["Artificer's Mayhem"]={zone="mayhem",min=180,max=201},
["The Partroxis"]={zone="partroxis",min=180,max=201},
["Tanra'vea"]={zone="tanra",min=180,max=201},
["The Astral Travels"]={zone="astral",min=180,max=201},
["The Blood Sanctum"]={zone="sanctum",min=180,max=201},
["The Temple of Shal'indrael"]={zone="temple",min=180,max=201},
["Yggdrasil: The World Tree"]={zone="ygg",min=180,max=201},
["Kiksaadi Cove"]={zone="cove",min=190,max=200},
["Entrance to Hades"]={zone="hades",min=190,max=201},
["Nottingham"]={zone="nottingham",min=190,max=201},
["The Council of the Wyrm"]={zone="wyrm",min=190,max=201},
["The Icy Caldera of Mauldoon"]={zone="caldera",min=190,max=201},
["The Trouble with Gwillimberry"]={zone="gwillim",min=190,max=201},
["Crynn's Church"]={zone="crynn",min=195,max=201},
["Umari's Castle"]={zone="umari",min=195,max=201},
["A Genie's Last Wish"]={zone="geniewish",min=200,max=201},
["Afterglow"]={zone="afterglow",min=200,max=201},
["Andolor's Ocean Adventure Park"]={zone="oceanpark",min=200,max=201},
["Gypsy Caravan"]={zone="caravan",min=200,max=201},
["Icefall"]={zone="icefall",min=200,max=201},
["Journey to the Inferno"]={zone="inferno",min=200,max=201},
["Ketu Uplands"]={zone="ketu",min=200,max=201},
["Nebulous Horizon"]={zone="horizon",min=200,max=201},
["Oradrin's Chosen"]={zone="oradrin",min=200,max=201},
["Realm of the Sacred Flame"]={zone="firenation",min=200,max=201},
["The Cracks of Terra"]={zone="terra",min=200,max=201},
["The Earth Lords"]={zone="earthlords",min=200,max=201},
["The Nyne Woods"]={zone="nynewoods",min=200,max=201},
["The Titans' Keep"]={zone="titan",min=200,max=201},
["The Were Wood"]={zone="werewood",min=200,max=201},
["Qong"]={zone="qong",min=200,max=220},
["Crossroads of Fortune"]={zone="fortune",min=201,max=201},
["Ookushka Garrison"]={zone="ooku",min=201,max=201},
["Radiance Woods"]={zone="radiance",min=201,max=201},
["The Curse of the Midnight Fens"]={zone="fens",min=201,max=201},
["The Dungeon of Doom"]={zone="dundoom",min=201,max=201},
["The Realm of Infamy"]={zone="infamy",min=201,max=201},
["Winds of Fate"]={zone="winds",min=201,max=201},
["A Clearing in the Woods"]={zone="romani",min=210,max=210},
["Cathedral of the Elements"]={zone="cabal",min=210,max=210},
["Dark Temple of Zhamet"]={zone="rhabdo",min=210,max=210},
["Disciples of Hassan Clan Hall"]={zone="doh",min=210,max=210},
["Dominion Clan Area"]={zone="dominion",min=210,max=210},
["Isle of Anglesey"]={zone="druid",min=210,max=210},
["Loqui Clan Area"]={zone="loqui",min=210,max=210},
["Masaki Clan Area"]={zone="masaki",min=210,max=210},
["Midgaardian Publishing House"]={zone="gaardian",min=210,max=210},
["Perdition Clan Area"]={zone="perdition",min=210,max=210},
["The Bard Clan"]={zone="bard",min=210,max=210},
["The Boot Camp"]={zone="bootcamp",min=210,max=210},
["The Collective Mind of Tao"]={zone="tao",min=210,max=210},
["The Crimson Horde Clan Hall"]={zone="crimson",min=210,max=210},
["The Crusader Clan"]={zone="crusaders",min=210,max=210},
["The Emerald Clan HQ"]={zone="emerald",min=210,max=210},
["The Fortress of Knowledge"]={zone="seekers",min=210,max=210},
["The Halls of Retribution"]={zone="retri",min=210,max=210},
["The Halls of Vanir"]={zone="vanir",min=210,max=210},
["The Ivory City"]={zone="amazonclan",min=210,max=210},
["The Legendary City of Tanelorn"]={zone="tanelorn",min=210,max=210},
["The Order of Light"]={zone="light",min=210,max=210},
["The Realm of Chaos"]={zone="chaos",min=210,max=210},
["The S.S. Hook"]={zone="hook",min=210,max=210},
["The Shadokil Guildhouse"]={zone="shadokil",min=210,max=210},
["The Stronghold of the Imperium Clan"]={zone="imperium",min=210,max=210},
["The Twinlobe Clan HQ"]={zone="twinlobe",min=210,max=210},
["The Underground Hall"]={zone="daoine",min=210,max=210},
["The White Dragon Clan"]={zone="dragon",min=210,max=210},
["The World of the Watchmen"]={zone="watchmen",min=210,max=210},
["The Xunti Cult"]={zone="xunti",min=210,max=210},
["Touchstone Cavern"]={zone="touchstone",min=210,max=210},
["Twilight Hall"]={zone="pyre",min=210,max=210},
["Immortal Homes"]={zone="immhomes",min=0,max=0},
["Aardwolf Estates 2000"]={zone="manor3",min=0,max=0},
["Prairie Village Estates"]={zone="manorville",min=0,max=0},
["Shady Acres Estates"]={zone="manorwoods",min=0,max=0},
["The Aardwolf Real Estates"]={zone="manor1",min=0,max=0},
["Mountain View Estates"]={zone="manormount",min=0,max=0},
["The Aardwolf Isle Estates"]={zone="manorisle",min=0,max=0},
["Seaside Height Estates"]={zone="manorsea",min=0,max=0},
}

--the Table below is created as a reverse index, swapping the fullname and short zone name so that reverse lookups can be performed easily.
aard.areaIndex = {}
for i, areaName in pairs(aard.areaInfo) do
	aard.areaIndex[areaName.zone] = {zone=i,min=areaName.min,max=areaName.max}
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>coordrun</name>
					<packageName></packageName>
					<script>--run 2s10e2n7e7n11e4n4e;enter hole
function vidblain(str)
  if string.match("sendhian", str) then
  	tempTimer(1,[[aard.coordrun(20286)]])
  elseif string.match("darklight", str) then
  	tempTimer(1,[[aard.coordrun(19643)]])
  elseif string.match("imperial nation", str) then
  	tempTimer(1,[[aard.coordrun(16966)]])
  else
  	echo("gt no vidblain match for: "..matches[2])
  end
end

function aard.coordrun(roomid)
	--echo("\naard.coordrun() fired.\n")--debug
  if aard.state == 3 and getRoomAreaName(getRoomArea(aard.map.seen_room)) == "vidblain" then--finished moving ready to continue
		display(aard.state)
    gotoRoom(roomid)--move from vidblain entrance to area within vidblain
  else
		display(aard.state)
    aard.crun = tempTimer(1, function () aard.coordrun(roomid) end)--still moving, spawn new instance
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>questinfo</name>
					<packageName></packageName>
					<script>function findAreaID(areaname)
	
  local list = getAreaTable()

  -- iterate over the list of areas, matching them with substring match. 
  -- if we get match a single area, then return it's ID, otherwise return
  -- 'false' and a message that there are than one are matches
  local returnid, fullareaname
  for area, id in pairs(list) do
    if area:find(areaname, 1, true) then
			--display(returnid)--debug
      --if returnid then return false, "\nmore than one area matches" end
      returnid = id; fullareaname = area
		--else try exact match
    end
		
  end
  
  --return returnid, fullareaname
	return returnid
end

function lookupAreaID(areaname)
	
  local list = getAreaTable()
	
  for area, id in pairs(list) do
    if area == areaname then
      return id--found exact match
    end		
  end
	
	return nil--did not find exact match
end

function echoRoomListArea(areaname)
  --local id, msg = findAreaID(areaname)
	--id, msg = findAreaID(areaname)
	id = areaname
  if id then
    --display(id)
		local roomlist, endresult = getAreaRooms(id), {}
		--echo("\nTESTING\n")
    -- obtain a room list for each of the room IDs we got
    for _, id in pairs(roomlist) do
      --endresult[id] = getRoomName(id)
			if getRoomName(id) == aard.qRoom then
				endresult[id] = getRoomName(id)
			end
    end
  
    -- now display something half-decent looking
    --cecho(string.format("\nList of all rooms in %s (%d):\n", msg, table.size(endresult)))
		local count = 1
    for roomid, roomname in pairs(endresult) do
			echo(" ")
			hechoLink("|cFF0000"..count, [[gotoRoom(]]..roomid..[[)]], "runto "..roomid, true)
			count = count + 1
    end
		
  elseif not id and msg then
    echo("\nID not found; " .. msg)
  else
    echo("No areas matched the query.")
  end
end

function echoRoomListAreaSearch(areaname)
  --local id, msg = findAreaID(areaname)
	--id = findAreaID(areaname)
	id = lookupAreaID(areaname)
  if id then
    local roomlist, endresult = getAreaRooms(id), {}
  
    -- obtain a room list for each of the room IDs we got
    for _, id in pairs(roomlist) do
      --endresult[id] = getRoomName(id)
			if getRoomName(id) == aard.qRoom then
				endresult[id] = getRoomName(id)
			end
    end
  
    -- now display something half-decent looking
    --cecho(string.format("\nList of all rooms in %s (%d):\n", msg, table.size(endresult)))
		local count = 1
    for roomid, roomname in pairs(endresult) do
			echo(" ")
			hechoLink("|cFF0000"..roomid, [[gotoRoom(]]..roomid..[[)]], "runto "..roomname, true)
    end
		
  --elseif not id and msg then
	elseif not id then
    echo("\nID not found; " .. areaname)
  else
    echo("No areas matched the query.")
  end
end

function echoRoomList(what)
	ids = aard.searchRoomExact(what)--creates and uses cache	
	--display(ids)
	local count = 1
  for roomid, roomname in pairs(ids) do		
		--exclude areas with max level of 0, those are continents or special areas
		if aard.areaIndex[getRoomAreaName(getRoomArea(roomid))].max &gt; 0 then
		--jakejake
			if aard.cpLevel &gt;= aard.areaIndex[getRoomAreaName(getRoomArea(roomid))].min and aard.cpLevel &lt;= aard.areaIndex[getRoomAreaName(getRoomArea(roomid))].max then
    		echo(" ")
    		hechoLink("|cFF0000"..count, [[gotoRoom(]]..roomid..[[)]], "runto "..roomid, true)
    		count = count + 1
  			--echo(aard.areaIndex[getRoomAreaName(getRoomArea(roomid))].min.."-"..aard.areaIndex[getRoomAreaName(getRoomArea(roomid))].max)
			end
		end
  end
end
</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>gmcp</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>onChannel</name>
					<packageName></packageName>
					<script>local path = getMudletHomeDir()
path = path:gsub("[\\/]","/")

-- Derive spoken definitions from sound definitions
GUIframe.speech = {}

GUIframe.sounds = {
  Alert = [[/aardwolf/alert.wav]],
  Quest = [[/aardwolf/alert.wav]],
  Gquest = [[/aardwolf/alert.wav]],
  Clan = [[/aardwolf/clan.wav]],
  Friend = [[/aardwolf/friend.wav]],
  Group = [[/aardwolf/group.wav]],
  Say = [[/aardwolf/say.wav]],
  Spouse = [[/aardwolf/spouse.wav]],
  Tell = [[/aardwolf/tell.wav]],
}

-- Update paths for sound files and define default spoken announcements
for alertType, _ in pairs(GUIframe.sounds) do
  GUIframe.sounds[alertType] = path .. GUIframe.sounds[alertType]:gsub("[\\/]","/")
  GUIframe.speech[alertType] = alertType
end

-- Override speech announcements, if desired
GUIframe.speech["Quest"] = "Quest ready"
GUIframe.speech["Gquest"] = "Global quest starting"

--refactor associative table for sounds, loop them
if not (io.exists(GUIframe.sounds["Alert"]) and io.exists(GUIframe.sounds["Clan"])) then
    aard.log:error("Unable to locate sound files, please check path and configuration.")
end

function chanpEcho(chan,msg)
	decho(chan,msg.."\n")
	decho("Private",msg .. "\n")--send a copy to "Private" tab
	decho("All",msg .. "\n")--send a copy to "All" tab
	local atab = GUIframe.configs.activeLast
	if atab ~= chan and atab ~= "Private" and atab ~= "All" then
		GUIframe.configs.tabsToBlink[chan] = true--set the tab to be blinked
		GUIframe.configs.tabsToBlink["Private"] = true--set the tab to be blinked
	end
	if not string.find(msg,gmcp.char.base.name..": ") then
    aard.audioAlert(chan)
	end
end


function onChannel()
  local comm_data = gmcp.comm.channel
	local chan = gmcp.comm.channel.chan
	local replaced = ansi2decho(comm_data.msg)
	--display(comm_data)
	
	if chan == "tell" then
		chanpEcho("Tell",replaced)
	elseif chan == "say" then
		chanpEcho("Say",replaced)
	elseif chan == "gtell" then
		chanpEcho("Group",replaced)
	elseif chan == "ftalk" then
		chanpEcho("Friend",replaced)	
	elseif chan == "clantalk" then
		chanpEcho("Clan",replaced)
	elseif chan == "spouse" then
		chanpEcho("Spouse",replaced)
	else
		decho("All",replaced .. "\n")--send a copy to "All" tab
	end
end</script>
					<eventHandlerList>
						<string>gmcp.comm.channel</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>onSectors</name>
					<packageName></packageName>
					<script>function onSectors()
  if(aard.map.sectors) then return end

  aard.map:setCustomColors()
  aard.map.sectors = true
end
</script>
					<eventHandlerList>
						<string>gmcp.room.sectors</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>onStatus</name>
					<packageName></packageName>
					<script>function onStatus()
	aard.state = gmcp.char.status.state
	aard.ename, aard.epct = gmcp.char.status.enemy, gmcp.char.status.enemypct or 0
	aard.tnl = gmcp.char.status.tnl

	if aard.cpLevel then
  	if aard.noexp == "" and tonumber(gmcp.char.status.level) &gt; tonumber(aard.cpLevel) and tonumber(aard.config["cpexp"]) &gt; tonumber(aard.tnl) and tonumber(gmcp.char.status.level) &lt;= tonumber(aard.config["cplvl"]) then
      aard.noexp = " *NO EXP*"
      aard.qTimeNOexp()
  		send("noexp")
  	end
	end

	local align = gmcp.char.status.align	
	if aard.ename == "" then
		aard.ename = "enemy"
	end
	Enemy:setValue(aard.epct, 100, "&lt;b&gt; &amp;nbsp; "..aard.ename.." | "..string.format("%i", aard.epct).."%&lt;/b&gt;")	
	gStyleW = '&lt;font style="color:#ffffff"&gt;'
	gStyleR = '&lt;font style="color:#1aa41a"&gt;'
	aard.qTimeNOexp()
	if align &gt; 875 then
		GaugeFrontCSS:set("background-color","QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 "..aard.goodc1..", stop: 1 "..aard.goodc2..")")--good
		Align:setValue(align, 2500, "&lt;b&gt; &amp;nbsp; Align: "..align.."&lt;/b&gt;")
	elseif align &gt; -1 then
		GaugeFrontCSS:set("background-color","QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 "..aard.neutralc1..", stop: 1 "..aard.neutralc2..")")--neutral
		Align:setValue(align, 2500, "&lt;b&gt; &amp;nbsp; Align: "..align.."&lt;/b&gt;")
	elseif align &gt; -874 then
		GaugeFrontCSS:set("background-color","QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 "..aard.neutralc1..", stop: 1 "..aard.neutralc2..")")--neutral negative		
		Align:setValue(-1*align, 2500, "&lt;b&gt; &amp;nbsp; Align: "..align.."&lt;/b&gt;")
	else
		GaugeFrontCSS:set("background-color","QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 "..aard.evilc1..", stop: 1 "..aard.evilc2..")")--evil negative
		Align:setValue(-1*align, 2500, "&lt;b&gt; &amp;nbsp; Align: "..align.."&lt;/b&gt;")
	end
	Align.front:setStyleSheet(GaugeFrontCSS:getCSS())
end</script>
					<eventHandlerList>
						<string>gmcp.char.status</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>onGroup</name>
					<packageName></packageName>
					<script>function onGroup()
	--display(gmcp.group)
	--if not (aard.gui.init) then return end
	--local g1hp, g1mhp = 99999, 99999
	if aard.config["group"] == 0 then

		
	elseif aard.config["group"] == 1 then
  	--begin create
  	group = group or {}
  	gAlignBar = gAlignBar or {}
  	gHpBar = gHpBar or {}
  	gMnBar = gMnBar or {}
  	gMvBar = gMvBar or {}
		gDamBar = gDamBar or {}
  	
  	local barHb = 14
		local barHs = 4
  	local barW = 150
  	
  	if not gInfo then
      gInfo = Geyser.Label:new({
        name = "gInfo",
        x=minimap.x:gsub("px","")+(minimap.width:gsub("px","")-barW), y=minimap.y:gsub("px","")+minimap.height:gsub("px",""),
        width=barW, height=barHb,
        fgColor = "white",
        color = "#31363b",
      })
  	end
  	--gmcp.group.count  this value if larger than x amount could be used for alternate compact EPIC layout.
  	
  	--Does Group Exist?
  	if not gmcp.group.count then
			--echo clickable link to clear group data
			--aard.group = {}
  		gInfo:hide()
    	for i=1,50 do
    		if group[i] then
    			group[i]:hide()
  				--echo("\ngroup["..i.."]:hide()\n")
    		else
    			break--exit the loop, no containers exist beyond this index.
    		end
    	end
  	else
  		gInfo:hide()
  	end
  	
		if gmcp.group.members then
		
			aard.group = aard.group or {}
      for _, member in ipairs(gmcp.group.members) do
				aard.group[member.name] = aard.group[member.name] or {alldam=1,pheal=0}--give 1 free point of damage show the gauges initialize properly
    		--display(member.name)
    		--display(member.info)
    		if not group[_] then
      		--echo("\nNope, group ".._.." Create\n")
    			if _ == 1 then--group member containers
            group[_] = Geyser.Container:new({
            name = "group".._,
            x=0, y=0,
            width=barW, height=barHb+(3*barHs),
            },gInfo)
    			else
            group[_] = Geyser.Container:new({
            name = "group".._,
            x=0, y=barHb+(3*barHs),
            width=barW, height=barHb+(3*barHs),
            },group[_-1])
      		end
          gHpBar[_] = Geyser.Gauge:new({
          	name = "gHpBar".._,
          	x=0,y=0,
          	width=barW,height=barHb
          },group[_])
          gMnBar[_] = Geyser.Gauge:new({
          	name = "gMnBar".._,
          	x=0,y=barHb,
          	width=barW,height=barHs
          },gHpBar[_])
          gMvBar[_] = Geyser.Gauge:new({
          	name = "gMvBar".._,
          	x=0,y=barHs,
          	width=barW,height=barHs
          },gMnBar[_])
          gAlignBar[_] = Geyser.Gauge:new({
          	name = "gAlignBar".._,
          	x=0,y=barHs,
          	width=barW,height=barHs
          },gMvBar[_])
					gDamBar[_] = Geyser.Gauge:new({
          	name = "gDamBar".._,
						orientation = "goofy",
          	x=(82+barW)*-1,y=0,
          	width=82,height=barHb+barHs+barHs
          },group[_])
  				
          gAlignBar[_].back:setStyleSheet(GaugeBackGCSS1:getCSS())
          GaugeFrontGCSS1:set("background-color","QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 "..aard.neutralc1..", stop: 1 "..aard.neutralc2..")")
          gAlignBar[_].front:setStyleSheet(GaugeFrontGCSS1:getCSS())
          gAlignBar[_]:setValue(100,100)
          
          gHpBar[_].back:setStyleSheet(GaugeBackGCSS1:getCSS())
          GaugeFrontGCSS1:set("background-color","QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 "..aard.hpc1..", stop: 1 "..aard.hpc2..")")
          gHpBar[_].front:setStyleSheet(GaugeFrontGCSS1:getCSS())
          gHpBar[_]:setValue(100,100)
          
          gMnBar[_].back:setStyleSheet(GaugeBackGCSS1:getCSS())
          GaugeFrontGCSS1:set("background-color","QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 "..aard.mnc1..", stop: 1 "..aard.mnc2..")")
          gMnBar[_].front:setStyleSheet(GaugeFrontGCSS1:getCSS())
          gMnBar[_]:setValue(100,100)
          
          gMvBar[_].back:setStyleSheet(GaugeBackGCSS1:getCSS())
          GaugeFrontGCSS1:set("background-color","QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 "..aard.mvc1..", stop: 1 "..aard.mvc2..")")
          gMvBar[_].front:setStyleSheet(GaugeFrontGCSS1:getCSS())
          gMvBar[_]:setValue(100,100)
					
          gDamBar[_].back:setStyleSheet(GaugeBackGCSS2:getCSS())
          GaugeFrontGCSS1:set("background-color","QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 "..aard.evilc1..", stop: 1 "..aard.evilc2..")")
          gDamBar[_].front:setStyleSheet(GaugeFrontGCSS1:getCSS())
          gDamBar[_]:setValue(1,100)
					
  				gAlignBar[_]:hide()
    		else
    			if _ &lt;= gmcp.group.count then
    				group[_]:show()
    			end
    		end
				
				--get total group damage
				local gmdam = 0
        for k, v in pairs(aard.group) do
					gmdam = gmdam + v.alldam
        end
				--im not sure this is done properly, look at it later to make sure general stats dont overwrite personal ones later
    		if aard.name == gmcp.group.members[_].name then
    			aard.gindex = _
    			
        	if not (gmcp.char.maxstats) then return end
        	local hp_pct = tostring(getPercent(aard.hp, aard.maxhp))
        	local mp_pct = tostring(getPercent(aard.mp, aard.maxmp))
        	local mv_pct = tostring(getPercent(aard.mv, aard.maxmv))
    
          gHpBar[_]:setValue(aard.hp, aard.maxhp,"&lt;b&gt;&amp;nbsp;hp&amp;nbsp;"..aard.hp.."&amp;nbsp;/&amp;nbsp;"..aard.maxhp.."&amp;nbsp;"..string.format("%i", hp_pct).."%&lt;/b&gt;")
          gMnBar[_]:setValue(aard.mp, aard.maxmp)
          gMvBar[_]:setValue(aard.mv, aard.maxmv)
    		end
    		
        local ghp, gmhp = gmcp.group.members[_].info.hp, gmcp.group.members[_].info.mhp
        local gmn, gmmn = gmcp.group.members[_].info.mn, gmcp.group.members[_].info.mmn
        local gmv, gmmv = gmcp.group.members[_].info.mv, gmcp.group.members[_].info.mmv
				
				if gmdam == 0 then
					gmdam = 100
				end
				local gdam = 0
				if aard.group[gmcp.group.members[_].name] then
					gdam = aard.group[gmcp.group.members[_].name].alldam
				end
				
				local galign = gmcp.group.members[_].info.align
        
        local hp_pct = tostring(getPercent(ghp, gmhp))
        local mp_pct = tostring(getPercent(gmn, gmmn))
        local mv_pct = tostring(getPercent(gmv, gmmv))
				local dam_pct = tostring(getPercent(gdam, gmdam))
				

        
				if ghp &gt; gmhp then
          ghp = gmhp
        end
        
        if gmcp.group.members[_].info.here == 0 then
          gh = "*"
        else
          gh = "&amp;nbsp;"
        end
        
  			gStyleW = '&lt;font style="color:white"&gt;'
    		gStyleR = '&lt;font style="color:'..aard.goodc1..'"&gt;'
				
				local lvl = gmcp.group.members[_].info.lvl
				lvl = string.format("%3s", lvl)
				lvl = string.gsub(lvl," ","&amp;nbsp;")
  			
				local name = gmcp.group.members[_].name
				name = string.format("%-9s", string.sub(name, 1, 9))
				name = string.gsub(name," ","&amp;nbsp;")
				
				local qt = gmcp.group.members[_].info.qt
				qt = string.format("%2s", qt)
				qt = string.gsub(qt," ","&amp;nbsp;")

				local tnl = gmcp.group.members[_].info.tnl
				tnl = string.format("%4s", tnl)
				tnl = string.gsub(tnl," ","&amp;nbsp;")
				
				--local dpct = aard.group[gmcp.group.members[_].name].pheal.."  "..string.format("%i", dam_pct).."%"
				local dpct = string.format("%i", dam_pct).."%"
				dpct = string.format("%12s", dpct)
				dpct = string.gsub(dpct," ","&amp;nbsp;")
				
  			if gmcp.group.members[_].name == gmcp.group.leader then
        	gHpBar[_]:setValue(ghp, gmhp,"&lt;font face='Bitstream Vera Sans Mono'&gt;&lt;b&gt;"..gh..lvl.."&amp;nbsp;"..gStyleR..name..gStyleW.."&amp;nbsp;"..qt.."&amp;nbsp;"..tnl.."&lt;/b&gt;&lt;/font&gt;")
				else
  				gHpBar[_]:setValue(ghp, gmhp,"&lt;font face='Bitstream Vera Sans Mono'&gt;&lt;b&gt;"..gh..lvl.."&amp;nbsp;"..name.."&amp;nbsp;"..qt.."&amp;nbsp;"..tnl.."&lt;/b&gt;&lt;/font&gt;")
  			end
        gMnBar[_]:setValue(gmn, gmmn)
        gMvBar[_]:setValue(gmv, gmmv)
				
				gDamBar[_]:setValue(gdam, gmdam,"&lt;font face='Bitstream Vera Sans Mono'&gt;&lt;b&gt;"..dpct.."&amp;nbsp;&lt;/b&gt;&lt;/font&gt;")
				
        if galign &gt; 875 then
          GaugeFrontGCSS1:set("background-color","QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 "..aard.goodc1..", stop: 1 "..aard.goodc2..")")--good
          gAlignBar[_]:setValue(galign, 2500)
        elseif galign &gt; -1 then
          GaugeFrontGCSS1:set("background-color","QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 "..aard.neutralc1..", stop: 1 "..aard.neutralc2..")")--neutral
          gAlignBar[_]:setValue(galign, 2500)
        elseif galign &gt; -874 then
          GaugeFrontGCSS1:set("background-color","QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 "..aard.neutralc1..", stop: 1 "..aard.neutralc2..")")--neutral negative		
          gAlignBar[_]:setValue(-1*galign, 2500)
        else
          GaugeFrontGCSS1:set("background-color","QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 "..aard.evilc1..", stop: 1 "..aard.evilc2..")")--evil negative
          gAlignBar[_]:setValue(-1*galign, 2500)
        end
        gAlignBar[_].front:setStyleSheet(GaugeFrontGCSS1:getCSS())
  			gAlignBar[_]:hide()
      end
	
  		--hide any extra containers
    	for i=gmcp.group.count+1,50 do
    		if group[i] then
    			group[i]:hide()
    			--echo("\ngroup["..i.."]:hide()\n")
    		else
    			break--exit the loop, no containers exist beyond this index.
    		end
    	end
			
		end
		
	elseif aard.config["group"] == 2 then
	
	end
end</script>
					<eventHandlerList>
						<string>gmcp.group</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>onQuest</name>
					<packageName></packageName>
					<script>function onQuest()
	if (gmcp.comm.quest.wait) then
		aard.qtime = gmcp.comm.quest.wait
		aard.timerQuest=math.floor(getEpoch() + 0.5)+gmcp.comm.quest.wait*60
	elseif (gmcp.comm.quest.status == "ready") then
		aard.timerQuest=math.floor(getEpoch())
	elseif (gmcp.comm.quest.action == "start" or gmcp.comm.quest.action == "status") then
		if (gmcp.comm.quest.timer) then
			--questing
		elseif (gmcp.comm.quest.time) then
			--qtime
		end
	end
	aard.qTimeNOexp()
end</script>
					<eventHandlerList>
						<string>gmcp.comm.quest</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>onVitals</name>
					<packageName></packageName>
					<script>function onVitals()

	--if not (aard.gui.init) then return end

	-- On startup, char.vitals can come in before maxstats
	if not (gmcp.char.maxstats) then return end

	aard.hp, aard.maxhp = gmcp.char.vitals.hp, gmcp.char.maxstats.maxhp
	aard.mp, aard.maxmp = gmcp.char.vitals.mana, gmcp.char.maxstats.maxmana
	aard.mv, aard.maxmv = gmcp.char.vitals.moves, gmcp.char.maxstats.maxmoves

	local hp_pct = tostring(getPercent(aard.hp, aard.maxhp))
	local mp_pct = tostring(getPercent(aard.mp, aard.maxmp))
	local mv_pct = tostring(getPercent(aard.mv, aard.maxmv))
	
	if aard.hp &gt; aard.maxhp then
		aard.hp = aard.maxhp
	end
	Health:setValue(aard.hp, aard.maxhp,"&lt;b&gt; &amp;nbsp; "..aard.hp.."hp | "..string.format("%i", hp_pct).."% &amp;nbsp; ("..aard.hpot..")&lt;/b&gt;")
	Mana:setValue(aard.mp, aard.maxmp,"&lt;b&gt; &amp;nbsp; "..aard.mp.."mp | "..string.format("%i", mp_pct).."% &amp;nbsp; ("..aard.spot..")&lt;/b&gt;")
	Moves:setValue(aard.mv, aard.maxmv,"&lt;b&gt; &amp;nbsp; "..aard.mv.."mv | "..string.format("%i", mv_pct).."% &amp;nbsp; ("..aard.mpot..")&lt;/b&gt;")
	
	--update group values for my character from char.vitals because it updates faster than group info that is only every 2-3 seconds.
	if aard.gindex ~= 0 then
		if aard.config["group"] == 1 then
			gHpBar[aard.gindex]:setValue(aard.hp, aard.maxhp)
    	gMnBar[aard.gindex]:setValue(aard.mp, aard.maxmp)
    	gMvBar[aard.gindex]:setValue(aard.mv, aard.maxmv)
		else		
    	gHpBar[aard.gindex]:setValue(aard.hp, aard.maxhp,"&lt;b&gt;&amp;nbsp;hp&amp;nbsp;"..aard.hp.."&amp;nbsp;/&amp;nbsp;"..aard.maxhp.."&amp;nbsp;"..string.format("%i", hp_pct).."%&lt;/b&gt;")
    	gMnBar[aard.gindex]:setValue(aard.mp, aard.maxmp,"&lt;b&gt;&amp;nbsp;mn&amp;nbsp;"..aard.mp.."&amp;nbsp;/&amp;nbsp;"..aard.maxmp.."&amp;nbsp;"..string.format("%i", mp_pct).."%&lt;/b&gt;")
    	gMvBar[aard.gindex]:setValue(aard.mv, aard.maxmv,"&lt;b&gt;&amp;nbsp;mv&amp;nbsp;"..aard.mv.."&amp;nbsp;/&amp;nbsp;"..aard.maxmv.."&amp;nbsp;"..string.format("%i", mv_pct).."%&lt;/b&gt;")
		end
	end

end

function getPercent(top, bottom)
	return (tonumber(top)/tonumber(bottom)) * 100
end</script>
					<eventHandlerList>
						<string>gmcp.char.vitals</string>
						<string>gmcp.char.maxstats</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>onRoom</name>
					<packageName></packageName>
					<script>function onRoom()	
  if not aard.map.current_room then--value not initialized
    if gmcp.room.info then
      if gmcp.room.info.num then--gmcp room number available
        if gmcp.room.info.num ~= -1 then--gmcp room number is not a -1 value (nomap room)
          aard.map.current_room = gmcp.room.info.num
        end
      end
    end
  end
  if not (aard.map.init) then return end

  if (aard.special_move) then 
	aard.special_move = false
	return 
  end
  aard.log:debug("Parsing room")
  if gmcp.room.info then
  	if gmcp.room.info.num == 49393 then
  		send("close north;lock north")
  	elseif gmcp.room.info.num == 47195 and aard.command == "n" then
  		send("close south;lock south")
  	end
	end
  aard.map:parseGmcpRoom()
	
end
-- Parse gmcp.room data from the mud

function aard.map:parseGmcpRoom()
  local room_data = gmcp.room.info
	--local full = gmcp.room
  --display(room_data)
	--display(full)
  local zone_name = gmcp.room.info.zone

  -- Zone Handling
  if aard.map.current_zone ~= zone_name then
    aard.log:debug("Entered different zone")
    aard.map:setZone(zone_name)
  end
 
  -- Continent handling
  if gmcp.room.info.coord.cont == 1 then
    aard.log:debug("Continent room seen")
    local found_zone, zone_id = aard.map:isKnownZone(zone_name)
--    setGridMode(zone_id, true)
  end

  aard.map.seen_room = gmcp.room.info.num
  aard.map.prior_room = aard.map.current_room

  if aard.map.seen_room == -1 then
    -- Eventually needs to work to map "nomap" areas...
    aard.log:info("Can't find room based on mud id - none given - nomap rooms not yet implemented")
    local nexits = getRoomExits(aard.map.current_room)
		display(nexits)
		--if direction from existing room - room exists then display warning, room already exists
		--elseif direction does not have existing room, create it.
  		--aard.log:debug("New room seen - creating...")
      --aard.map:createRoom()
  elseif roomExists(aard.map.seen_room) then
	
    if getRoomEnv(aard.map.seen_room) == 999 then
				aard.map:exploreRoom()
--      aard.log:debug("Existing room is a temp room - recreating")
--      deleteRoom(aard.map.seen_room)  -- Causes exits to get delinked!
--      aard.map:createRoom()
--      aard.map:connectExits(aard.map.prior_room_data) -- Relink missing exits
    else
      aard.log:debug("Found existing room - moving there")
      aard.map.current_room = aard.map.seen_room
			--jakejake this goes off the direction used instead of vnum info. for now lets work without this.
			--because if you quickly spam comamnds such as north west north west, it gets it wrong.
			--i have an idea that may make this work by comparing command history, but its not a priority right now.
			--if aard.map:isCardinalExit(command) then
			--	if aard.map.prior_room ~= gmcp.room.info.num then--prevent same room linking, alas you cannot go that way!
			--		setExit(aard.map.prior_room, aard.map.current_room, command)
			--	end
			--end
			--do some get room position magic here, to confirm that a room exists in the given direction.
			--and that the previous and current roomnumbers line up for that direction.
      if aard.other == true then
				aard.other = false
				aard.map:connectSpecialExits()
      end
			centerview(aard.map.seen_room)--jakejake	
    	if firstRoom == true or aard.newzone == true then
    	  aard.map:connectExits(gmcp.room,false)
    	else
    	  aard.map:connectExits(gmcp.room,true)
    	end
    end
  else
    aard.log:debug("New room seen - creating...")
    --display(room_data)
    aard.map:createRoom()
  end
  aard.map.prior_room_data = table.copy(gmcp.room)
  aard.map.prior_zone_name = zone_name
	
	--call map label update here.
	--mapLabel(room_data.zone:gsub("^%l", string.upper) .. " - " .. room_data.name)
	local maptext = room_data.zone:gsub("^%l", string.upper) .. " - " .. aard.stripRoomName(gmcp.room.info.name)
	GUIframe.tabs.Map:echo('&lt;p style="font-size:13px; color = white"&gt;&lt;b&gt;' .. maptext)
end

function table.copy(t)
  local t2 = {}
  for k,v in pairs(t) do
    t2[k] = v
  end
  return t2
end</script>
					<eventHandlerList>
						<string>gmcp.room</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>onTick</name>
					<packageName></packageName>
					<script>function onTick()
  if math.floor((aard.timerQuest-math.floor(getEpoch()+0.5))/60) &lt;= 0 then
  	aard.qtime = 0--its quest time
  else
		local myQT = math.floor((aard.timerQuest-getEpoch())/60)
		if myQT &gt; 0 then
  		aard.qtime = myQT
		else
			aard.qtime = 1
		end
  end
  if math.floor((aard.timerDaily-math.floor(getEpoch()+0.5))/60) &lt;= 0 then
  	aard.dtime = 0--its daily blessing time
  else
		local myDT = math.floor((aard.timerDaily-getEpoch())/60)
		--local myDT = aard.timerDaily-getEpoch()
		if myDT &gt; 0 then
  		aard.dtime = myDT
		else
			aard.dtime = 1
		end
  end
	aard.qTimeNOexp()
end
--aard.timerDaily = getEpoch()+(matches[2]*60*60)+(matches[3]*60)+matches[4]
--aard.dtime</script>
					<eventHandlerList>
						<string>gmcp.comm.tick</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>onName</name>
					<packageName></packageName>
					<script>function onName()
	aard.name = gmcp.char.base.name
	aard.tnlmax = gmcp.char.base.perlevel
	aard.config = aard.config or aard.configDefault or {}
  if io.exists(getMudletHomeDir().."/aardwolf/config-"..gmcp.char.base.name..".lua") then
    table.load(getMudletHomeDir().."/aardwolf/config-"..gmcp.char.base.name..".lua", aard.config)
    for k, v in pairs(aard.configDefault) do
    	if not aard.config[k] then
				--new config parameter, add it to the config with default value
				aard.config[k] = v
				table.save(getMudletHomeDir().."/aardwolf/config-"..gmcp.char.base.name..".lua", aard.config)
			end
    end
	else
		table.save(getMudletHomeDir().."/aardwolf/config-"..gmcp.char.base.name..".lua", aard.config)
  end
end</script>
					<eventHandlerList>
						<string>gmcp.char.base</string>
					</eventHandlerList>
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>favMenu</name>
				<packageName></packageName>
				<script>cshopmenu = {}
cshopsubmenu = {}

aard = aard or {}
aard.menuHeight = aard.menuHeight or 25
aard.subWidth = aard.subWidth or 200</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>flyout</name>
					<packageName></packageName>
					<script>function populatelist()
  cshops = {}

  table.insert(cshops, "30525")--bard
  table.insert(cshops, "30531")--bard
  table.insert(cshops, "30532")--bard
  table.insert(cshops, "30533")--bard
	
  table.insert(cshops, "49256")--boot
  table.insert(cshops, "49392")--boot
  table.insert(cshops, "50102")--boot
  table.insert(cshops, "50103")--boot
	
  table.insert(cshops, "31123")--crusader
  table.insert(cshops, "49217")--crusader
  table.insert(cshops, "47187")--crusader
  table.insert(cshops, "31150")--crusader
  table.insert(cshops, "31158")--crusader
  table.insert(cshops, "31128")--crusader
  table.insert(cshops, "31156")--crusader
	
  table.insert(cshops, "49335")--gaardian
  table.insert(cshops, "20029")--gaardian
  table.insert(cshops, "20035")--gaardian
			
  table.insert(cshops, "14162")--seekers
  table.insert(cshops, "14141")--seekers
  table.insert(cshops, "14168")--seekers

  table.insert(cshops, "31594")--tanelorn
  table.insert(cshops, "31584")--tanelorn
  table.insert(cshops, "31566")--tanelorn
	  
  table.insert(cshops, "29214")--tao
  table.insert(cshops, "29220")--tao
  table.insert(cshops, "29221")--tao
  table.insert(cshops, "29223")--tao
  table.insert(cshops, "49373")--tao
  
  table.insert(cshops, "50152")--touchstone
  table.insert(cshops, "28358")--touchstone
  table.insert(cshops, "28361")--touchstone
  table.insert(cshops, "28359")--touchstone
  table.insert(cshops, "50123")--touchstone
	
  table.insert(cshops, "34210")--amazon
	--baal NONE?
  table.insert(cshops, "15704")--cabal
	table.insert(cshops, "28910")--chaos
	table.insert(cshops, "27991")--crimson
  table.insert(cshops, "30949")--daoine
  table.insert(cshops, "16803")--doh
	table.insert(cshops, "5865")--dominion
	table.insert(cshops, "642")--dragon
	table.insert(cshops, "29580")--druid
  table.insert(cshops, "831")--emerald
	table.insert(cshops, "2292")--hook
	table.insert(cshops, "30415")--imperium  NO SHOP!!!
	table.insert(cshops, "2339")--light
	table.insert(cshops, "28580")--loqui
	table.insert(cshops, "15855")--masaki
	table.insert(cshops, "19967")--perdition
	table.insert(cshops, "15141")--pyre
	table.insert(cshops, "1961")--retribution
	table.insert(cshops, "502")--rhabdo	
  table.insert(cshops, "24182")--romani
	table.insert(cshops, "32408")--shadokil
	table.insert(cshops, "15574")--twinlobe
  table.insert(cshops, "879")--vanir  
  table.insert(cshops, "32342")--watchmen
  table.insert(cshops, "49572")--xunti
	
end

function testFunc(name)
  --display(name)
	gotoRoom(name)
end

function checkShopMenu(roomid)
	subIndex = #cshopsubmenu + 1
  for j, room_id in pairs(cshopmenu) do
    if room_id.name == getRoomAreaName(getRoomArea(roomid)) then
      cshopsubmenu[subIndex]=cshopmenu[j]:addChild({name=getRoomAreaName(getRoomArea(roomid))..subIndex,height=aard.menuHeight,width=aard.subWidth, layoutDir="RV", flyOut=true, message=getRoomName(roomid)})
			cshopsubmenu[subIndex]:setClickCallback("testFunc", roomid)
			cshopsubmenu[subIndex]:setStyleSheet([[background-color: grey;   border-width: 1px;  border-style: solid;   border-color: green;  border-width: 1px;  font-size: 7pt;]])
			return 1
		end
  end
	return 0
end

function checkShopArea(roomid)
	areaIndex = #cshopmenu + 1
	areaPlus = 0
  for j, room_id in pairs(cshops) do
    if getRoomAreaName(getRoomArea(roomid)) == getRoomAreaName(getRoomArea(room_id)) then
			areaPlus = areaPlus + 1
		end
  end	
	if areaPlus &gt; 1 then
		--multiple shops with that area name, add next/submenu for this area.
  	cshopmenu[areaIndex] = mainlabel:addChild({
    name=getRoomAreaName(getRoomArea(roomid)),
    height=aard.menuHeight,width=100,
    layoutDir="BV", flyOut=true,
    message=getRoomAreaName(getRoomArea(roomid))})  		
    cshopmenu[areaIndex]:setStyleSheet([[background-color: purple; border-width: 1px; border-style: solid; border-color: blue; border-radius: 1px;]])
		checkShopMenu(roomid)--add to sub menu
	else
		--only shop entry, no submenu
  	cshopmenu[areaIndex] = mainlabel:addChild({
    name=getRoomAreaName(getRoomArea(roomid)),
    height=aard.menuHeight,width=100,
    layoutDir="BV", flyOut=true,
    message=getRoomAreaName(getRoomArea(roomid))})
		cshopmenu[areaIndex]:setClickCallback("testFunc", roomid)
    cshopmenu[areaIndex]:setStyleSheet([[background-color: purple; border-width: 1px; border-style: solid; border-color: blue; border-radius: 1px;]])
	end
	return areaPlus
end

--options to layoutDir are the direction the window should go (R for right, L for left, T for top, B for bottom), followed by how the nested labels should be oriented (V for vertical or H for horizontal). So "BH" here means it'll go on the bottom of the label, while expanding horizontally
function cShopMenu()
  populatelist()--create the list of rooms
  mainlabel = Geyser.Label:new({name="cshopmenu0",x=0,y=0,height=25,width=100,nestflyout=true,message="&lt;center&gt;ClanShops&lt;/center&gt;"})
  for i, room_id in pairs(cshops) do
		--echo("\n\nroom_id: "..room_id..", area: "..getRoomAreaName(getRoomArea(cshops[i])))
		if cshopmenu[1] then		
			if checkShopMenu(cshops[i]) &gt; 0 then--its storing the index value
    		--found existing shop submenu, and added to it.				
			else
				checkShopArea(cshops[i])--either create a new submenu, or if only shop in that area then add item without submenu
			end
		else--first item
			checkShopArea(cshops[i])--either create a new submenu, or if only shop in that area then add item without submenu			
		end
  end
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
		</ScriptGroup>
	</ScriptPackage>
	<KeyPackage>
		<KeyGroup isActive="yes" isFolder="yes">
			<name>aard</name>
			<packageName></packageName>
			<script></script>
			<command></command>
			<keyCode>-1</keyCode>
			<keyModifier>-1</keyModifier>
			<Key isActive="yes" isFolder="no">
				<name>/ health potion</name>
				<packageName></packageName>
				<script>--to change the potion used, change "config" in Scripts section.
send("get '"..aard.config["hpot"].."' "..aard.config["pbag"]..";quaf '"..aard.config["hpot"].."'",true)
if aard.hpot &gt; 0 then
	aard.hpot = aard.hpot -1
end
local hp_pct = tostring(getPercent(aard.hp, aard.maxhp))
Health:setValue(aard.hp, aard.maxhp,"&lt;b&gt; &amp;nbsp; "..aard.hp.."hp | "..string.format("%i", hp_pct).."% &amp;nbsp; ("..aard.hpot..")&lt;/b&gt;")</script>
				<command></command>
				<keyCode>47</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>shift / health potion</name>
				<packageName></packageName>
				<script>--to change the potion used, change "config" in Scripts section.
send("get incomplete "..aard.config["pbag"]..";quaf incomplete",true)
if aard.hpot &gt; 0 then
	aard.hpot = aard.hpot -1
end
local hp_pct = tostring(getPercent(aard.hp, aard.maxhp))
Health:setValue(aard.hp, aard.maxhp,"&lt;b&gt; &amp;nbsp; "..aard.hp.."hp | "..string.format("%i", hp_pct).."% &amp;nbsp; ("..aard.hpot..")&lt;/b&gt;")</script>
				<command></command>
				<keyCode>47</keyCode>
				<keyModifier>570425344</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>* mana potion</name>
				<packageName></packageName>
				<script>--to change the potion used, change "config" in Scripts section.
send("get '"..aard.config["mpot"].."' "..aard.config["pbag"]..";quaf '"..aard.config["mpot"].."'",true)
if aard.spot &gt; 0 then
	aard.spot = aard.spot -1
end
local mp_pct = tostring(getPercent(aard.mp, aard.maxmp))
Mana:setValue(aard.mp, aard.maxmp,"&lt;b&gt; &amp;nbsp; "..aard.mp.."mp | "..string.format("%i", mp_pct).."% &amp;nbsp; ("..aard.spot..")&lt;/b&gt;")</script>
				<command></command>
				<keyCode>42</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>- move potion</name>
				<packageName></packageName>
				<script>--to change the potion used, change "config" in Scripts section.
send("get '"..aard.config["vpot"].."' "..aard.config["pbag"]..";quaf '"..aard.config["vpot"].."'",true)
if aard.mpot &gt; 0 then
	aard.mpot = aard.mpot -1
end
local mv_pct = tostring(getPercent(aard.mv, aard.maxmv))
Moves:setValue(aard.mv, aard.maxmv,"&lt;b&gt; &amp;nbsp; "..aard.mv.."mv | "..string.format("%i", mv_pct).."% &amp;nbsp; ("..aard.mpot..")&lt;/b&gt;")</script>
				<command></command>
				<keyCode>45</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>+ spellup / attack spell</name>
				<packageName></packageName>
				<script>if aard.state == 8 then
	send(aard.config["attack1"],true)--in combat
else	
	send("napalm;spellup int;spellup wis;spellup luck;spellup stats;spellup",true)--out of combat
end</script>
				<command></command>
				<keyCode>43</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>shift +   pre-spellup</name>
				<packageName></packageName>
				<script>send("c 'intellect fortress';c awakening;c perception;c 'self harmony';c calculation;napalm")</script>
				<command></command>
				<keyCode>43</keyCode>
				<keyModifier>570425344</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>. scan / debuff</name>
				<packageName></packageName>
				<script>if aard.state == 8 then
	send(aard.config["debuff1"],true)--in combat, debuff
else	
	send("scan",true)--out of combat, cleanse
end</script>
				<command></command>
				<keyCode>46</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>7 con all / else combat</name>
				<packageName></packageName>
				<script>if aard.state == 8 then
	send(aard.config["debuff2"],true)--in combat
else	
	send("con all",true)--out of combat
end</script>
				<command></command>
				<keyCode>55</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>1 portal</name>
				<packageName></packageName>
				<script>send(aard.config["port"])</script>
				<command></command>
				<keyCode>49</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>5 Look</name>
				<packageName></packageName>
				<script></script>
				<command>l</command>
				<keyCode>53</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>3 Down</name>
				<packageName></packageName>
				<script>openDoor("down")
send("d",true)</script>
				<command></command>
				<keyCode>51</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>9 Up</name>
				<packageName></packageName>
				<script>openDoor("up")
send("u",true)</script>
				<command></command>
				<keyCode>57</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>4 West</name>
				<packageName></packageName>
				<script>openDoor("w")
send("w",true)</script>
				<command></command>
				<keyCode>52</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>6 East</name>
				<packageName></packageName>
				<script>openDoor("e")
send("e",true)</script>
				<command></command>
				<keyCode>54</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>2 South</name>
				<packageName></packageName>
				<script>openDoor("s")
send("s",true)</script>
				<command></command>
				<keyCode>50</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>8 North</name>
				<packageName></packageName>
				<script>openDoor("n")
send("n",true)</script>
				<command></command>
				<keyCode>56</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>0 key</name>
				<packageName></packageName>
				<script>if aard.state == 8 then	
	send(aard.config["debuff2"],true)--in combat
else
	send("score",true)--out of combat
end</script>
				<command></command>
				<keyCode>48</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>F4 roomcount area</name>
				<packageName></packageName>
				<script>local myRoomsTable = getRooms()
local count = count or 0
for _ in pairs(myRoomsTable) do
	count = count + 1
end
echo("\nThe map has " .. count .. " rooms mapped.\n")

local areaId = getRoomArea(getPlayerRoom())
local myAreaRoomsTable = getAreaRooms(areaId)
local count = 1 + #myAreaRoomsTable
echo("\nThe area " .. getAreaTableSwap()[areaId] .. " has " .. count .. " rooms mapped.\n")

for j, room_id in pairs(myAreaRoomsTable) do
	--echo("roomID:"..room_id.." Z:")
  local x,y,z = getRoomCoordinates(room_id)
  if z ~= 0 then
		hechoLink("|cFF0000roomID:"..room_id..".\n", [[gotoRoom(]]..room_id..[[)]], "runto", true)
		--aard.roomFind(tostring(room_id))
	end
end
send("explored",true)</script>
				<command></command>
				<keyCode>16777267</keyCode>
				<keyModifier>0</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>shift+F4 print names area</name>
				<packageName></packageName>
				<script>local myRoomsTable = getRooms()
local count = count or 0
for _ in pairs(myRoomsTable) do
	count = count + 1
end
echo("\nThe map has " .. count .. " rooms mapped.\n")

local areaId = getRoomArea(getPlayerRoom())
local myAreaRoomsTable = getAreaRooms(areaId)
local count = 1 + #myAreaRoomsTable
echo("\nThe area " .. getAreaTableSwap()[areaId] .. " has " .. count .. " rooms mapped.\n")

for j, room_id in pairs(myAreaRoomsTable) do
	--echo("roomID:"..room_id.." Z:")
	echo("\n"..room_id..": "..getRoomName(room_id))
  local x,y,z = getRoomCoordinates(room_id)
  if z ~= 0 then
		hechoLink("|cFF0000roomID:"..room_id..".\n", [[gotoRoom(]]..room_id..[[)]], "runto", true)
		--aard.roomFind(tostring(room_id))
	end
end
echo("\n")
send("explored",true)</script>
				<command></command>
				<keyCode>16777267</keyCode>
				<keyModifier>33554432</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>F5 area exits check</name>
				<packageName></packageName>
				<script>--I used this hotkey while checking which zones to delete for a startermap.
--So that I could preserve parts of areas that lead to other areas. (areas that are not linked from the continents.)

--part that lists area room count
local myRoomsTable = getRooms()
local count = count or 0
for _ in pairs(myRoomsTable) do
	count = count + 1
end
--echo("\nThe map has " .. count .. " rooms mapped.\n")

local areaId = getRoomArea(getPlayerRoom())
local myAreaRoomsTable = getAreaRooms(areaId)
local count = 1 + #myAreaRoomsTable
echo("\nThe area " .. getAreaTableSwap()[areaId] .. " has " .. count .. " rooms mapped.\n\n")

--part that lists rooms not on the 0 z axis
for j, room_id in pairs(myAreaRoomsTable) do
	--echo("roomID:"..room_id.." Z:")
  local x,y,z = getRoomCoordinates(room_id)
  if z ~= 0 then
		hechoLink("|cFF0000roomID:"..room_id..".\n", [[gotoRoom(]]..room_id..[[)]], "runto", true)
		--aard.roomFind(tostring(room_id))
	end
end

--part that lists area exits
local areaID = getRoomArea(getPlayerRoom())
local areaExits = getAreaExits(areaID)

if not areaExits[1] then--must be noexit/portal entrance
	--check all path costs and choose the lowest cost
  local roomlist = getAreaRooms(areaID)  
  -- obtain a room list for each of the room IDs we got
	lowestcost = 9000
	tryroom = 0
  for _, id in pairs(roomlist) do
		local pathable,cost = getPath(aard.map.current_room,id)
		if pathable == true and cost &lt; lowestcost then
			lowestcost = cost
			tryroom = id
		end
  end
	echo(getRoomName(tryroom).." ")
	hechoLink("|cFF0000-"..tryroom, [[gotoRoom(]]..tryroom..[[)]], "runto "..tryroom, true)
	--highlight room
	echo(" ")
	hechoLink("|c00FF00".."[h]", [[highlightRoom(]]..tryroom..[[,0,150,0,255,100,100,1,255,255)]], "highlight "..tryroom, true)
	if gmcp.room.info.num == tryroom then
		echo(" (current room)")
	end
	echo("\n")	
elseif not areaExits[2] then--only one possible room
	local id = areaExits[1]
	echo(getRoomName(id).." ")
	
	hechoLink("|cFF0000"..id, [[gotoRoom(]]..id..[[)]], "runto "..id, true)
	--highlight room
	echo(" ")
	hechoLink("|c00FF00".."[h]", [[highlightRoom(]]..id..[[,0,150,0,255,100,100,1,255,255)]], "highlight "..id, true)
	if gmcp.room.info.num == id then
		echo(" (current room)")
	end
	echo("\n")
else--multiple exits
  for _, id in pairs(areaExits) do
  	echo(getRoomName(id).." ")
  	hechoLink("|cFF0000"..id, [[gotoRoom(]]..id..[[)]], "runto "..id, true)
		--highlight room
		echo(" ")
		hechoLink("|c00FF00".."[h]", [[highlightRoom(]]..id..[[,0,150,0,255,100,100,1,255,255)]], "highlight "..id, true)
		if gmcp.room.info.num == id then
			echo(" (current room)")
		end		
		echo("\n")
  end
end</script>
				<command></command>
				<keyCode>16777268</keyCode>
				<keyModifier>0</keyModifier>
			</Key>
			<Key isActive="no" isFolder="no">
				<name>F7</name>
				<packageName></packageName>
				<script>sqlite3 = require "luasql.sqlite3"
local env  = sqlite3.sqlite3()
local conn = env:connect(getMudletHomeDir()..'/aardwolf/equipment.sqlite3')
print(env,conn)

status,errorString = conn:execute([[CREATE TABLE Armor ('id' INTEGER PRIMARY KEY AUTOINCREMENT, 'name' TEXT)]])
print(status,errorString )

status,errorString = conn:execute([[CREATE TABLE ArmorStats ('id' INTEGER PRIMARY KEY AUTOINCREMENT, 
 'stat' TEXT, 
 'val' INTEGER, 
 'fkid' INTEGER NOT NULL, 
 FOREIGN KEY (fkid) REFERENCES Armor(id))]])
print(status,errorString )

status,errorString = conn:execute([[INSERT INTO Armor (name) values('Aardwolf Aura of Sanctuary')]])
print(status,errorString )

cursor,errorString = conn:execute([[select * from Armor]])
print(cursor,errorString)

row = cursor:fetch ({}, "a")

while row do
   print(string.format("Id: %s, Name: %s", row.id, row.name))
   row = cursor:fetch (row, "a")
end

-- close everything
cursor:close()
conn:close()
env:close()
</script>
				<command></command>
				<keyCode>16777270</keyCode>
				<keyModifier>0</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>f8 portalroom</name>
				<packageName></packageName>
				<script>--If you are going to use a portal action that does not use the keyword "enter" then press this keybinding beforehand, to indicate your about to use a portal.
setRoomChar(gmcp.room.info.num, "&gt;")
aard.other = true</script>
				<command></command>
				<keyCode>16777271</keyCode>
				<keyModifier>0</keyModifier>
			</Key>
		</KeyGroup>
	</KeyPackage>
	<HelpPackage>
		<helpURL></helpURL>
	</HelpPackage>
</MudletPackage>
